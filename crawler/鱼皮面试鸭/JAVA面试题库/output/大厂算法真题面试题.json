{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814980228615798786",
                "questionNum": "3411",
                "title": "阿里淘天2023秋招-讨厌鬼的排列",
                "content": "## 题目描述\n讨厌鬼有一个长度为`n`的数组，他想知道这个数组有多少个子序列是一个排列?\r\n\n子序列的定义：数组删除若干个元素(也可以不删)后得到的新数组。\r\n\n排列的定义：长度为`m`的数组，`1`到`m`每个元素都出现过，且恰好出现`1`次。\r\n\n## 输入描述\n第一行输入一个整数`n (1 < n < 10^5)`\r\n\n第二行输入`n`个整数`ai (1 < a < 10^9)`\r\n\n## 输出描述\n一行一个整数，表示有多少个子序列是一个排列。由于答案过大，请将答案对`10^9+7`取模后输出\r\n\n## 示例\n### 输入\n```\r\n6\r\n1 1 5 2 3 4\r\n```\n### 输出\n```\r\n10\r\n```\n### 说明\n符合要求的子序列有：`{1}`，`{1}`，`{1，2}`，`{1，2}`，`{1，2，3}`，`{1，2，3}`，`{1，2，3，4}`，`{1，2，3，4}`，`{1，5，2，3，4}`，`{1，5，2，3，4}`共`10`个\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 101,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-21 00:52:54",
                "tagList": [
                    "大厂算法真题",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "d59vwc",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980228808736770",
                "questionNum": "3412",
                "title": "Bilibili2023秋招-最长同值路径",
                "content": "## 题目描述\n给定一个二叉树的 `root` ，返回**最长的路径的长度**，这个路径中的每节点具有相同值。这条路径可以经过也可以不经过根节点。\r\n\n**两个节点之间的路径长度，由它们之间的边数表示。**\r\n\n树的节点数的范围是`[0,10^4]`\r\n\n`-1000 <= Node.val <= 1000`\r\n\n树的深度将不超过`1000`\r\n\n## 输入描述\n本题为LeetCode核心代码模式，传入一个参数`root`，为该二叉树的根节点。\r\n\n## 输出描述\n返回一个整数，表示最长路径的长度。\r\n\n## 示例一\n### 输入\n```\r\nroot = [5,4,5,1,1,5]\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/Ktryu3ds_1721119168540_mianshiya.png)\r\n\n## 示例二\n### 输入\n```\r\nroot = [1,4,5,4,4,5]\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/xOYLZHzT_1721119195870_mianshiya.png)\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 113,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-22 00:36:00",
                "tagList": [
                    "大厂算法真题",
                    "DFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ehxp27",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980228989091841",
                "questionNum": "3413",
                "title": "大疆2023秋招-链表合并",
                "content": "## 题目描述\n现在有一个链表数组，每个链表内都已经是**升序**的排序现在请你将所有的链表进行合并，返回合并后的升序链表。\r\n\n## 输入描述\n一共 `n + 1`行数据\r\n\n第`1`行：一共有 `n` 个链表\r\n\n第`2~n+1`行：所有的链表\r\n\n## 输出描述\n合并后的链表的所有元素\r\n\n## 示例一\n### 输入\n```\r\n3\r\n1 4 5 \r\n1 3 4 \r\n2 6\r\n```\n### 输出\n```\r\n1 1 2 3 4 4 5 6\r\n```\n### 说明\n第一行：一共有三组链表\r\n\n第二行：第一组链表：`1->4->5`\r\n\n第三行：第二组链表：`1->3->4`\r\n\n第四行：第三组链表：`2->6`\r\n\n合并后的结果为`1->1->2->3->4->4->5->6`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 163,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-24 12:30:33",
                "tagList": [
                    "大厂算法真题",
                    "链表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "s73dmh",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980229194612737",
                "questionNum": "3414",
                "title": "荣耀2023秋招-找出升序数组中和为给定值的两个数字",
                "content": "## 题目描述\n输入一个已经按升序排序过的数组和一个数字，在数组中查找两个数，使得它们的和正好是输入的那个数字。\r\n\n如果有多对数字的和等于输入的数字，输出找到的第一对即可。\r\n\n## 输入描述\n第一行输入一个按升序排序过的整数数组，数组元素不可重复，数组最大不超过`1000`个元素，起始和结束用中括号。\r\n\n第二行输入一个整数，表示要在第一行数组中要查找的两个数字的和。\r\n\n## 输出描述\n输出一行三个整数，第一个表示结果是否正常(`0`表示异常或未找到，`1`表示正常)，第二个对应找到的数组索引小的数字，第三个对应找到的数组索引大的数字。\r\n\n三个整数用单个空格隔开。\r\n\n如果结果异常或未找到，后两个数字返回均为`0`。\r\n\n## 示例\n### 输入\n```\r\n[1 2 4 7 11 15]\r\n6\r\n```\n### 输出\n```\r\n1 2 4\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 117,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-24 09:02:19",
                "tagList": [
                    "大厂算法真题",
                    "双指针"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "mh10lz",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980229412716545",
                "questionNum": "3415",
                "title": "华为2023暑期实习-空栈压数",
                "content": "## 题目描述\n向一个空栈压入**正整数**，每当压入一个整数时，执行以下规则（设: **栈顶至栈底**整数依次编号为` n1, n2, ..., nx`，其中`n1` 为最新压入的整数)\r\n\n1. 如果 `n1 = n2`，则 `n1`、`n2`全部出栈，压入新数据 `m (m = 2*n1)`\r\n2. 如果 `n1 = n2 + ... + ny`( `y`的范围为`[3,x]`) ，则 `n1, n2, ..., ny` 全部出栈，压入新数据 `m (m = 2*n1)`。\r\n3. 如果上述规则都不满足，则不做操作。\r\n\n如：依次向栈压入 `6、1、2、3`，当压入 `2` 时，栈顶至栈底依次为 `[2,1,6]`；当压入 `3` 时，`3 = 2 + 1`，`3、2、1` 全部出栈，重新入栈整数`6`，此时栈顶至栈底依次为 `[6,6]`；`6 = 6`，两个 `6` 全部出栈，压入 `12`，最终栈中只剩个元素 `12`。\r\n\n向栈中输入一串数字，请输出应用此规则后栈中最终存留的数字。\r\n\n## 输入描述\n使用单个空格隔开的正整数的字符串，如 `\"5 6 7 8\"`，左边的数字先入栈。\r\n\n- 正整数大小为 `[1, 2^31−1]`。\r\n- 正整数个数为 `[1,1000]`。\r\n\n## 输出描述\n最终栈中存留的元素值，元素值使用单个空格隔开，如 `\"8 7 6 5\"`，从左至右依次为栈顶至栈底的数字。\r\n\n## 示例一\n### 输入\n```\r\n10 20 50 80 1 1\r\n```\n### 输出\n```\r\n2 160\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 113,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-19 18:45:38",
                "tagList": [
                    "大厂算法真题",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "fkb5rw",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980230020890626",
                "questionNum": "3416",
                "title": "Bilibili2021秋招-大鱼吃小鱼",
                "content": "## 题目描述\n小明最近喜欢上了俄罗斯套娃、大鱼吃小鱼这些大的包住小的类型的游戏。\r\n\n于是小明爸爸给小明做了一个特别版的大鱼吃小鱼游戏，他希望通过这个游戏能够近一步提高小明的智商。\r\n\n游戏规则如下：\r\n\n现在有`N`条鱼，每条鱼的体积为`Ai`，从左到右排成一排。`A`数组是一个排列。\r\n\n小明每轮可以执行一次大鱼吃小鱼的操作。一次大鱼吃小鱼的操作：对于每条鱼，它在每一次操作时会吃掉右边比自己小的第一条鱼。\r\n\n值得注意的是，在一次操作中，每条鱼吃比自己小的鱼的时候是同时发生的。\r\n\n举一个例子，假设现在有三条鱼，体积为分别`[5，4，3]`，`5`吃`4`，`4`吃`3`，一次操作后就剩下`[5]`一条鱼。\r\n\n爸爸问小明，你知道要多少次操作，鱼的数量就不会变了嘛？\r\n\n## 输入描述\n第一行输入长度`N`\r\n\n第二行输入`A`数组，数字之间用空格隔开\r\n\n`１＜＝N＜＝10^5`，`１＜＝Ai＜＝Ｎ`\r\n\n## 输出描述\n一个正整数, 表示要多少次操作，鱼的数量就不会变了。\r\n\n## 示例一\n### 输入\n```\r\n3\r\n1 2 3\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n无需操作`A`数组。\r\n\n## 示例二\n### 输入\n```\r\n6\r\n4 3 2 3 2 1\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n`[4,3,2,3,2,1]-->[4,3]-->[4]`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 128,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-21 23:28:23",
                "tagList": [
                    "大厂算法真题",
                    "单调栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "0e803n",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980230188662785",
                "questionNum": "3417",
                "title": "Bilibili2019秋招-简单表达式求值",
                "content": "## 题目描述\n给定一个合法的表达式字符串，其中只包含**非负整数、加法、减法以及乘法符号（不会有括号）**，例如`7+3*4*5+2+4-3-1`，请写程序计算该表达式的结果并输出\r\n\n## 输入描述\n输入有多行，每行是一个表达式，输入以`END`作为结束\r\n\n## 输出描述\n每行表达式的计算结果\r\n\n## 示例\n### 输入\n```\r\n7+3*4*5+2+4-3-1\r\n2-3*1\r\nEND\r\n```\n### 输出\n```\r\n69\r\n-1\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 115,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-21 03:09:40",
                "tagList": [
                    "大厂算法真题",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "21qk3f",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980230402572289",
                "questionNum": "3418",
                "title": "荣耀2023秋招-算式求解",
                "content": "## 题目描述\n要开发一款教育类App，帮助幼儿在识数阶段做一百以内自然数[0.99]的加减法。\r\n\n屏幕上会显示`\"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"0\" \"+\" \"-\" \"=\"`这些按钮，用户在按了若工按钮之后，如果按了`\"=\"`，则会把按`\"=\"`之前的字符串作为一个算式，计算结果。\r\n\n中间结果或最后结果可以为负数。\r\n\n## 输入描述\n输入为一个字符串，形如`\"23+86-6+37+24-8-13\"`。\r\n\n输入字符串中保证:\r\n\n1.不会包含除`\"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"0\" \"+\" \"-\" \"=\"`之外的字符\r\n\n2.长度不为`0`\r\n\n3.不以`\"+\"`或`\"-\"`开始，不以`\"+\"`或`\"-\"`结束\r\n\n4.不会出现连续两个或两个以上`\"+\"`\r\n\n5.不会出现连续两个或两个以上`\"-\"`\r\n\n6.`\"+\" \"-\"`不会相邻\r\n\n7.操作数为范围为`[0，99]`\r\n\n8.一定包含运算符 (`\"+\"`或`\"-\"`)\r\n\n## 输出描述\n算式结果，一个整数。\r\n\n## 示例\n### 输入\n```\r\n1+2+99-10-10\r\n```\n### 输出\n```\r\n82\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 79,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-02 11:19:06",
                "tagList": [
                    "大厂算法真题",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "1jzfdr",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980230620676097",
                "questionNum": "3419",
                "title": "百度2017秋招-士兵队列",
                "content": "## 题目描述\n一队士兵在操场上排成一列，士兵总数为`n`，士兵按照队伍从前往后的顺序从`1`到`n`依次编号。每个士兵有各自的身高，第`i`个士兵的身高为`ai`。士兵列队完毕后，将军走到队列的最前面。因为身高不一，有些士兵可能被前面身高更高的挡住了，这样将军就看不到他们。将军能看到某个士兵当且仅当他的身高严格大于他前面的所有士兵。问将军一共能看到多少个士兵。\r\n\n## 输入描述\n第一行输入一个整数`T（T＜=100）`，表示测试数据的组数。\r\n\n每组数据第一行输入一个数`n（1 <= n <= 10^4）`表示士兵的个数，第二行`n`个整数`a1, a2, ..., an（ 0 <= ai <= 10^9)`，依次表示每一个士兵的身高。\r\n\n## 输出描述\n对于每组数据，输出一行，将军能看到的士兵数。\r\n\n## 示例一\n### 输入\n```\r\n3\r\n4\r\n1 2 3 4\r\n3\r\n1 1 1\r\n4\r\n1 1 3 2\r\n```\n### 输出\n```\r\n4\r\n1\r\n2\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 64,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-05-09 16:01:40",
                "tagList": [
                    "大厂算法真题",
                    "单调栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "n2tz98",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980230998163457",
                "questionNum": "3420",
                "title": "腾讯2020春招-压缩算法",
                "content": "## 题目描述\n小Q想要给他的朋友发送一个神秘字符串，但是他发现字符串过于长了，于是小Q发明了一种压缩算法对字符串中重复的部分进行了压缩，对于字符串中连续的`m`个相同字符串`S`将会压缩为`m|S`，例如字符串`ABCABCABC`将会被压缩为`[3|ABC]`，现在小Q的同学收到了小Q发送过来的字符串，你能帮助他进行解压缩么？\r\n\n## 输入描述\n输入只有一行，为压缩过的字符串。\r\n\n## 输出描述\n输出解压后的字符串。\r\n\n## 示例一\n### 输入\n```\r\nHG[3|B[2|CA]]F\r\n```\n### 输出\n```\r\nHGBCACABCACABCACAF\r\n```\n## 说明\n`HG[3|B[2|CA]]F` -> `HG[3|BCACA]F` -> `HGBCACABCACABCACAF`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 133,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-16 22:28:03",
                "tagList": [
                    "大厂算法真题",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "1wr9zt",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980231212072961",
                "questionNum": "3421",
                "title": "华为2023秋招-每日股票价格",
                "content": "## 题目描述\n给定某只股票连续`N`天的价格列表`stockPrices`，其中`stockPrices[i]`表示股票某天的价格，请生成一个新列表，对应位置输出为：要想等到股票价格上涨，至少需要等待的天数，如果股票价格不上涨，对应位置输出为`0`。\r\n\n## 输入描述\n第一行表示第二行元素的个数`N`\r\n\n第二行为用空格隔开的整数，表示每天股票的价格\r\n\n其中`0 < N <= 1000000`每天股票价格为正整数\r\n\n## 输出描述\n输出为用空格分隔的长度为`N`的列表，对应位置为：要想等到股票价格上涨，至少需要等待的天数\r\n\n## 示例\n### 输入\n```\r\n5\r\n33 34 14 12 16\r\n```\n### 输出\n```\r\n1 0 2 1 0\r\n```\n### 说明\n`stockPrices = [33,34,14,12,16]`\r\n\n当`i = 0`时，`stockPrices[0] = 33`,下次价格上涨`stockPrices[1] = 34`，此处输出为`1-0 = 1`，以此类推。\r\n\n**时间限制：** C/C++`500`MS，其他语言`1000`MS\r\n\n**内存限制：** C/C++`256`MB，其他语言`512`MB\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 184,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-17 22:39:07",
                "tagList": [
                    "大厂算法真题",
                    "单调栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "9mrrj9",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980231556005889",
                "questionNum": "3422",
                "title": "美团2023春招-火车迷",
                "content": "## 题目描述\n小美是一个火车迷。最近她在观察家附近火车站的火车驶入和驶出情况，发现火车驶入和驶出的顺序并不一致。经过小美调查发现，原来这个火车站里面有一个类似于栈的结构，如下图所示：\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/oXKqWWfQ_1721208916171_mianshiya.png)\r\n\n例如可能`1`号火车驶入了火车站中的休息区`s`，在驶出之前`2`号火车驶入了。那么在这种情况下，`1`号火车需要等待`2`号火车倒车出去后才能出去（显然被后面驶入的`2`号火车挡住了，这个休息区`s`**只有一个出入口**）。\r\n\n出于好奇，小美统计了近些天的火车驶入驶出情况，开始统计和结束统计时休息区`s`中均是空的。由于中途疏忽，小美觉得自己好像弄错了几个驶入驶出顺序，想请你帮她验证一下。\r\n\n值得注意的是，小美虽然可能弄错了顺序，但对火车的记录是不重不漏的。\r\n\n形式化地来形容休息区`s`，我们视其为一个容量无限大的空间，假设两列火车 `i` 和 `j` 同时处于休息区`s`中，驶入时刻`Tin`满足`Tin(i)<Tin(j)`，则驶出时间`Tout`必定满足`Tout(i)>Tout(j)`，即，先进后出。\r\n\n## 输入描述\n第一行输入一个整数`T`表示数据组数。\r\n\n对每组测试而言：\r\n\n第一行输入一个整数`n`，表示观察到的火车数量。\r\n\n第二行输入n个整数`x1,x2,...,xn`，表示小美记录的火车驶入休息区`s`的顺序。\r\n\n第三行输入n个整数`y1,y2,...,yn`，表示小美记录的火车驶出休息区`s`的顺序。\r\n\n`1 ≤ T ≤ 10`，`1 ≤ n ≤ 50000`，`1 ≤ xi, yi ≤n`， 且`{xn}` 、`{yn}` 均为`{1,2,3,...,n}`的一个排列，即`1~n`这`n`个数在其中不重不漏恰好出现一次。\r\n\n## 输出描述\n对每组数据输出一行：如果小美记录的驶入和驶出顺序无法被满足则输出`No`，否则输出`Yes`。\r\n\n## 示例一\n### 输入\n```\r\n3\r\n3\r\n1 2 3\r\n1 2 3\r\n3\r\n1 2 3\r\n3 2 1\r\n3\r\n1 2 3\r\n3 1 2\r\n```\n### 输出\n```\r\nYes\r\nYes\r\nNo\r\n```\n## 示例二\n### 输入\n```\r\n3\r\n4\r\n1 2 4 3\r\n1 2 3 4\r\n9\r\n1 2 3 4 5 6 7 8 9\r\n3 2 1 6 5 4 9 8 7\r\n4\r\n1 2 3 4\r\n3 2 1 4\r\n```\n### 输出\n```\r\nYes\r\nYes\r\nYes\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 81,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-20 00:31:32",
                "tagList": [
                    "大厂算法真题",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "p73r5z",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980232290009089",
                "questionNum": "3423",
                "title": "腾讯2021秋招&用友2022秋招-逛街",
                "content": "## 题目描述\n小Q在周末的时候和他的小伙伴来到大城市逛街，一条步行街上有很多高楼，共有`n`座高楼排成一行。小Q从第一栋一直走到了最后一栋，小Q从来都没有见到这么多的楼，所以他想知道他在每栋楼的位置处能看到多少栋楼呢？（当前面的楼的高度大于等于后面的楼时，后面的楼将被挡住） \r\n\n## 输入描述\n输入为一个数组，表示每一栋楼的高度`wi`\r\n\n`1 <= n <= 100000`\r\n\n`1 <= wi <= 100000`\r\n\n## 输出描述\n输出为一个长度为`n`的数组，表示在第`i`位置能够看到的楼数。\r\n\n## 示例\n### 输入\n```\r\n[5,3,8,3,2,5]\r\n```\n### 输出\n```\r\n[3,3,5,4,4,4]\r\n```\n### 说明\n当小Q处于位置`3`时，他可以向前看到位置`2,1`处的楼，向后看到位置`4,6`处的楼，加上第`3`栋楼，共可看到`5`栋楼。\r\n\n当小Q处于位置`4`时，他可以向前看到位置`3`处的楼，向后看到位置`5,6`处的楼，加上第`4`栋楼，共可看到`4`栋楼。\r\n\n**时间限制：** 4000MS\r\n\n**内存限制：** 589824KB\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 93,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-14 21:07:25",
                "tagList": [
                    "大厂算法真题",
                    "单调栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "5tfvr9",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980232487141377",
                "questionNum": "3424",
                "title": "米哈游2023秋招-米小游与魔法少女-奇运",
                "content": "## 题目描述\n米小游都快保底了还没抽到希儿，好生气哦！只能打会活动再拿点水晶。\r\n\n米小游和世界第一可爱的魔法少女 TeRiRi 正在打 BOSS，BOSS 的血量为`h`，当 BOSS 血量小于等于`0`时，BOSS 死亡。TeRiRi 有一套牌，在一轮中，她会按顺序一张一张的将卡牌打出，套牌中有两种卡牌：\r\n\n1. **时来运转**：获得`x`个**幸运币**。\r\n2. **幸运一掷**：造成`x`点伤害，并投掷所有**幸运币**，造成等于所有**幸运币**掷出的点数之和的伤害。\r\n\n**幸运币**可以等概率的投掷出`1∼6`之间的点数。 （所以为什么不叫骰子呢？）\r\n\n米小游想知道，TeRiRi 的套牌在一轮内击杀 BOSS 的概率。\r\n\n## 输入描述\n第一行输入两个整数`n (1≤n≤100)`，`h (1≤h≤10^9)`，分别表示卡牌张数和 BOSS 血量。\r\n\n接下来`n`行，每行首先输入两个整数`t (1≤t≤2)`，`x (1≤x≤10)`，`t`为`1`表示卡牌为时来运转，`t`为`2`表示卡牌为幸运一掷。\r\n\n## 输出描述\n输出一个实数表示答案，你的答案与标准答案的误差不超过`10^−4`都被认为是正确答案。\r\n\n## 示例一\n### 输入\n```\r\n2 5\r\n1 1\r\n2 1\r\n```\n### 输出\n```\r\n0.5\r\n```\n### 说明\n幸运币掷出`4`及以上的概率为`0.5`，再加上`1`点固定伤害，即可击杀BOSS。\r\n\n## 示例二\n### 输入\n```\r\n3 1145\r\n1 4\r\n1 9\r\n1 9\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n无论如何都无法击杀BOSS。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 184,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-23 17:18:34",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "nw1ir9",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980232742993922",
                "questionNum": "3425",
                "title": "华为2023秋招-开电动汽车回家过年",
                "content": "## 题目描述\n新年即将来临，小明计划开新买的电动汽车回老家过年。\r\n\n已知小明的工作地在上海，老家在中部某城市A。上海到城市A的距离是`L`公里`(1 <= L <= 100000)`。\r\n\n小明的电动汽车的电池航程是`P (1 <= P <= 100)`，电池最大电量也是`P`（假设电动汽车行驶一公里需要消耗1度电）。如果电动车在中途电量耗尽了，将无法继续前行，也就无法到达目的地了。\r\n\n已知小明出发前已经把电池充满了。途中依次经过`N (1 <= N < 10000)`个充电站。\r\n\n第`i`个充电站距离城市A（终点）有`Ai`公里，最大可充电`Bi`度。\r\n\n请问，小明能不能顺利地回老家过年？如果可以，请输出最少需要充电多少次；如果不可以，请输出`-1`。\r\n\n## 输入描述\n输入的第一行为数字`N`。\r\n\n接下来的`N`行，每行包含`2`个数并用空格隔开，分别表示`Ai Bi`\r\n\n最后一行包括两个数`L P`，并用空格隔开。\r\n\n## 输出描述\n按照题目要求输出最少次数或者`-1`。\r\n\n## 示例\n### 输入\n```\r\n4\r\n4 4\r\n5 5\r\n11 6\r\n15 8\r\n25 10\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n小明出发时电池电量是`10`，距离城市A `25`公里。\r\n\n行驶`10`公里后，到达距离城市A `15`公里的充电站，充电前电池电量为`0`，充电`8`度之后，再出发。\r\n\n行驶`4`公里后，到达距离城市A `11`公里的充电站，充电前电池电量为`4`。充电`6`度之后，再出发。\r\n\n行驶`6`公里后，到达距离城市A `5`公里的充电站，充电前电池电量为`4`，充电`1`度之后，再出发。\r\n\n之后，可以直接开到城市A一共需要充电`3`次才能到达城市A。\r\n\n**时间限制：** C/C++ `1000ms`, 其他语言`2000ms`\r\n\n**内存限制：** C/C++ `256MB`，其他语言 `512MB`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 104,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-14 07:59:00",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "b9lwyd",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980232952709122",
                "questionNum": "3426",
                "title": "科大讯飞非凡计划-小红的区间翻转",
                "content": "小红拿到了两个长度为n的数组 `a` 和`b`，她可以进行恰好一次以下操作：选择`a`数组中的一个区间`[l, r]`，将它们翻转。例如，对于`a`` ``=`` ``[2,3,4,1,5,6]`，小红可以选择区间`[3,5]`，数组`a`则变成`[2,3,5,1,4,6]`。\r\n\n小红希望操作后`a`数组和`b`数组完全相同。请你告诉小红有多少种操作的方案数。\r\n\n第一行输入一个正整数`n`，代表数组的长度。\r\n\n第二行输入`n`个正整数`ai` \r\n\n第三行输入`n`个正整数`bi`\r\n\n`1 ≤n, ai,bi≤ 1000`\r\n\n选择区间的方案数。\r\n\n## 示例\n### 输入\n```\r\n4\r\n1 2 3 1\r\n1 3 2 1\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n可以选择区间`[1, 2, 3,1]`将`a`翻转或者区间`[2,3]`将`a`翻转都能变成`b`，因此总共有`2`种方案\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 68,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-12 20:24:04",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "zaj0ig",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980233158230018",
                "questionNum": "3427",
                "title": "Bilibili2023秋招-两个字符串的最小ASCII删除和",
                "content": "给定两个字符串`s1`和`s2`，返回使两个字符用相等所需删除字符的ASCII值的最小和。\r\n\n`0 <= s1.length, s2.length <= 1000`\r\n\n`s1`和`s2`由小写英文字母组成.\r\n\n本题为LeetCode核心代码模式，传入两个参数`s1`和`s2`，为两个字符串。\r\n\n返回一个整数，为使两个字符串相等所需删除字符的 ASCII 值的最小和 。\r\n\n## 示例一\n### 输入\n```\r\ns1 = \"sea\"\r\ns2 = \"eat\"\r\n```\n### 输出\n```\r\n231\r\n```\n### 说明\n在 `\"sea\"` 中删除 `\"s\"` 并将 `\"s\"` 的值`(115)`加入总和。在 `\"eat\"` 中删除 `\"t\"` 并将 `116` 加入总和。结束时，两个字符串相等，`115 + 116 = 231` 就是符合条件的最小和。\r\n\n## 示例二\n### 输入\n```\r\ns1 = \"delete\"\r\ns2 = \"leet\"\r\n```\n### 输出\n```\r\n403\r\n```\n### 说明\n在 `\"delete\"` 中删除 `\"dee\"` 字符串变成 `\"let\"`，将 `100(d)+101(e)+101(e) `加入总和。在 `\"leet\"` 中删除 `\"e\"` 将 `101(e)` 加入总和。结束时，两个字符串都等于 `\"let\"`，结果即为 `100+101+101+101 = 403` 。如果改为将两个字符串转换为 `\"lee\"` 或 `\"eet\"`，我们会得到 `433` 或 `417` 的结果，比答案更大。\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 90,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-23 09:56:01",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "3qmbs2",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980233451831298",
                "questionNum": "3428",
                "title": "字节跳动2023秋招-小红的 01 串",
                "content": "## 题目描述\n小红拿到了一个 `01` 串，她准备将若干个字符`'1'` 染成红色，将若干个字符`'0'` 染成蓝色，但有个限制：如果一个`'0'` 和一个`'1'` 相邻，那么它们不能同时染色。\r\n\n小红想知道，最多可以染多少个字符？\r\n\n## 输入描述\n输入仅有一行，为小红拿到的 `01` 串。\r\n\n字符串长度不超过`200000`。\r\n\n## 输出描述\n一个正整数，代表能染色的最多字符。\r\n\n## 示例一\n### 输入\n```\r\n110011\r\n```\n### 输出\n```\r\n4\r\n```\n### 说明\n染红第一个、第三个、第五个、第六个字符即可。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 211,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-18 16:36:47",
                "tagList": [
                    "大厂算法真题",
                    "DP&贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "hbi8n9",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980233632186370",
                "questionNum": "3429",
                "title": "得物2023秋招-Cheems的漂亮糖葫芦",
                "content": "## 题目描述\n小狗Cheems在街边买到了一串糖葫芦，这串糖葫芦是由`n`个大写字母构成的。Cheems觉得这串糖葫芦虽然美味，却并不一定能称得上漂亮。当糖葫芦中包含了一串长度为`x`的连续子串，满足正序读与倒序读一模一样时(即是一串回文串)，它会觉得这整串糖葫芦是漂亮的。\r\n\n## 输入描述\n第一行两个以空格隔开的正整数`n`和`x`，表示糖葫芦串长度和Cheems对于子串要求的长度。\r\n\n第二行一个长为`n`的仅包合大写字母的字符串`s`，代表糖葫芦\r\n\n`1 <= n, x <= 5000`\r\n\n## 输出描述\n如果这串糖葫芦是漂亮的，输出`1`，否则输出`0`。\r\n\n## 示例\n### 输入\n```\r\n6 2\r\nAACBBE\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n可以找到称在子串`\"AA\"`，长度为`2`，且正着读与倒着读一模一样.\r\n\n**时间限制：** `3000`MS\r\n\n**内存限制：** `786432`KB\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 53,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-04 17:48:22",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "8t2zt0",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980233850290178",
                "questionNum": "3430",
                "title": "华为2023秋招-PCB印刷电路板布线",
                "content": "## 题目描述\n在PCB印刷电路板设计中，器件之间的连线，要避免线路的阻抗值增大，而且器件之间还有别的器任和别的干扰源，在布线时我们希望受到的干扰尽量小。\r\n\n现将电路板简化成一个`M × N`的矩阵，每个位置（单元格）的值表示其源干扰度。\r\n\n如果单元格的值为`0`，表示此位置没有干扰源，如果单元格的值为非`0`，则表示此位置是干扰源，其值为源干扰度。连线经过干扰源或干扰源附近会增加连线的总干扰度。\r\n\n位置`A[x,y]`的干扰源的源干扰广为`d (d>0)`，则连线的干扰度计算如下：\r\n\n1、若连线经过位置`A[x,y]`，则其总干扰度会增加加\r\n\n2、若连线经过离位置`A[x,y]`距离小于`d`的位置时，设其距离为`k`，则总干扰度会增加`(d-k)`\r\n\n3、若连线经过离位置`A[x,y]`距离大于或等于`d`的位置时，总干扰都不会增加；\r\n\n注：位置`[x1,y1]`和位置`[x2,y2]`之间距离的定义为：`|x1-x2|+|y1-y2|`。\r\n\n如下`3x3`矩阵，位置`[1,1]`的源干扰度是`2`，连线的位置序列为：`[0,0]->[0,1]->[0,2]->[1,2]->[2,2]`。\r\n\n![72111753328](https://pic.code-nav.cn/mianshiya/question_picture/markdown/raPaIgI1_1721117533283_mianshiya.png)\r\n\n其中`[0,1]`和`[1,0]`到干扰源的距离为`1`，会叠加`1`的干扰度；其他位置到`[1,1]`的距离均大于等于`2`，所以不会叠加干扰度。因此这条连线的总干扰度为`2`。\r\n\n现在我们需要将左上角的器件到右下角的器件进行连线，两个器件的位置分别是左上角的`[0,0]`和右下角的`[M-1,N-1]`。由于我们希望连线尽量地短，从位置`[0,0]`到`[M-1,N-1]`的连线途中，我们规定连线只能向下或向右。\r\n\n请根据输入(`M × N`的矩阵)，计算出连线的最小干扰度。\r\n\n## 输入描述\n第一行是两个整数`M`和`N`(`M`和`N`最大值为`1000`)，表示行数和列数；\r\n\n接着是`M`行的数据，每一包含`N`个整数，代表每个位置的源干扰度，每个源干扰度小于`50`。\r\n\n## 输出描述\n左上角`[0,0]`到右下角`[M-1,N-1]`连线的最小总干扰度。\r\n\n## 示例一\n### 输入\n```\r\n3 3\r\n0 0 0\r\n0 2 0\r\n0 0 0\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n其中一条可以使干扰度最小的路径为：`[0,0]->[0,1]->[0,2]->[1,2]->[2,2]`，其干扰度为`2`。\r\n\n## 示例二\n### 输入\n```\r\n5 5\r\n0 0 0 0 0\r\n0 0 2 0 0\r\n0 2 0 2 0\r\n0 0 0 0 0\r\n0 0 0 0 0\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n先从`[0,0]`往下走到最下面`[4,0]`，再往石走到右下角`[4,4]`，途径`[2,0]`时叠加一个干扰度。\r\n\n## 示例三\n### 输入\n```\r\n5 5\r\n0 0 0 0 0\r\n0 0 2 0 0\r\n0 2 0 2 0\r\n0 0 2 0 0\r\n0 0 0 0 0\r\n```\n### 输出\n```\r\n2\r\n```\n**时间限制：** C/C++ `2000MS`，其他语言`4000MS`\r\n\n**内存限制：** C/C++ `256MB`，其他语言`512MB`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 81,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-15 23:08:59",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "8h9bwz",
                "hasChoiceQuestion": false
            }
        ],
        "total": "63",
        "size": "20",
        "current": "2",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "4"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814980234076782593",
                "questionNum": "3431",
                "title": "Shein2023秋招提前批-零钱兑换",
                "content": "## 题目描述\n给定数组`arr`，`arr`中所有的值都为正整数且不重复。每个值代表一种面值的货币，每种面值的货币可以使用任意张，再给定一个`aim`，代表要找的钱数，求组成`aim`的最少货币数。\r\n\n如果无解，请返回`-1`.\r\n\n## 输入描述\n第一行给定两个正整数分别是 `n` 和 `aim` 分别表示数组 `arr` 的长度和要找的钱数。\r\n\n第二行给定 `n` 个正整数表示 `arr` 数组中的所有元素\r\n\n其中，`0 <= n <= 10000`，`0 < arr[i] <= 10000`，`0 <= aim <= 5000`\r\n\n## 输出描述\n输出组成 `aim` 的最少货币数\r\n\n## 示例一\n### 输入\n```\r\n3 20\r\n5 2 3\r\n```\n### 输出\n```\r\n4\r\n```\n### 说明\n最少用四个 `5` 元凑成 `20` 元\r\n\n## 示例二\n### 输入\n```\r\n3 0\r\n5 2 3\r\n```\n### 输出\n```\r\n0\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 49,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-05-09 00:09:28",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "41bcsh",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980234240360449",
                "questionNum": "3432",
                "title": "OPPO2023秋招提前批-小欧的卡牌",
                "content": "## 题目描述\n小欧有`n`张卡牌，第`i`张卡牌的正面写了个数字`ai`，背面写了个数字`bi`。小欧对于每张卡牌可以选择一面向上，她希望最终向上的数字之和为`3`的倍数。你能告诉小欧有多少方案吗？由于答案过大，请对`10^9+7`取模.\r\n\n## 输入描述\n第一行输入一个正整数`n`，代表卡牌数量。\r\n\n接下来的`n`行，每行输入两个正整数`ai`和`bi`，代表第`i`张卡牌的正面和背面的数字.\r\n\n`1 <= n <=10^5`\r\n\n`1<=ai,bi<=10^9`\r\n\n## 输出描述\n一个整数，代表方案数对`10^9+7`取模的值\r\n\n## 示例\n### 输入\n```\r\n3\r\n1 2\r\n2 3\r\n3 2\r\n```\n### 输出\n```\r\n3\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 39,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-18 00:29:02",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "upuywm",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980234961780738",
                "questionNum": "3433",
                "title": "华为2023秋招-中庸行者",
                "content": "## 题目描述\n给定一个`m*n`的整数阵作为地图，短阵数值为地形高度；\r\n\n中庸行者选择地图中的任意一点作为起点，尝试往上、下、左、右四个相邻格子移动;\r\n\n移动时有如下约束：\r\n\n中庸行者只能上坡或者下坡，不能走到高度相同的点。\r\n\n不允许连续上坡或者连续下坡，需要交替进行;\r\n\n每个位置只能经过一次，不能重复行走；\r\n\n请给出中庸行者在本地图内，能连续移动的最大次数。\r\n\n## 输入描述\n第一行两个数字，分别为行数和每行的列数\r\n\n后续数据为矩阵地图内容\r\n\n矩阵边长范围：`[1,8]`\r\n\n地形高度范围：`[0,100000]`\r\n\n## 输出描述\n一个整数，代表中庸行者在本地图内，能连续移动的最大次数。\r\n\n## 示例\n### 输入\n```\r\n2 2\r\n1 2\r\n4 3\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n`3->4->1->2`，一共移动`3`次。\r\n\n**时间限制：** C/C++`500`MS，其他语言`1000`MS\r\n\n**内存限制：** C/C++`256`MB，其他语言`512`MB\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 67,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-21 18:45:03",
                "tagList": [
                    "大厂算法真题",
                    "回溯"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "7l6ycb",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980235137941506",
                "questionNum": "3434",
                "title": "百度2021秋招-子序列中的k种字母",
                "content": "## 题目描述\n在数学中，某个序列的子序列是从最初序列通过去除某些元素但不破坏余下元素的相对位置而形成的新序列，如对于字符串`\"abc\"`，`\"ab\"` 和 `\"ac\"`都是其子序列，而`\"cb\"`和`\"ca\"`不是。\r\n\n牛牛有一个长度为`n`的仅由小写字母组成的字符串`s`，牛牛想知道`s`有多少子序列恰好包含`k`种字母?\r\n\n## 输入描述\n第一行输入两个正整数`n`和`k`。\r\n\n第二行输入一个长度为`n`的仅包含小写字母的字符串`s`。`(1 ≤ n < 10^5, 1 ≤ k ≤ 26)`\r\n\n## 输出描述\n由于答案可能会很大，因此你只需要输出子序列个数对`10^9+7`取模的结果即可。\r\n\n## 示例\n### 输入\n```\r\n6 5\r\neecbad\r\n\r\nk = 4\r\n3 1 1 1 1\r\n\r\n3 1 1 1\r\n3 1 1 1\r\n3 1 1 1\r\n3 1 1 1\r\n1 1 1 1 \r\n13\r\n\r\necbad 2个\r\neecbad 1个\r\n\r\n只包含e的子序列的个数\r\ne\r\ne\r\nee\r\n3 = 2^2-1\r\n\r\neee\r\n\r\ne\r\ne\r\ne\r\nee\r\nee\r\nee\r\neee\r\n7 = 2^3-1\r\n```\n### 输出\n```\r\n3\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 61,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-21 15:57:32",
                "tagList": [
                    "大厂算法真题",
                    "回溯"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "v7wvgg",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980235469291522",
                "questionNum": "3435",
                "title": "米哈游2023秋招-相加异或",
                "content": "## 题目描述\n对于一个数组`c`，定义`f(c)`为`c`数组所有元素的总和。\r\n\n现在给定两个长度为`n`的数组`a, b`，请你恰好删除一个数组`a`的元素或者一个数组`b`的元素，使得`f(a)`异或`f(b)`最大。\r\n\n## 输入描述\n第一行输入一个整数`n`。\r\n\n第二行输入`n`个整数`ai`。\r\n\n第三行输入`n`个整数`bi`。\r\n\n`1 <= n, ai, bi <= 10^5`\r\n\n## 输出描述\n输出最大的异或和\r\n\n## 示例\n### 输入\n```\r\n3\r\n1 2 3\r\n3 2 1\r\n```\n### 输出\n```\r\n5\r\n```\n### 说明\n删除数组`a`中的`3`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 90,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-19 02:04:02",
                "tagList": [
                    "大厂算法真题",
                    "位运算"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "cqpi7e",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980235687395330",
                "questionNum": "3436",
                "title": "百度2023秋招-小红的第16版方案",
                "content": "## 题目描述\n小红正在做一个计划，她先写了份初版方案，但是领导不太满意，让小红改一改。\r\n\n改着改着，小红就改了16 版方案，然后领导说，还是用初版方案吧，现在小红非常的.....\r\n\n小红组内有`n`个人，大家合作完成了一个初版方案，初始时大家的愤怒值都是`0`。\r\n\n但是领导对方案并不满意，共需要修改`m`次方案，每次修改会先让第`l`到`r`个人的愤怒值加 `1`，然后再修改方案。\r\n\n组内每个人都有一个愤怒阈值`a`，一旦第`i`次修改时有人愤怒值大于愤怒阈值，他就会去找领导对线，直接将最终的方案定为第`i-1`方案，并且接下来方案都不需要再修改了。\r\n\n小红想知道，最终会使用第几版方案。\r\n\n初版方案被认为是第`0`版方案。\r\n\n## 输入描述\n第一行输入两个整数`n,m(1<=n,m<=10^5)`表示数组长度和修改次数。\r\n\n第二行输入`n`个整数表示数组`a(0<=a<=10^9)`\r\n\n接下来`m`行，每行输入两个整数`l,r(1<=l<=r<=n)`\r\n\n## 输出描述\n输出一个整数表示答案\r\n\n## 示例\n### 输入\n```\r\n2 3\r\n2 2\r\n1 1\r\n1 2\r\n2 2\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n改三次方案，大家的愤怒度都为`2`，都不超过愤怒阈值，所以使用最后一版方案。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 35,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-05-14 03:12:21",
                "tagList": [
                    "大厂算法真题",
                    "二分查找"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "keblfk",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980235926470657",
                "questionNum": "3437",
                "title": "小米2023秋招-小米手机通信校准",
                "content": "## 题目描述\n小米手机生产过程中会经过严苛的测试环节，其中包括手机通讯功能中的射频校准。射频校准会打点数据上报到云端。其中包含两组数据:第一组数据中会包含此次校准的频道号`(freq)`信息；第二组会上传一批数据，包含一组频道号`(freg)`和其对应的损失值`(loss)`，其中这一组频道号`(freg)`不会重复，且是有序的。\r\n\n现在需要根据第一组数据中的频道号`(freg)`，找到离第二组中频道号`(freq)`最近的那个`freq`对应的`loss`值，如果两边一样近，则取两边`loss`的平均。\r\n\n注：输入为`int`，输出为`double`类型四舍五入保留`1`位小数\r\n\n## 输入描述\n包含两组数据:\r\n\n第一组数据中会包含此次校准的频道号`(freq)`信息。\r\n\n第二组会上传一批数据，包含一组频道号`(freg)`和其对应的损失值`(loss)`，其中这一组频道号`(freg)`不会重复，且是有序的。\r\n\n## 输出描述\n离频道号`(freq)`最近的`freq`对应的`loss`值，如果两边一样近，则取两边`loss`的平均。\r\n\n## 示例\n### 输入\n```\r\n2800\r\n1950:10 2000:15 3000:9\r\n```\n### 输出\n```\r\n9.0\r\n```\n**时间限制：** 1000MS\r\n\n**内存限制：** 65536KB\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 89,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-24 14:24:16",
                "tagList": [
                    "大厂算法真题",
                    "二分查找"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "nrsqc3",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980236220071938",
                "questionNum": "3438",
                "title": "小红书2023秋招提前批-精华帖子",
                "content": "## 题目描述\n小红书的推荐帖子列表为`[0,n)`，其中所有的帖子初始状态为“普通”，现在运营同学把其中的一些帖子区间标记为了“精华”。\r\n\n运营同学选择了固定长度`k`，对整个帖子列表截取，要求计算在固定的截取长度`k`下，能够截取获得的最多精华帖子数量。\r\n\n## 输入描述\n第一行输入三个正整数`n`，`m`，`k`，分别代表初始帖子列表长度，精华区间的数量，以及运营同学准备截取的长度。\r\n\n接下来的`m`行，每行输入两个正整数`li`，`ri`，代表第`i`个**左闭右开区间**。\r\n\n`1 ≤ k ≤ n ≤ 1000000000`\r\n\n`1 ≤ m ≤ 100000`\r\n\n`0 ≤ li < ri ≤ n`\r\n\n**保证任意两个区间是不重叠的。**\r\n\n## 输出描述\n一个正整数，代表截取获得的最多的精华帖子数量。\r\n\n## 示例\n### 输入\n```\r\n5 2 3\r\n1 2\r\n3 5\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n这是一个长度为`5`的帖子列表，如果用`0`表示普通帖子，`1`表示精华帖子，则该列表为`[0, 1, 0, 1, 1]`。用长度`k = 3`的区间截取列表，最多能够包含`2`个精华帖子。\r\n\n**时间限制：**`3s`\r\n\n**内存限制：**`512MB`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 58,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-09 20:38:44",
                "tagList": [
                    "大厂算法真题",
                    "二分查找"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "oqveuv",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980236408815617",
                "questionNum": "3439",
                "title": "得物2023秋招-最高的楼",
                "content": "## 题目描述\n市容市貌建设是一个很重要的课题，在某市的规划中有这样一条要求，位于一条街道上的相邻位置的楼的高度差不能超过`1`m。每栋楼的高度都是整数。\r\n\n某同学第一次来到这个城市，他听人提起在一条街上，有`n`栋连续的建筑，这些建筑的总高度是`m`米。他想知道在这条街道上，第`x`栋建筑可能的最高高度是多少，不存在高度为`0`的建筑。也就是说这`n`栋建筑至少高`1`m。\r\n\n## 输入描述\n输入仅有一行，包含三个整数`n, m, x`。\r\n\n`1 <= n <= m <= 10^9，1 <= x <= n`\r\n\n## 输出描述\n输出仅包含一个正整数，请你输出第`x`栋建筑可能的最高高度是多少。\r\n\n## 示例\n### 输入\n```\r\n5 6 1\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n`5`个建筑物，总高`6`米，可以按如下分配`2 1 1 1 1`，此时最高高度为`2`\r\n\n**时间限制：** `3000`MS\r\n\n**内存限制：** `589824`KB\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 74,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-25 13:59:54",
                "tagList": [
                    "大厂算法真题",
                    "二分查找"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "v1veuf",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980236564004865",
                "questionNum": "3440",
                "title": "小米2023秋招-手机流畅运行的秘密",
                "content": "## 题目描述\n8月份发布会一结束，米小兔就在公司领到了一台最新发布的Xiaomi MIX Fold 3手机，这是一款小米旗舰折叠屏手机，并搭载了全新升级架构的MIU114系统。其先进的应用引擎不仅让系统更流畅，应用体验也大幅提升。\r\n\n在一个优化项中，为了尽可能提升用户白天使用手机的体验和续航，某些已经在系统中注册过的任务会被设置为空闲任务，仅在手机空闲时运行 (比如数据备份或AI相册整理)。现在系统中注册了若干组空闲任务，每个任务**有各自的耗电量**以及**允许任务运行的最低初始电量**，我们需要计算**手机能够串行完成全部任务的最低初始电量**。\r\n\n注意点1: 所有电量以`mAh`(毫安时)计，Xiaomi MIX Fold 3的大电池容量是`4800mAh`。\r\n\n注意点2:本题目假设手机在运行空闲任务期间，不处于充电状态，也没有额外耗电行为。\r\n\n注意点3:智能应用引擎会以最合适的顺序串行运行任务。\r\n\n## 输入描述\n一个描述了所有任务的长字符串。任务与任务之间用逗号隔开，每组任务由耗电量及最低初始电量组成，用冒号隔开。\r\n\n## 输出描述\n一个数字，代表依次完成全部任务的最低初始电量，如果最低初始电量超过手机电池容量，则返回`-1`。\r\n\n## 示例\n### 输入\n```\r\n1:10,2:12,3:10\r\n```\n### 输出\n```\r\n13\r\n```\n### 说明\n在样例中，手机至少需要有`13mAh`的初始电量，在运行任务`2`后剩余电量`11mAh`、运行任务`1`后剩余电量`10mAh`、运行任务3后剩余`7mAh`。\r\n\n**时间限制：** `1000`MS\r\n\n**内存限制：** `65536`KB\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 97,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-19 20:34:34",
                "tagList": [
                    "大厂算法真题",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "4o8xg1",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980236740165634",
                "questionNum": "3441",
                "title": "百度2023秋招-讨厌鬼的组合帖子",
                "content": "## 题目描述\n讨厌鬼有`n`个帖子。第`i`个帖子的点赞数为`ai`，点踩数为`bi`。你可以选择任意个帖子组合起来。\r\n\n组合帖子的点赞数和点踩数为所有被组合帖子点赞数和点踩数之和。已知一个帖子的点赞数为`x`，点踩数为`y`，则该帖子的吸引度为`|x-y|`。讨厌鬼需要选择若干个帖子组合起来，使得这个组合帖子的吸引度尽可能大。请你告诉他这个吸引度最大是多少?\r\n\n## 输入描述\n第一行输入一个整数`n (1 <= n <= 10^5)`\r\n\n第二行输入`n`个整数`ai (1 <= ai <= 10^9)`\r\n\n第三行输入`n`个整数`bi (1 <= bi <= 10^9)`\r\n\n## 输出描述\n一行一个整数，表示最大吸引度。\r\n\n## 示例\n### 输入\n```\r\n4\r\n4 2 1 1\r\n2 1 4 4\r\n```\n### 输出\n```\r\n6\r\n```\n### 说明\n选择第 `3` 个和第 `4` 个帖子组合后，点赞数为 `2`，点踩数为 `8`，吸引度为`|2-8|= 6`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 58,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-15 15:45:42",
                "tagList": [
                    "大厂算法真题",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "4yy3fw",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980236920520705",
                "questionNum": "3442",
                "title": "美团2023秋招-小美的数组重排",
                "content": "## 题目描述\n小美有两个长度为`n`的数组`a`和`b`。\r\n\n小美想知道，能不能通过重排`a`数组使得对于任意`1 <= i <= n, 1 <= ai+bi <= m`？\r\n\n将会有`q`次询问。\r\n\n## 输入描述\n第一行一个整数`q (1 <= q <= 30)`。表示询问次数。\r\n\n对于每一个询问：\r\n\n第一行输入两个整数`n, m (1 <= n, m <= 500)`\r\n\n第二行输入n个整数`ai (-500 <= ai <= 500)`\r\n\n第三行输入n个整数`bi (-500 <= bi <= 500)`\r\n\n## 输出描述\n`q`行，每行输出一个字符串，如果能通过重排满足条件则输出`\"Yes\"`(不含引号)，否则输出`\"No\"`。\r\n\n## 示例\n### 输入\n```\r\n2\r\n5 3\r\n-1 -2 3 4 5\r\n-1 3 4 2 5\r\n5 6\r\n-1 -2 3 4 5\r\n-1 3 4 2 5\r\n```\n### 输出\n```\r\nNo\r\nYes\r\n```\n## 说明\n对于第一个用例，无论怎么重排都不满足条件。\r\n\n对于第二个用例，将数组`a`重排为`[5,3,-2,4,-1]`时满足条件。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 85,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-20 00:33:15",
                "tagList": [
                    "大厂算法真题",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "53896q",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980237117652993",
                "questionNum": "3443",
                "title": "大疆2023秋招-矩形田地",
                "content": "## 题目描述\n给定一个矩形田地，其高度为 `h` 且宽度为 `w`。同时，你将获得两个整数数组 `horizontalCutting` 和 `verticalCutting`，其中 `horizontalCutting[i]` 表示从矩形田地顶部到第 `i` 个水平切口的距离，`verticalCutting[j]` 表示从矩形田地的左侧到第 `j` 个竖直切口的距离。你的任务是根据提供的 `horizontalCutting` 和 `verticalCutting` 数组，进行水平和竖直位置的切割，并找出面积最大的那份田地，并返回其面积。\r\n\n## 输入描述\n第一行 `h`：田地的水平最大高度\r\n\n第二行 `w`: 田地的垂直最大宽度\r\n\n第三行`horizontalCutting`：数组的长度\r\n\n第四行`horizontalCutting`：切割水平线的位置\r\n\n第五行`verticalCutting`：数组的长度\r\n\n第六行`verticalCutting`：切割垂直线的位置\r\n\n## 输出描述\n输出一个整数，代表切割后面积最大的田地大小。\r\n\n## 示例\n### 输入\n```\r\n5\r\n4\r\n3\r\n1 2 4\r\n2\r\n1 3\r\n```\n### 输出\n```\r\n4\r\n```\n## 说明\n输入所表示的矩形田地如下图所示，最大面积为`4`\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/3UlD2YvO_1721204857689_mianshiya.png)\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 67,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-19 18:46:32",
                "tagList": [
                    "大厂算法真题",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "jl0th9",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980237310590978",
                "questionNum": "3444",
                "title": "Shein2023秋招提前批-删点成林",
                "content": "## 题目描述\n一个人拿了一棵树，准备去掉这树上的一个节点（同时把该节点的边都删除)，于是形成了一个森林。要求输出该森林的连通块数量，以及每个连通块的大小（按大小的升序输出）\r\n\n## 输入描述\n第一行输入一个正整数`n`，代表节点的数量。\r\n\n接下来的`n-1`行，每行输入两个正整数`u`和`v`，表示节点`u`和节点`v`有一条边链接。\r\n\n最后一行输出一个正整数`x`，代表删掉的节点编号。\r\n\n## 输出描述\n第一行输出一个正整数`k`，代表连通块的数量。\r\n\n第二行升序输出`k`个正整数`a_i`，代表每个连通块的大小。\r\n\n## 示例一\n### 输入\n```\r\n5\r\n1 2\r\n2 3\r\n1 4\r\n1 5\r\n1\r\n```\n### 输出\n```\r\n3 \r\n1 1 2\r\n```\n### 说明\n未删除节点前的树如下图所示。\r\n\n![72111578450](https://pic.code-nav.cn/mianshiya/question_picture/markdown/1nRgCINm_1721115784506_mianshiya.png)\r\n\n删除节点后的森林如下图所示，共包含`3`棵树，大小为`1 1 2`\r\n\n![72111580355](https://pic.code-nav.cn/mianshiya/question_picture/markdown/48JSCnHW_1721115803555_mianshiya.png)\r\n\n## 示例二\n### 输入\n```\r\n7\r\n1 2\r\n3 5\r\n6 8\r\n2 6\r\n4 5\r\n1 5\r\n5\r\n```\n### 输出\n```\r\n3 \r\n1 1 4\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 72,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:24",
                "updateTime": "2025-05-30 18:59:35",
                "tagList": [
                    "大厂算法真题",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "eva0kj",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980238736654338",
                "questionNum": "3445",
                "title": "广联达2023秋招-迷宫",
                "content": "## 题目描述\n小明在梦中困在一个迷宫里了。迷宫太难了，小明发动特殊能力让迷宫变得简单起来。迷宫变成了一张有`n`个节点的有根树（根为`1`号节点）的结构，只能在一个节点往其儿子节点走，而当没有导向其他节点的路径存在时，即该节点没有儿子节点时，便走出了迷宫。这样一来，小明只要沿着任意可以走的路径行进就肯定可以到达出口了！出发前为了做好周密准备，小明想知道处于这个迷宫的各个位置能到哪些出口。\r\n\n## 输入描述\n第一行`3`个整数分别为`n`,`m`和`q`表示迷宫节点数量，迷宫路径数量和询问数量。\r\n\n第二行`m`个整数`u1, u2, ..., um`\r\n\n第三行`m`个整数`v1, v2, ..., vm`\r\n\n其中`ui, vi`代表第`i`条有向路径为从节点`ui`通往节点`vi`，即节点`ui`有一个儿子节点`vi`。保证形成一棵以1号节点为根的有根树。\r\n\n第四行`q`个整数`a1, a2, ..., aq`。表示第`i`次询问为：若处于`ai`节点，可能到达多少个不同的出口？注意，若一个节点没有导向其他节点的路径存在时，即没有儿子节点时，这个节点则为一个出口。\r\n\n`1<=n,m,q<=50000, 1<=ui, vi<=n, ui != vi`\r\n\n## 输出描述\n输出一行`q`个整数，分别表示每次询问的答案。\r\n\n## 样例输入\n### 输入\n```\r\n3 2 3\r\n1 1\r\n2 3\r\n1 2 3\r\n```\n### 输出\n```\r\n2 1 1\r\n```\n### 提示\n节点`1`可以走向节点`2`和节点`3`，并不是出口。节点`2`和节点`3`都没有导向其他节点的路径了，均为出口。若处于节点`1`，可以走向节点`2`或节点`3`，有`2`种可能的出口。若处于节点`2`，只有节点`2`本身一个出口；节点`3`同理\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 66,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:24",
                "updateTime": "2025-06-17 14:52:21",
                "tagList": [
                    "大厂算法真题",
                    "DFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "mj0yjv",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980238954758146",
                "questionNum": "3446",
                "title": "顺丰2023秋招-攀比",
                "content": "## 题目描述\n小明在数学课上与同学无缘无故起了攀比心！老师们在教大家计数，每个同学有一排`n`个木棍，每个木棍上初始插着一些算珠，木棍从左到右依次编号为` 1,2,3,...,n`，其上的算珠数量也分别为` a1, a2, ..., an`。小明认为，将这些算珠数是可以看作一个非负整数数组`[a1, a2, a3, ..., an]`, 其字典序越小就越厉害。\r\n\n小明可以将他的一些管珠那一下位置，即从一根木棍上取一颗算珠下来然后放到另一根木棍上（一次操作只能移动一颗算珠) 。小明想比其他人都厉害，但是他也不想太过分，他想知道如果他能进行最多 `k` 次移动操作，能得到的最小字典序的数组是怎样的。\r\n\n注意，你不能从算珠数为`0` 的木棍上再取走一个算珠使得数显变成`-1`。每个木棍上可以插无限多个算珠。\r\n\n数组`x`的字典序小于数组`y`当且仅当存在一个下标`i`，使得`xi<yi`，且对于`1 <= j < i`存在`xj = yj`。例如: \r\n\n`[1,2,3] < [2,2,3],[1,2,3] < [1,2,4]`\r\n\n## 输入描述\n第一行`2`个整数`n`和`k`，表示木棍数量和小明能最多进行的移动操作次数\r\n\n第二行`n`个整数`a1, a2, ..., an`，表示初始时木棍上的算珠数量。\r\n\n`1<n,k<50000 1<= ai <=1000`\r\n\n### 输出描述\n输出一行n个整数表示移动最多`k`次后最小字典序数组。\r\n\n## 示例\n### 输入\n```\r\n4 2\r\n1 2 2 4\r\n```\n### 输出\n```\r\n0 1 2 6\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 89,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:24",
                "updateTime": "2025-06-18 00:30:06",
                "tagList": [
                    "大厂算法真题",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "hgnsjr",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980239122530306",
                "questionNum": "3447",
                "title": "阿里达摩院0902-小红的回文博弈",
                "content": "### 题目描述\n小红和朋友玩游戏，初始有一个字符串s，两个人轮流操作:\r\n\n1、先将字符串重新排列；\r\n\n2、如果可以通过重新排列得到一个回文串，则游戏结束，当前操作的人获胜；\r\n\n3、否则，当前操作的人必须删除字符串中的一个字符；\r\n\n小红先手，两人都采用最优策略，问最后谁能获胜。\r\n\n### 输入描述\n第一行一个整数`t`，表示数据组数；\r\n\n接下来`t`行，每行一个字符串`s`，仅包含小写子母，长度不超过`100000`。(`1<t< 20`)\r\n\n### 输出描述\n输出t行，每行一个字符串，小红获胜输出“red”，朋友获胜输出“friend”。\r\n\n### 样例输入\n```\r\n3\r\naab\r\nabc\r\nabcd\r\n```\n### 样例输出\n```\r\nred\r\nred\r\nfriend\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 154,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:24",
                "updateTime": "2025-06-23 10:37:49",
                "tagList": [
                    "大厂算法真题",
                    "思维",
                    "博弈论"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ggkqy0",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980239332245505",
                "questionNum": "3448",
                "title": "顺丰2023秋招-巧克力",
                "content": "## 题目描述\n小丽明天要出去和同学春游。她准备带上总面积恰好为`n`的巧克力板(简化起见将巧克力板视为平面图形，忽略它的厚度,只考虑面积)去和同学们一起分享。\r\n\n出于美感的考虑,小丽希望她带上的巧克力板都是边长为整数的正方形;另一方面出于便携性考虑，小丽希望这些巧克力板的周长之和尽可能小,请你帮小丽找出可能的最小周长！\r\n\n换句话说,小丽需要你帮忙找出`k`个小正方形巧克力板，边长分别为`a1, a2, ..., ak`,使得其面积之和,即\r\n\n![72120452234](https://pic.code-nav.cn/mianshiya/question_picture/markdown/one0ZP09_1721204522342.png)\r\n\n恰好为要求的总面积为`n`；同时，使得总周长,即![72120455429](https://pic.code-nav.cn/mianshiya/question_picture/markdown/vXC1PjUh_1721204554298.png)最小\r\n\n## 输入描述\n一行，1个整数`n`，表示小丽希望带上的巧克力板总面积\r\n\n`1 <= n <= 50000`\r\n\n## 输出描述\n输出一行一个整数表示可能的最小周长。\r\n\n## 示例\n### 输入\n```\r\n11\r\n```\n### 输出\n```\r\n20\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 107,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:24",
                "updateTime": "2025-06-17 14:52:08",
                "tagList": [
                    "大厂算法真题",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "tpd8af",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980239592292353",
                "questionNum": "3449",
                "title": "美团2023秋招-平均数为k的最长连续子数组",
                "content": "## 题目描述\n给定`n`个正整数组成的数组，求平均数正好等于`k`的**最长连续子数组**的长度。\r\n\n## 输入描述\n第一行输入两个正整数`n`和`k`，用空格隔开。\r\n\n第二行输入`n`个正整数`ai`，用来表示数组。\r\n\n`1 <= n <= 200000`\r\n\n`1 < = k, ai <= 10^9`\r\n\n## 输出描述\n如果不存在任何一个连续子数组的平均数等于`k`，则输出`-1`。\r\n\n否则输出平均数正好等于`k`的最长连续子数组的长度。\r\n\n## 示例\n### 输入\n```\r\n5 2\r\n1 3 2 4 1\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n取前三个数即可，平均数为`2`。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 174,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:24",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:24",
                "updateTime": "2025-06-20 14:39:06",
                "tagList": [
                    "大厂算法真题",
                    "前缀和"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ki3d0n",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980239781036034",
                "questionNum": "3450",
                "title": "米哈游2023秋招-米小游的极差之和",
                "content": "## 题目描述\n米小游拿到了一个数组`a`，她用这个数组构造一个新数组`b`，其中`ai`代表`b`数组中有`ai`个`i`。\r\n\n例如，若`a = [2,3,1]`，那么`b = [1,1,2,2,2,3]`，因为`a1=2`，代表`b` 数组中有`2`个`1`；`a2=3`，代表`b`数组中有`3`个`2`；`a3 = 1`，代表`b`数组中有`1`个`3`。\r\n\n现在给定`a`数组，你需要帮米小游求出`b`数组中所有连续子数组的极差之和。由于答案可能过大，请对`10^9+7` 取模。\r\n\n数组的极差指最大值减去最小值。\r\n\n## 输入描述\n第一行输入一个正整数`n`，代表`a`数组的元素数量。\r\n\n第二行输入`n` 个正整数`ai`，代表`a`数组的元素。\r\n\n`1 ≤ n ≤ 10^5`\r\n\n`1 ≤ ai ≤ 10^9`\r\n\n## 输出描述\n一个整数，代表数组中所有区间的极差之和，对`10^9+7`取模的值。\r\n\n## 示例\n### 输入\n```\r\n2\r\n2 1\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 162,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:25",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:24",
                "updateTime": "2025-06-21 13:11:11",
                "tagList": [
                    "大厂算法真题",
                    "前缀和"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "pyehb6",
                "hasChoiceQuestion": false
            }
        ],
        "total": "63",
        "size": "20",
        "current": "3",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "4"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814980240015917058",
                "questionNum": "3451",
                "title": "美团2023秋招-小美的蛋糕切割",
                "content": "## 题目描述\n小美有一个矩形的蛋糕，共分成了`n`行`m`列，共`n`*`m`个区域，每个区域是一个小正方形，已知蛋糕每个区域都有一个美味度。她想切一刀把蛋糕切成两部分，自己吃一部分，小团吃另一部分。\r\n\n小美希望两个人吃的部分的美味度之和尽可能接近，请你输出`|s1-s2|`的最小值。（其中`s1`代表小美吃的美味度，`s2`代表小团吃的美味度）。\r\n\n请务必保证，切下来的区域都是完整的，即不能把某个小正方形切成两个小区域。\r\n\n## 输入描述\n第一行输出两个正整数`n`和`m`，代表蛋糕区域的行数和列数。\r\n\n接下来的`n`行，每行输入`m`个正整数`aij`，用来表示每个区域的美味度。\r\n\n`1 ≤ n, m ≤ 10^3`\r\n\n`1 ≤ aij ≤ 10^4`\r\n\n## 输出描述\n一个整数，代表`|s1-s2|`的最小值。\r\n\n## 示例\n### 输入\n```\r\n2 3\r\n1 1 4\r\n5 1 4\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n把蛋糕像这样切开：\r\n\n`1 1 | 4`\r\n\n`5 1 | 4`\r\n\n左边蛋糕美味度之和是`8`\r\n\n右边蛋糕美味度之和是`8`\r\n\n所以答案是`0`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 102,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:25",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:24",
                "updateTime": "2025-06-19 14:24:44",
                "tagList": [
                    "大厂算法真题",
                    "前缀和"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ujk58t",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980240213049345",
                "questionNum": "3452",
                "title": "美团2023秋招-小美的游戏",
                "content": "## 题目描述\n小美有一个长度为`n`的数组，她最多可以进行`k`次操作，每次操作如下：\r\n\n1. 选择两个整数`i, j`，`1 <= i < j <= n`\r\n2. 选择两个整数`x, y`，使得`x*y = ai*aj`\r\n3. 将`ai`替换为`x`，将`aj`替换为`y`\r\n\n她希望最多进行`k`次操作之后，最后数组中的元素的总和尽可能大。\r\n\n## 输入描述\n一行两个整数`n, k`，表示数组的长度和操作的次数。\r\n\n一行`n`个整数 `a1,a2,...,an`，表示数组的元素。\r\n\n`1 <= k < n <= 10^5`\r\n\n`1 <= ai <= 10^5`\r\n\n## 输出描述\n输出一个整数，表示最后数组中的元素的总和的最大值，由于答案可能很大，你只需要输出答案对`10^9+7`取模的结果。\r\n\n## 示例\n### 输入\n```\r\n5 2\r\n1 2 3 4 5\r\n```\n### 输出\n```\r\n65\r\n```\n### 说明\n第一次操作后，数组变为 `[1, 2, 12, 1, 5]`\r\n\n第二次操作，数组变为 `[1, 2, 60, 1, 1]`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 138,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:25",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:24",
                "updateTime": "2025-06-25 17:10:27",
                "tagList": [
                    "大厂算法真题",
                    "优先队列"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "pd8gl4",
                "hasChoiceQuestion": false
            },
            {
                "id": "1833391642163257346",
                "questionNum": "6303",
                "title": "给两个仅由数字构成的字符串，不使用Integer的parseInt方法，返回它们相加的结果，用字符串表示",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 1036,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "needVip": 0,
                "userId": "1783388929455529986",
                "createTime": "2024-09-10 14:26:44",
                "updateTime": "2025-06-25 23:00:08",
                "tagList": [
                    "大厂算法真题"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "wezcqq",
                "hasChoiceQuestion": false
            }
        ],
        "total": "63",
        "size": "20",
        "current": "4",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "4"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [],
        "total": "63",
        "size": "20",
        "current": "5",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "4"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [],
        "total": "63",
        "size": "20",
        "current": "6",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "4"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [],
        "total": "63",
        "size": "20",
        "current": "7",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "4"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [],
        "total": "63",
        "size": "20",
        "current": "8",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "4"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [],
        "total": "63",
        "size": "20",
        "current": "9",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "4"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [],
        "total": "63",
        "size": "20",
        "current": "10",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "4"
    },
    "message": "ok"
}
