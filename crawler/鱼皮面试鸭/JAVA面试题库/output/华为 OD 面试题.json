{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814977093310631937",
                "questionNum": "3180",
                "title": "2024D-贪吃的猴子",
                "content": "## 题目描述\n一只贪吃的猴子，来到一个果园，发现许多串香蕉排成一行，每串香蕉上有若干根香蕉。每串香蕉的根数由数组`numbers`给出。猴子获取香蕉每次都只能从行的开头或者末尾获取，并且只能获取`N`次，求猴子最多能获取多少根香蕉。\r\n\n## 输入描述\n第一行为数组`numbers`的长度\r\n\n第二行为数组`numbers`的值，每个数字通过空格分开\r\n\n第三行输入为`N`，表示获取的次数\r\n\n`1 <= numbers.length <= 100000`\r\n\n`1<= numbers[i] <= 100`\r\n\n`1 <= N <= numbers.length`\r\n\n## 输出描述\n按照题目要求能获取的最大数值\r\n\n## 示例一\n### 输入\n```\r\n7\r\n1 2 2 7 3 6 1\r\n3\r\n```\n### 输出\n```\r\n10\r\n```\n### 说明\n第一次获取香蕉，无论是从行的开头或者末尾获取，得到的香蕉根数目为`1`。但是，从行未尾获取能获取到最优的策略，后面可以直接得到香蕉根数目`6`和`3`。因此最终根数为`1+6+3=10`\r\n\n## 示例二\n### 输入\n```\r\n7\r\n2 2 2 7 3 6 1\r\n3\r\n```\n### 输出\n```\r\n10\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 8484,
                "thumbNum": 0,
                "favourNum": 8,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:54",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:54",
                "updateTime": "2025-06-26 00:04:23",
                "tagList": [
                    "华为OD",
                    "固定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "a851m7",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977094984159233",
                "questionNum": "3181",
                "title": "2023A-找出通过车辆最多颜色",
                "content": "## 题目\n在一个狭小的路口，每秒只能通过一辆车，假如车辆的颜色只有 `3` 种，找出 `N` 秒内经过的最多颜色的车辆数量，三种颜色编号为 `0, 1, 2`。\r\n\n## 输入\n第一行输入的是通过的车辆颜色信息。比如`[0, 1, 1, 2]` 代表 `4` 秒钟通过的车辆颜色分别是 `0, 1, 1, 2`第二行输入的是统计时间窗，整型，单位为秒。\r\n\n## 输出\n输出指定时间窗内经过的最多颜色的车辆数量\r\n\n## 示例一\n### 输入\n```\r\n0 1 2 1\r\n3\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n在`[1,2,1]`这个 `3` 秒时间窗内，`1` 这个颜色出现 `2` 次，数量最多\r\n\n## 示例二\n### 输入\n```\r\n0 1 2 1\r\n2\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n在 `2` 秒时间窗内，每个颜色最多出现 `1` 次\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 1903,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:54",
                "updateTime": "2025-06-26 00:11:50",
                "tagList": [
                    "华为OD",
                    "固定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "s92apy",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977095151931393",
                "questionNum": "3182",
                "title": "2023B-阿里巴巴找黄金宝箱(5)",
                "content": "## 题目描述\n一贫如洗的樵夫阿里巴巴在去砍柴的路上，无意中发现了强盗集团的藏宝地，藏宝地有编号从 `0-N` 的箱子，每个箱子上面贴有一个数字。阿里巴巴念出一个咒语数字 `k`(`k < N`)，找出连续 `k` 个宝箱数字和的最大值，并输出该最大值。\r\n\n## 输入\n第一行输入一个数字字串，数字之间使用逗号分隔，例如: `2,10,-3,-8,40,5`。\r\n\n`1 ≤ 字串中数字的个数 ≤ 100000``-10000 ≤ 每个数字 ≤ 10000`第二行输入咒语数字`k`，例如: `4`，咒语数字大小小于宝箱的个数\r\n\n## 输出\n连续 `k` 个宝箱数字和的最大值，例如: `39`\r\n\n## 示例一\n### 输入\n```\r\n2,10,-3,-8,40,5\r\n4\r\n```\n### 输出\n```\r\n39\r\n```\n## 示例二\n### 输入\n```\r\n8\r\n1\r\n```\n### 输出\n```\r\n8\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 1114,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:54",
                "updateTime": "2025-06-25 09:39:55",
                "tagList": [
                    "华为OD",
                    "固定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "k51s8k",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977095332286466",
                "questionNum": "3183",
                "title": "2024D-字符串摘要",
                "content": "## 题目描述\n给定一个字符串的摘要算法，请输出给定字符串的摘要值\r\n\n1. 去除字符串中非字母的符号\r\n2. 对于去除非字母符号后的字符串：\r\n   - 如果出现连续字符（不区分大小写），则输出: 该字母（小写) + 连续出现的次数\r\n   - 如果是非连续的字符（不区分大小写），则输出: 该字母（小写）之后字符串中出现的该字符的次数\r\n3. 对按照以上方式表示后的字符串进行排序：字母和紧随的数字作为一组进行排序，数字大的在前，数字相同的则按字母进行排序，字母小的在前。\r\n\n## 输入描述\n一行字符串，长度为`[1,200]`\r\n\n## 输出描述\n转换后的摘要字符串\r\n\n## 示例一\n### 输入\n```\r\naabbcc\r\n```\n### 输出\n```\r\na2b2c2\r\n```\n### 说明\n## 示例二\n### 输入\n```\r\nbAaAcBb\r\n```\n### 输出\n```\r\na3b2b2c0\r\n```\n### 说明\n第一个`b`非连续字母，该字母之后字符串中还出现了`2`次 (最后的两个`Bb`) ，所以输出`b2`；\r\n\n`a`连续出现`3`次，输出`a3`；\r\n\n`c`非连续，该字母之后字符串再没有出现过`c`，输出`c0`；\r\n\n`Bb`连续`2`次，输出`b2`。\r\n\n对`b2a3c0b2`进行排序，最终输出`a3b2b2c0`。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 936,
                "thumbNum": 0,
                "favourNum": 8,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:54",
                "updateTime": "2025-06-25 12:45:36",
                "tagList": [
                    "华为OD",
                    "不定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "tth3s2",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977095521030145",
                "questionNum": "3184",
                "title": "2023B-最长和为目标值的子序列",
                "content": "## 题目描述\n有`n`个正整数组成的序列，给定整数 `sum`，求长度最长的连续子序列，使得它们的和等于 `sum`，返回此子序列的长度，如果没有满足条件的序列，返回`-1`。\r\n\n## 输入描述\n第一行为子序列\r\n\n第二行为给定`sum`\r\n\n## 输出描述\n返回此子序列的长度，如果没有满足条件的序列，返回`-1`\r\n\n## 示例一\n### 输入\n```\r\n1,2,3,4,2\r\n6\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n和为`6`的有`1 2 3`和`2 4`，但是`1 2 3`的长度比`2 4`的长度长，所以答案为`3`\r\n\n## 示例二\n### 输入\n```\r\n1,2,3,4,2\r\n20\r\n```\n### 输出\n```\r\n-1\r\n```\n### 说明\n没有满足要求的子数组。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 568,
                "thumbNum": 0,
                "favourNum": 5,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:54",
                "updateTime": "2025-06-24 17:28:42",
                "tagList": [
                    "华为OD",
                    "不定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ll4iv3",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977095705579522",
                "questionNum": "3185",
                "title": "2023A-区块链文件转储系统",
                "content": "## 题目描述\n区块链底层存储是一个链式文件系统，由顺序的 `N` 个文件组成，每个文件的大小不一，依次为`F1, F2, …, Fn` 。随着时间的推移，所占存储会越来越大。云平台考虑将区块链按文件转储到廉价的 SATA 盘，只有连续的区块链文件才能转储到 SATA 盘上，且转储的文件之和不能超过 SATA 盘的容量。假设每块 SATA 盘容量为 `M`，求能转储的最大连续文件大小之和。\r\n\n## 输入描述\n第一行为 SATA 盘容量 `M`，`1000 ≤ M ≤ 1000000`第二行为区块链文件大小序列 `F1, F2, …, Fn`。其中 `1 ≤ n ≤ 100000`，`1 ≤ Fi ≤ 500`\r\n\n## 输出描述\n求能转储的最大连续文件大小之和。\r\n\n## 示例一\n### 输入\n```\r\n1000\r\n100 300 500 400 400 150 100\r\n```\n### 输出\n```\r\n950\r\n```\n### 说明\n最大序列和为`950`，序列为`[400, 400, 150]`\r\n\n## 示例二\n### 输入\n```\r\n1000\r\n100 500 400 150 500 100\r\n```\n### 输出\n```\r\n1000\r\n```\n### 说明\n最大序列和为 `1000`，序列为 `[100, 500, 400]`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 585,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-24 17:10:49",
                "tagList": [
                    "华为OD",
                    "不定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "0nd60b",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977095915294722",
                "questionNum": "3186",
                "title": "2023B-寻找符合要求的最长子串",
                "content": "## 题目描述\n给定一个字符串 `s` ，找出这样一个子串：\r\n\n1. 该子串中的任意一个字符最多出现 `2` 次；\r\n2. 该子串不包含指定某个字符；\r\n\n请你找出满足该条件的最长子串的长度。\r\n\n## 输入\n第一行为要求不包含的指定字符，为单个字符，取值范围 `[0-9a-zA-Z]`第二行为字符串 s，每个字符范围 `[0-9a-zA-Z]`，长度范围 `[1,10000]`\r\n\n## 输出\n一个整数，满足条件的最长子串的长度；如果不存在满足条件的子串，则返回 `0`\r\n\n## 示例一\n### 输入\n```\r\nD\r\nABC123\r\n```\n### 输出\n```\r\n6\r\n```\n### 输入\n```\r\nD\r\nABACD1231\r\n```\n### 输出\n```\r\n4\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 529,
                "thumbNum": 0,
                "favourNum": 3,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-25 06:45:21",
                "tagList": [
                    "华为OD",
                    "不定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "6sow0t",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977096087261186",
                "questionNum": "3187",
                "title": "2024D-最大可购买的宝石数量",
                "content": "## **题目描述**\n橱窗里有一排宝石，不同的宝石对应不同的价格，宝石的价格标记为`gems[i],0<=i<n`，`n = gems.length`。宝石可同时出售`0`个或多个，如果同时出售多个，则要求出售的宝石编号连续；\r\n\n例如客户最大购买宝石个数为`m`，购买的宝石编号必须为`gems[i],gems[i+1]...gems[i+m-1](0<=i<n,m<=n)`。假设你当前拥有总面值为`value`的钱，请问最多能购买到多少个宝石。如无法购买宝石，则返回`0`。\r\n\n## **输入描述**\n第一行输入`n`，参数类型为 `int`，取值范围：`[0,10^6]`，表示橱窗中宝石的总数量。\r\n\n之后`n`行分别表示从第`0`个到第`n-1`个宝石的价格，即`gems[0]`到`gems[n-1]`的价格，类型为`int`，取值范围：`(0,1000]`。\r\n\n之后一行输入`v`，类型为`int`，取值范围：`[0,10^9]`表示你拥有的钱。\r\n\n## **输出描述**\n输出`int`类型的返回值，表示最大可购买的宝石数量。\r\n\n## **示例一**\n### **输入**\n```\r\n7\r\n8\r\n4\r\n6\r\n3\r\n1\r\n6\r\n7\r\n10\r\n```\n### **输出**\n```\r\n3\r\n```\n### **说明**\n`gems = [8,4,6,3,1,6,7], value = 10`最多购买的宝石为`gems[2]`至`gems[4]`或者`gems[3]`至`gems[5]`\r\n\n## **示例二**\n### **输入**\n```\r\n0\r\n1\r\n```\n### **输出**\n```\r\n0\r\n```\n### **说明**\n`gems = []`,`value = 1`因为没有宝石，所以返回`0`\r\n\n## **示例三**\n### **输入**\n```\r\n9\r\n6\r\n1\r\n3\r\n1\r\n8\r\n9\r\n3\r\n2\r\n4\r\n15\r\n```\n### **输出**\n```\r\n4\r\n```\n### **说明**\n`gems = [6, 1, 3, 1, 8, 9, 3, 2, 4]`,`value = 15`最多购买的宝石为`gems[0]`至`gems[3]`\r\n\n## **示例四**\n### **输入**\n```\r\n9\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n10\r\n```\n### **输出**\n```\r\n9\r\n```\n### **说明**\n`gems = [1, 1, 1, 1, 1, 1, 1, 1, 1], value = 10`最多购买的宝石为`gems[0]`至`gems[8]`，即全部购买\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 472,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-25 16:39:20",
                "tagList": [
                    "华为OD",
                    "不定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "9di54g",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977096259227649",
                "questionNum": "3188",
                "title": "2023A-完美走位",
                "content": "## 题目\n在第一人称射击游戏中，玩家通过键盘的 `A`、`S`、`D`、`W` 四个按键控制游戏人物分别向左、向后、向右、向前进行移动，从而完成走位。\r\n\n假设玩家每按动一次键盘，游戏人物会向某个方向移动一步，如果玩家在操作一定次数的键盘并且各个方向的步数相同时，此时游戏人物必定会回到原点，则称此次走位为**完美走位**。\r\n\n现给定玩家的走位（例如：`ASDA`）,请通过更换其中一段连续走位的方式使得原走位能够变成一个完美走位。其中待更换的连续走位可以是相同长度的任何走位。\r\n\n请返回待更换的连续走位的最小可能长度。若果原走位本身是一个完美走位，则返回 `0`。\r\n\n## 输入\n输入为由键盘字母表示的走位`s`，例如：`ASDA`\r\n\n## 输出\n输出为待更换的连续走位的最小可能长度\r\n\n## 备注\n1. 走位长度 `1 ≤ s.length ≤ 10^5`\r\n2. `s.length` 是 `4` 的倍数\r\n3. `s` 中只含有 `A`, `S`, `D`, `W` 四种字符\r\n\n## 示例一\n### 输入\n```\r\nASDW\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n已经是完美走位了。\r\n\n## 示例二\n### 输入\n```\r\nAASW\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n需要把一个 `A` 更换成 `D`，这样可以得到 `ADSW` 或者 `DASW`。\r\n\n## 示例三\n### 输入\n```\r\nAAAA\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n可以替换后 `3` 个 `A`，得到 `ASDW`。\r\n\n## 示例四\n### 输入\n```\r\nAAAAADDD\r\n```\n### 输出\n```\r\n4\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 928,
                "thumbNum": 0,
                "favourNum": 4,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-25 18:15:21",
                "tagList": [
                    "华为OD",
                    "不定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "t2jvw6",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977096422805506",
                "questionNum": "3189",
                "title": "2023A-知识图谱新词挖掘",
                "content": "## 题目描述\n小华负责公司知识图谱产品，现在要通过新词挖掘完善知识图谱。新词挖掘：给出一个待挖掘文本内容字符串`content`和一个词的字符串`word`，找到`content`中所有`word`的新词。新词：使用词`word`的字符排列形成的字符串。请帮小华实现新词挖掘，返回发现的新词的数量。\r\n\n## 输入描述\n第一行输入为待挖掘的文本内容`content`；第二行输入为词`word`；\r\n\n## 输出描述\n在中找到的所有`word`的新词的数量。\r\n\n## 备注\n`0 ≤ content.length ≤ 10000000`；`1 ≤ word.length ≤ 2000`\r\n\n## 示例一\n### 输入\n```\r\nqweebaewqd\r\nqwe\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n起始索引等于 `0` 的子串是 `qwe`, 它是 `word`的新词。起始索引等于 `6` 的子串是 `ewq`, 它是 `word`的新词。\r\n\n## 示例二\n### 输入\n```\r\nabab\r\nab\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n起始索引等于 `0` 的子串是 `ab`, 它是 `word` 的新词。起始索引等于 `1` 的子串是 `ba`, 它是 `word` 的新词。起始索引等于 `2` 的子串是 `ab`, 它是 `word` 的新词。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 358,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-25 02:47:47",
                "tagList": [
                    "华为OD",
                    "固定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "krab7m",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977096598966273",
                "questionNum": "3190",
                "title": "2024D-最长的指定瑕疵度的元音子串",
                "content": "## 题目描述\n头和结尾都是元音字母（`aeiouAEIOU`）的字符串为**元音字符串**，其中混杂的非元音字母数量为其**瑕疵度**。比如:\r\n\n- `\"a\"`，`\"aa\"`是元音字符串，其瑕疵度都为 `0`\r\n- `\"aiur\"`不是元音字符串（结尾不是元音字符）\r\n- `\"abira\"`是元音字符串，其瑕疵度为 `2`\r\n\n给定一个字符串，请找出指定瑕疵度的最长元音字符子串，并输出其长度，如果找不到满足条件的元音字符子串，输出 `0`。\r\n\n子串：字符串中任意个**连续**的字符组成的子序列称为该字符串的子串。\r\n\n## 输入描述\n首行输入是一个整数，表示预期的瑕疵度`flaw`，取值范围`[0, 65535]`。\r\n\n接下来一行是一个仅由字符`a-z`和`A-Z`组成的字符串，字符串长度`(0, 65535]`。\r\n\n## 输出描述\n输出为一个整数，代表满足条件的元音字符子串的长度。\r\n\n## 示例一\n### 输入\n```\r\n0\r\nasdbuiodevauufgh\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n满足条件的最长元音字符子串有两个，分别为`uio`和`auu`，长度为 `3`。\r\n\n## 示例二\n### 输入\n```\r\n2\r\naeueo\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n没有满足条件的元音字符子串，输出 `0`\r\n\n## 示例三\n### 输入\n```\r\n1\r\naabeebuu\r\n```\n### 输出\n```\r\n5\r\n```\n### 说明\n满足条件的最长元音字符子串有两个，分别为`aabee`和`eebuu`，长度为 `5`\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 357,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-23 08:41:01",
                "tagList": [
                    "华为OD",
                    "不定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "3ha56d",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977096779321345",
                "questionNum": "3191",
                "title": "2024D-最小矩阵宽度",
                "content": "## **题目描述**\n给定一个矩阵，包含`N*M`个整数，和一个包含`K`个整数的数组，现在要求在这个矩阵中找一个**宽度最小**的子矩阵，要求子矩阵包含数组中所有的整数。\r\n\n## **输入描述**\n第一行输入两个正整数`N`，`M`，表示矩阵大小。\r\n\n接下来`N`行`M`列表示矩阵内容。下一行包含一个正整数`K`。下一行包含`K`个整数，表示所需包含的数组，`K`个整数可能存在重复数字。\r\n\n所有输入数据小于`1000`。\r\n\n## **输出描述**\n输出包含一个整数，表示满足要求子矩阵的最小宽度，若找不到，输出`-1`\r\n\n## **示例**\n### **输入**\n```\r\n2 5\r\n1 2 2 3 1\r\n2 3 2 3 2\r\n3\r\n1 2 3\r\n```\n### **输出**\n```\r\n2\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 333,
                "thumbNum": 0,
                "favourNum": 3,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-25 14:20:38",
                "tagList": [
                    "华为OD",
                    "不定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "jrb9dc",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977096955482114",
                "questionNum": "3192",
                "title": "2024D-求满足条件的最长子串的长度",
                "content": "## 题目描述\n给定一个字符串，只包含字母和数字，按要求找出字符串中的最长 (连续)子串的长度，字符串本身是其最长的子串，子串要求:\r\n\n1. 只包含`1`个字母`(a~z,A~Z)`，其余必须是数字\r\n2. 字母可以在子串中的任意位置;\r\n\n如果找不到满足要求的子串，如全是字母或全是数字，则返回`-1`。\r\n\n## 输入描述\n字符串（只包含字母和数字）\r\n\n## 输出描述\n最长子串的长度\r\n\n## 示例一\n### 输入\n```\r\nabC124ACb\r\n```\n### 输出\n```\r\n4\r\n```\n### 说明\n满足条件的最长子串是`C124`或者`124A`，长度都是`4`\r\n\n## 示例二\n### 输入\n```\r\na5\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n字符串自身就是满足条件的子串，长度为`2`\r\n\n## 示例三\n### 输入\n```\r\naBB9\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n满足条件的子串为`B9`，长度为`2`\r\n\n## 示例四\n### 输入\n```\r\nabcdef\r\n```\n### 输出\n```\r\n-1\r\n```\n### 说明\n没有满足要求的子串，返回`-1`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 306,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-22 13:18:47",
                "tagList": [
                    "华为OD",
                    "不定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ffjs29",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977097165197313",
                "questionNum": "3193",
                "title": "2024D-身高排序",
                "content": "## 题目描述\n## 题目\n小明今年升学到了小学一年级，来到新班级后，发现其他小朋友身高参差不齐，然后就想基于各小朋友和自己的身高差，对他们进行排序，请帮他实现排序。\r\n\n## 输入\n第一行为正整数`H`和`N`，其中`0 < H < 200` 为小明的身高，`0 < N < 50` 为新班级其他小朋友个数。\r\n\n第二行为 N 个正整数`H1 ~ Hn`分别是其他小朋友的身高，取值范围`0 < Hi < 200`，且`N`个正整数各不相同。\r\n\n## 输出\n输出排序结果，各正整数以空格分割，和小明身高差绝对值最小的小朋友排在前面，和小明身高差绝对值最大的小朋友排在后面，如果两个小朋友和小明身高差一样，则个子较小的小朋友排在前面。\r\n\n## 示例\n### 输入\n```\r\n100 10\r\n95 96 97 98 99 101 102 103 104 105\r\n```\n### 输出\n```\r\n99 101 98 102 97 103 96 104 95 105\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 978,
                "thumbNum": 0,
                "favourNum": 3,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-25 16:29:16",
                "tagList": [
                    "华为OD",
                    "排序"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "bywft7",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977097370718210",
                "questionNum": "3194",
                "title": "2024D-GPU调度",
                "content": "## 题目描述\n为了充分发挥 GPU 算力，需要尽可能多的将任务交给 GPU 执行，现在有一个任务数组，数组元素表示在这`1s`内新增的任务个数，且每秒都有新增任务，假设 GPU 最多一次执行`n`个任务，一次执行耗时`1s`，在保证 GPU 不空闲的情况下，最少需要多长时间执行完成。\r\n\n## 输入描述\n第一个参数为 GPU 最多执行的任务个数取值范围`1 ~ 10000`第二个参数为任务数组的长度取值范围`1 ~ 10000`第三个参数为任务数组数字范围`1 ~ 10000`\r\n\n## 输出描述\n执行完所有任务需要多少秒\r\n\n## 示例一\n### 输入\n```\r\n3\r\n5\r\n1 2 3 4 5\r\n```\n### 输出\n```\r\n6\r\n```\n### 说明\n一次最多执行`3`个任务最少耗时`6s`\r\n\n## 示例二\n### 输入\n```\r\n4\r\n5\r\n5 4 1 1 1\r\n```\n### 输出\n```\r\n5\r\n```\n### 说明\n一次最多执行`4`个任务最少耗时`5s`\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 873,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-25 15:26:32",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "dlmfle",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977097559461889",
                "questionNum": "3195",
                "title": "2023B-IPv4地址转换成整数",
                "content": "## 题目描述\n存在一种虚拟IPv4地址，由`4`小节组成，除了第一小节的范围是`1-128`以外，其余三节的范围为`0-255`，以`#`号间隔，格式如下：\r\n\n`(1~128)#(0~255)#(0~255)#(0~255)`\r\n\n例如：\r\n\n`128#0#255#255`，转换为`32`位整数的结果为`2147549183（0x8000ffff）`\r\n\n`1#0#0#0`，转换为`32`位整数的结果为`16777216（0x01000000）`\r\n\n请利用这个特性把虚拟IPv4地址转换为一个`32`位的整数，IPv4地址以字符串形式给出，要求每个IPvV4地址只能对应到唯一的整数上。\r\n\n如果是非法IPv4，输出字符串`\"invalid IP\"`。\r\n\n## 输入描述\n输入一行，虚拟IPv4地址格式字符串\r\n\n## 输出描述\n输出一行，按照要求输出整型或者特定字符\r\n\n## 补充说明\n输入不能确保是合法的IPv4地址，需要对非法IPv4 (空串，含有IP地址中不存在的字符，非合法的`#`分十进制，十进制整数不在合法区间内）进行识别，返回特定错误。\r\n\n## 示例一\n### 输入\n```\r\n100#101#1#5\r\n```\n### 输出\n```\r\n1684340997\r\n```\n## 示例二\n### 输入\n```\r\n1#2#3\r\n```\n### 输出\n```\r\ninvalid IP\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 629,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-25 12:23:26",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "1d7rrl",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977097760788482",
                "questionNum": "3196",
                "title": "2024D-攀登者2",
                "content": "## 题目描述\n攀登者喜欢寻找各种地图，并且尝试攀登到最高的山峰。\r\n\n地图表示为一维数组，数组的索引代表水平位置，数组的高度代表相对海拔高度。其中数组元素 `0` 代表地面。\r\n\n例如`[0,1,2,4,3,1,0,0,1,2,3,1,2,1,0]`， 代表如下图所示的地图。，地图中有两个山脉位置分别为 `1,2,3,4,5`和`8,9,10,11,12,13`，最高峰高度分别为`4,3`。最高峰位置分别为`3,10`。\r\n\n一个山脉可能有多座山峰（高度大于相邻位置的高度，或在地图边界且高度大于相邻的高度）。\r\n\n```\r\n                4\r\n\r\n              +---+\r\n              |   |\r\n              |   | 3                       3\r\n              |   |\r\n              |   +---+                   -----\r\n              |       |                   |   |\r\n            2 |       |                 2 |   |     2\r\n              |       |                   |   |\r\n          +---+       |               ----+   |   +---+\r\n          |           |               |       |   |   |\r\n        1 |           | 1           1 |       | 1 |   | 1\r\n          |           |               |       |   |   |\r\n      +---+           +---+       +---+       +---+   +---+\r\n      |                   |       |                       |\r\n    0 |                   | 0   0 |                       | 0\r\n      |                   |       |                       |\r\n  +---+                   +-------+                       +---+\r\n\r\n    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14\r\n```\n登山时会消耗登山者的体力（整数），上坡时，消耗相邻高度差两倍的体力，下坡时消耗相邻高度差一倍的体力，平地不消耗体力，登山者体力消耗到零时会有生命危险。\r\n\n例如，上图所示的山峰：从索引 `0`，走到索引 `1`，高度差为 `1`，需要消耗 `2*1=2` 的体力；从索引 `2` 高度 `2`走到高度 `4` 索引 `3` 需要消耗 `2*2=4` 的体力；从索引 `3` 走到索引 `4` 则消耗 `1*1=1` 的体力。\r\n\n攀登者想要评估一张地图内有多少座山峰可以进行攀登，且可以安全返回到地面，且无生命危险。\r\n\n例如上图中的教组，有`3`个不同的山峰，登上位置在`3`的山可以从位置`0`或者位置`6`开始，从位置`0`登到山顶需要消耗体力`1*2+1*2+2*2=8`，从山顶返回到地面`0`需要消耗体力 `2*1+1*1+1*1=4`的体力，按照登山路线`0->3->0`需要消耗体力 `12`。攀登者至少需要`12`以上的体力(大于`12`)才能安全返回。\r\n\n### 输入描述\n第一行输入 一个长度为`N`的数组，表示地图。\r\n\n第二行输入最大体力。\r\n\n### 输出描述\n输出一个数字，地图中可以攀登到达的山峰数量\r\n\n## **示例**\n### **输入**\n```\r\n0,1,4,3,1,0,0,1,2,3,1,2,1,0\r\n11\r\n```\n### **输出**\n```\r\n2\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 404,
                "thumbNum": 0,
                "favourNum": 3,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-22 13:20:23",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "slwkxl",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977097983086594",
                "questionNum": "3197",
                "title": "2024D-回收银饰",
                "content": "有 `N` 块二手市场收集的银饰，每块银饰的重量都是正整数，收集到的银饰会被熔化用于打造新的饰品。每一回合，从中选出**三块最重的银饰**，然后一起熔掉。假设银饰的重量分别为 `x` 、`y` 和 `z`，且 `x <= y <= z`。那么熔掉的可能结果如下：\r\n\n如果`x == y == z`，那么三块银饰都会被完全熔掉；\r\n\n如果`x == y`且`y != z`，会剩余重量为`z - y`的银块无法被熔掉；\r\n\n如果`x != y`且`y == z`，会剩余重量为`y - x`的银块无法被熔掉；\r\n\n如果`x != y`且`y != z`，会剩余重量为`z - y`与`y - x`差值的银块无法被熔掉。\r\n\n如果剩余两块，返回较大的重量（若两块重量相同，返回任意一块皆可）；如果只剩下一块，返回该块的重量；如果没有剩下，就返回 `0`。\r\n\n输入数据为两行\r\n\n第一行为银饰数组长度 `n`，`1 ≤ n ≤ 40`，\r\n\n第二行为 `n` 块银饰的重量，重量的取值范围为`[1，2000]`，重量之间使用空格隔开\r\n\n如果剩余两块，返回较大的重量（若两块重量相同，返回任意一块皆可）；如果只剩下一块，返回该块的重量；如果没有剩下，就返回 `0`。\r\n\n## **输入**\n```\r\n3\r\n1 1 1\r\n```\n## **输出**\n```\r\n0\r\n```\n## **说明**\n选出 `1 1 1`，得到 `0`，最终数组转换为 `[]`，最后没有剩下银块，返回 `0`\r\n\n## **输入**\n```\r\n3\r\n3 7 10\r\n```\n## **输出**\n```\r\n1\r\n```\n## **说明**\n选出 `3 7 10`，需要计算 `(7-3)` 和 `(10-7)` 的差值，即`(7-3)-(10-7)=1`，所以数组转换为 `[1]`，剩余一块，返回该块重量，返回 `1`\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 285,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:55",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-25 17:52:21",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "yuo9tg",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977098171830273",
                "questionNum": "3198",
                "title": "2024D-解密犯罪时间",
                "content": "## 题目描述\n警察在侦破一个案件时，得到了线人给出的可能犯罪时间，形如`“HH:MM” `表示的时刻。根据警察和线人的约定，为了隐蔽，该时间是修改过的，解密规则为：利用当前出现过的数字，构造下一个距离当前时间最近的时刻，则该时间为可能的犯罪时间。每个出现数字都可以被无限次使用。\r\n\n## 输入描述\n形如`HH:MM`的字符串，表示原始输入\r\n\n## 输出描述\n形如`HH:MM`的字符串，表示推理出来的犯罪时间\r\n\n## 补充说明\n1. 可以保证线人给定的字符串一定是合法的。例如，`“01:35”`和`“11:08”`是合法的，`“1:35”`和`“11:8”`是不合法的\r\n2. 最近的时刻有可能在第二天\r\n\n## 示例\n### 输入\n```\r\n18:52\r\n```\n### 输出\n```\r\n18:55\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 248,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:56",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-24 02:44:46",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "d5v9bx",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977098377351169",
                "questionNum": "3199",
                "title": "2024D-结队编程",
                "content": "### 题目描述\n某部门计划通过结队编程来进行项目开发，已知该部门有 `N`  名员工，每个员工有独一无二的职级，每三个员工形成一个小组进行结队编程。\r\n\n结队分组规则如下：\r\n\n从部门中选出序号分别为`i`、`j`、`k` 的 `3`  名员工，他们的职级分别为 `level[i], level[j], level[k]` 结队小组需满足 `level[i] < level[j] < level[k]`  或者 `level[i] > level[j] > level[k]` ，其中  `0 ⩽ i < j < k < n`\r\n\n请你按上述条件计算可能组合的小组数量。同一员工可以参加多个小组。\r\n\n### 输入描述\n第一行输入：员工总数 `n`\r\n\n第二行输入：按序号依次排列的员工的职级 `level`，中间用空格隔开\r\n\n限制：\r\n\n`1 ⩽ n ⩽ 1000`\r\n\n`1 ⩽ level[i] ⩽ 10^5`\r\n\n### 输出描述\n可能组合的小组数量\r\n\n### 示例一\n#### 输入\n```\r\n4\r\n1 2 3 4\r\n```\n#### 输出\n```\r\n4\r\n```\n#### 说明\n可能结队成的组合 `(1,2,3)`、`(1,2,4)`、`(1,3,4)`、`(2,3,4)`。\r\n\n### 示例二\n#### 输入\n```\r\n3\r\n5 4 7\r\n```\n#### 输出\n```\r\n0\r\n```\n#### 说明\n根据结队条件，我们无法为该部门组建小组\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 219,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:56",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-25 20:13:35",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "c23joh",
                "hasChoiceQuestion": false
            }
        ],
        "total": "209",
        "size": "20",
        "current": "1",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "11"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814977098545123330",
                "questionNum": "3200",
                "title": "2024D-多段线数据压缩",
                "content": "## 题目描述\n下图中，每个方块代表一个像素，每个像素用其行号和列号表示。\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/VWGogm6d_1721042922934_mianshiya.png)\r\n\n为简化处理，多段线的走向只能是水平、竖直、斜向45度。\r\n\n上图中的多段线可以用下面的坐标串表示:`(2,8),(3,7),(3,6),(3,5),(4,4),(5,3),(6,2),(7,3),(8,4),(7,5)`。\r\n\n但可以发现，这种表示不是最简的，其实只需要存储`6`个蓝色的**关键点**即可，它们是线段的**起点、拐点、终点**，而剩下`4`个点是冗余的。\r\n\n现在，请根据输入的包含有冗余数据的多段线坐标列表，输出其简化的结果。\r\n\n## 输入描述\n形如`2 8 3 7 3 6 3 5 4 4 5 3 6 2 7 3 8 4 7 5`\r\n\n1、所有数字以空格分隔，每两个数字一组，第一个数字是行号，第二个数字是列号;\r\n\n2、行号和列号范围为`[0,64)`，用例输入保证不会越界，考生不必检查;\r\n\n3、输入数据至少包含两个坐标点。\r\n\n## 输出描述\n形如`2 8 3 7 3 5 6 2 8 4 7 5`\r\n\n压缩后的最简化坐标列表，和输入数据的格式相同。\r\n\n## 补充说明\n输出的坐标相对顺序不能变化。\r\n\n## 示例\n### 输入\n```\r\n2 8 3 7 3 6 3 5 4 4 5 3 6 2 7 3 8 4 7 5\r\n```\n### 输出\n```\r\n2 8 3 7 3 5 6 2 8 4 7 5\r\n```\n### 说明\n如上图所示，6个蓝色像素的坐标依次是`(2,8)、(3,7)、(3,5)、(6,2)、(8,4)、(7,5)`。\r\n\n将他们按顺序出即可。\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 197,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:56",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-23 14:23:04",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "6m3a2c",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977098834530306",
                "questionNum": "3201",
                "title": "2024D-机场航班调度程序",
                "content": "## 题目描述\nXX市机场停放了多架飞机，每架飞机都有自己的航班号`CA3385`，`CZ6678`，`SC6508`等，航班号的前`2`个大写字母)（或数字）代表航空公司的缩写，后面`4`个数字代表航班信息。但是XX市机场只有一条起飞用跑道，调度人员需要安排目前停留在机场的航班有序起飞。\r\n\n为保障航班的有序起飞，调度员首先按照航空公司的缩写(航班号前`2`个字母或数字)对所有航班进行排序，同一航空公司的航班再按照航班号的后`4`个数字进行排序最终获得安排好的航班的起飞顺序。\r\n\n请编写一段代码，根据输入的航班号信息，帮助调度员输出航班的起飞顺序\r\n\n## 输入描述\n第一行输入航班信息，多个航班号之间用逗号`\",\"`分隔，输入的航班号不超过`100`个\r\n\n## 输出描述\n一行航班信息表示安排好的航班起飞顺序\r\n\n## 补充说明\n航班号为`6`位长度，后`4`位为纯数字，不考虑存在后`4`位重复的场景\r\n\n航空公司缩写排序按照从特殊符号`$ & *`，`0~9`，`A~Z`排序\r\n\n## 示例\n### 输入\n```\r\nCA3385,CZ6678,SC6508,DU7523,HK4456,MK0987\r\n```\n### 输出\n```\r\nCA3385,CZ6678,DU7523,HK4456,MK0987,SC6508\r\n```\n### 说明\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 182,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:56",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-23 21:43:41",
                "tagList": [
                    "华为OD",
                    "排序"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "h38pcf",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977099014885377",
                "questionNum": "3202",
                "title": "2024D-智能成绩表",
                "content": "## 题目描述\n小明来到某学校当老师，需要将学生按考试总分或单科分数进行排名，你能帮帮他吗？\r\n\n## 输入描述\n第`1`行输入两个整数，学生人数`n`和科目数量`m`。`0 < n < 100`，`0 < m < 10`\r\n\n第`2`行输入`m`个科目名称，彼此之间用空格隔开，科目名称只由英文字母构成，单个长度不超过`10`个字符。科目的出现顺字和后续输入的学生成绩一一对应。不会出现重复的科目名称。\r\n\n第`3`行开始的行，每行包含一个学生的姓名和该生`m`个科目的成绩空格隔开，学生不会重名。\r\n\n学生姓名只由英文字母构成，长度不超过`10`个字符。成绩是`0~100`的整数，依次对应第`2`行中输入的科目。\r\n\n第`n+2`行，输入用作排名的科目名称。\r\n\n若科目不存在，则按总分进行排序。\r\n\n## 输出描述\n输出一行，按成绩排序后的学生名字，空格隔开。成绩相同的按照学生姓名字典顺序排序。\r\n\n## 示例一\n### 输入\n```\r\n3 2\r\nyuwen shuxue\r\nfangfang 95 90\r\nxiaohua 88 95\r\nminmin 100 82\r\nshuxue\r\n```\n### 输出\n```\r\nxiaohua fangfang minmin\r\n```\n## 示例二\n### 输入\n```\r\n3 3\r\nyuwen shuxue yingyu\r\nfangfang 95 90 100\r\nxiaohua 88 95 20\r\nminmin 100 82 60\r\n```\n### 输出\n```\r\nfangfang minmin xiaohua\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 191,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:56",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:55",
                "updateTime": "2025-06-23 15:34:52",
                "tagList": [
                    "华为OD",
                    "排序"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "x34i0m",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977100021518338",
                "questionNum": "3203",
                "title": "2024D-模拟目录管理",
                "content": "## 题目描述\n实现一个模拟目录管理功能的软件，输入一个命令序列，输出最后一条命令运行结果。\r\n\n支持命令：\r\n\n1) 创建目录命令：`mkdir 目录名称`，如`mkdir abc`为在当前目录创建`abc`目录，如果已存在同名目录则不执行任何操作。此命令无输出。\r\n\r\n2) 进入目录命令：`cd 目录名称`，如`cd abc`为进入`abc`目录，特别地，`cd ..`为返回上级目录，如果目录不存在则不执行任何操作。此命令无输出。\r\n\r\n3) 查看当前所在路径命令：`pwd`，输出当前路径字符串。\r\n\n约束:\r\n\n1) 目录名称仅支持小写字母；`mkdir`和`cd`命令的参数仅支持单个目录，如`mkdir abc`和`cd abc`;不支持嵌套路径和绝对路径，如`mkdir abc/efg`，`cd abc/efg`是不支持的。\r\n\r\n2) 目录符号为`/`，根目录`/`作为初始目录。\r\n\r\n3) 任何不符合上述定义的无效命令不做任何处理并且无输出。\r\n\n## 输入描述\n输入`N`行字符串，每一行字符串是一条命令\r\n\n## 输出描述\n输出最后一条命令运行结果字符串\r\n\n## 补充说明\n命令行数限制`100`行以内，目录名称限制`10`个字符以内\r\n\n## 示例\n### 输入\n```\r\nmkdir abc\r\ncd abc \r\npwd\r\n```\n### 输出\n```\r\n/abc/\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 175,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:56",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:56",
                "updateTime": "2025-06-25 16:06:27",
                "tagList": [
                    "华为OD",
                    "系统设计"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "f78po0",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977100323508226",
                "questionNum": "3204",
                "title": "2024D-反射计数",
                "content": "## 题目描述\n给定一个包含`0`和`1`的二维矩阵给定一个初始位置和速度\r\n\n一个物体从给定的初始位置出发，在给定的速度下进行移动，遇到矩阵的边缘则发生镜面反射。\r\n\n无论物体经过`0`还是`1`，都不影响其速度。\r\n\n请计算并给出经过`t`时间单位后，物体经过`1`点的次数\r\n\n矩阵以左上角位置为`[0,0]`（列`x`,行`y`）\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/KRmPd8Dx_1721042872370_mianshiya.png)\r\n\n注意：\r\n\n1. 如果初始位置的点是`1`，也计算在内。\r\n2. 时间的最小单位为`1`，不考虑小于`1`个时间单位内经过的点\r\n\n## 输入描述\n第一行为初始信息\r\n\n`<w> <h> <x> <y> <sx> <sy> <t>`\r\n\n第二行开始一共`h`行,为二维矩阵信息\r\n\n其中\r\n\n`w`，`h`为矩阵的宽和高\r\n\n`x`，`y`为起始位置\r\n\n`sx`，`sy`为初始速度\r\n\n`t`为经过的时间\r\n\n所有输入都是有效的,数据范围如下\r\n\n`0 < w < 100`\r\n\n`0 < h < 100`\r\n\n`0 <= x < w`\r\n\n`0 <= y < h`\r\n\n`-1 <= sx <= 1`\r\n\n`-1 <= sy <= 1`\r\n\n`0 <= t < 100`\r\n\n## 输出描述\n经过`1`的个数\r\n\n注意初始位置也要计算在内\r\n\n## 示例\n### 输入\n```\r\n12 7 2 1 1 -1 13\r\n001000010000\r\n001000010000\r\n001000010000\r\n001000010000\r\n001000010000\r\n001000010000\r\n001000010000\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n初始位置为`(2,1)`，速度为`(1,-1)`，那么`13`个时间单位后，经过点`1`的个数为`3`\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/Sc7W3EOO_1721042888575_mianshiya.png)\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 172,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:56",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:56",
                "updateTime": "2025-06-23 19:44:23",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "atlyvx",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977100537417730",
                "questionNum": "3205",
                "title": "2024D-移动元素获得最大数组和",
                "content": "## 题目描述\n`1`到`n`的`n`个连续的数字组成一个数组，`n`为`3`的倍数\r\n\n每次按照顺序从数组中取出`3`个元素，去掉这`3`个元素中的一个最大值和一个最小值，并将剩下的元素累加为`S`，`S`初始值为`0`\r\n\n可以通过调整数组中元素的位置改变最终结果，每移动一个元素计为移动一次。\r\n\n请计算最少移动几次可以使得数组和`S`最大。\r\n\n## 输入描述\n数组长度`n`的范围为`[3, 600]`\r\n\n数组中数字范围`[1, 10000]`\r\n\n数组由一个字符串表示，不同数字元素之间使用空格分隔\r\n\n## 输出描述\n移动次数是一个自然数\r\n\n无需移动，返回`0`\r\n\n## 示例\n### 输入\n```\r\n3 8 9 7 4 2 5 6 1\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n`3 8 9->8`， `7 4 2->4`， `5 6 1->5`，`8+4+5=17`，\r\n\n将`7`移动到`5 6`之间,调整结果为`3 8 9 4 2 5 7 6 1`\r\n\n`3 8 9->8`，`4 2 5->4`，`7 6 1->6`，`8+4+6=18`，`18`是所有排列中的最大值，输出`1`\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 156,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:56",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:56",
                "updateTime": "2025-06-24 11:53:00",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "i5sd5g",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977100801658882",
                "questionNum": "3206",
                "title": "2023B-模拟消息队列",
                "content": "## 题目描述\n让我们来模拟一个消息队列的运作，有一个发布者和若干消费者，发布者会在给定的时刻向消息队列发送消息：\r\n\n1. 若此时消息队列有消费者订阅，这个消息会被发送到订阅的消费者中优先级最高（输入中消费者按优先级升序排列）的一个；\r\n2. 若此时没有订阅的消费者，该消息被消息队列丢弃。\r\n\n消费者则会在给定的时刻订阅消息队列或取消订阅。\r\n\n1. 当消息发送和订阅发生在同一时刻时，先处理订阅操作，即同一时刻订阅的消费者成为消息发送的候选。\r\n2. 当消息发送和取消订阅发生在同一时刻时，先处理取消订阅操作，即消息不会被发送到同一时刻取消订阅的消费者。\r\n\n## 输入描述\n输入为两行。\r\n\n第一行为`2N`个正整数，代表发布者发送的`N`个消息的时刻和内容（为方便解折，消息内容也用正整数表示）。第一个数字是第一个消息的发送时刻，第二个数字是第一个消息的内容，以此类推。用例保证发送时刻不会重复，但注意消息并没有按照发送时刻排列。\r\n\n第二行为`2M`个正整数，代表`M`个消费者订阅和取消订阅的时刻。第一个数字是第一个消费者订阅的时刻，第二个数字是第一个消费者取消订阅的时刻，以此类推。用例保证每个消费者的取消订阅时刻大于订阅时刻，消费者按优先级升序排列。\r\n\n两行的数字都由空格分隔。`N`不超过`100`，`M`不超过`10`，每行的长度不超过`1000`字符。\r\n\n## 输出描述\n输出为`M`行，依次为`M`个消费者收到的消息内容，消息内容按收到的顺序排列，且由空格分隔；\r\n\n若某个消费者没有收到任何消息，则对应的行输出`-1`.\r\n\n## 示例一\n### 输入\n```\r\n2 22 1 11 4 44 5 55 3 33\r\n1 7 2 3\r\n```\n### 输出\n```\r\n11 33 44 55\r\n22\r\n```\n### 说明\n消息`11`在`1`时刻到达，此时只有第一个消费者订阅，消息发送给它；\r\n\n消息`22`在`2`时刻到达，此时两个消费者都订阅了，消息发送给优先级最高的第二个消费者；\r\n\n消息`33`在时刻`3`到达，此时只有第一个消费者订阅，消息发送给它；\r\n\n余下的消息按规则也是发送给第一个消费者。\r\n\n## 示例二\n### 输入\n```\r\n5 64 11 64 9 97\r\n9 11 4 9\r\n```\n### 输出\n```\r\n97\r\n64\r\n```\n### 说明\n消息`64`在`5`时刻到达，此时只有第二个消费者订阅，消息发送给它；\r\n\n消息`97`在`9`时刻到达，此时只有第一消费者订阅（因为第二个消费者刚好在`9`时刻取消订阅），消息发送给它；\r\n\n`11`时刻也到达了一个内容为`64`的消息，不过因为没有消费者订阅，消息被丢弃。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 198,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:56",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:56",
                "updateTime": "2025-06-24 12:36:22",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "wlje7e",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977100973625345",
                "questionNum": "3207",
                "title": "2023B-数字反转打印",
                "content": "## 题目描述\n小华是个对数字很敏感的小朋友，他觉得数字的不同排列方式有特殊美感。\r\n\n某天，小华突发奇想，如果数字多行排列，第一行`1`个数，第二行`2`个，第三行`3`个，即第`n`行有`n`个数字，并且奇数行正序排列，偶数行逆序排列，数字依次累加。\r\n\n这样排列的数字一定很有意思。聪明的你能编写代码帮助小华完成这个想法吗？\r\n\n规则总结如下：\r\n\na、每个数字占据`4`个位置，不足四位用`\"*\"`补位，如`1`打印为`1***`。b、数字之间相邻`4`空格。c、数字的打印顺序按照正序逆序交替打印,奇数行正序，偶数行逆序。d、最后一行数字顶格，第`n-1`行相对第`n`行缩进四个空格\r\n\n### 输入描述\n第一行输入为`N`，表示打印多少行\r\n\n`1 <= N <= 30`\r\n\n### 输出描述\n按照要求打印的`N`行字符串\r\n\n## 示例一\n### 输入\n```\r\n2\r\n```\n### 输出\n```\r\n    1***\r\n3***    2***\r\n```\n## 示例而\n### 输入\n```\r\n5\r\n```\n### 输出\n```\r\n                1***\r\n            3***    2***\r\n        4***    5***    6***\r\n    10**    9***    8***    7***\r\n11**    12**    13**    14**    15**\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 234,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:56",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:56",
                "updateTime": "2025-06-24 12:36:31",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "0a7asu",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977101158174721",
                "questionNum": "3208",
                "title": "2024D-API 集群负载统计",
                "content": "## **题目描述**\n某个产品的 RESTful API 集合部署在服务器集群的多个节点上，近期对客户端访问日志进行了采集，需要统计各个 API 的访问频次，根据热点信息在服务器节点之间做负载均衡，现在需要实现热点信息统计查询功能。\r\n\nRESTful API 的由多个层级构成，层级之间使用`/`连接，如`/A/B/C/D`这个地址，`A` 属于第一级，`B` 属于第二级，`C` 属于第三级，`D` 属于第四级。\r\n\n现在负载均衡模块需要知道给定层级上某个名字出现的频次，未出现过用 `0` 次表示，实现这个功能。\r\n\n## **输入描述**\n第一行为 `N`，表示访问历史日志的条数，`0<N<=100`。\r\n\n接下来 `N` 行，每一行为一个 RESTful API 的 URL 地址，约束地址中仅包含英文字母和连接符`/`，最大层级为 `10`，每层级字符串最大长度为 `10`。\r\n\n最后一行为层级 `L` 和要查询的关键字。\r\n\n## **输出描述**\n输出给定层级上，关键字出现的频次，使用完全匹配方式（大小写敏感）。\r\n\n## **示例一**\n### **输入**\n```\r\n5\r\n/huawei/computing/no/one\r\n/huawei/computing\r\n/huawei\r\n/huawei/cloud/no/one\r\n/huawei/wireless/no/one\r\n2 computing\r\n```\n### **输出**\n```\r\n2\r\n```\n### **说明**\n在第二层级上，`computing` 出现了 `2` 次，因此输出 `2`.\r\n\n## **示例二**\n### **输入**\n```\r\n5\r\n/huawei/computing/no/one\r\n/huawei/computing\r\n/huawei\r\n/huawei/cloud/no/one\r\n/huawei/wireless/no/one\r\n4 two\r\n```\n### **输出**\n```\r\n0\r\n```\n### **说明**\n存在第四层级的 URL 上，没有出现 `two`，因此频次是 `0`\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 154,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:56",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:56",
                "updateTime": "2025-06-24 13:43:57",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "kgkgez",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977101367889922",
                "questionNum": "3209",
                "title": "2024D-灰度图恢复",
                "content": "## 题目描述\n黑白图像常采用灰度图的方式存储，即图像的每像素填充一个灰阶值，`256`阶灰度图是个灰阶值取值范围为`0-255`的灰阶矩阵，`0`表示全黑，`255`表示全白，范围内的其他值表示不同的灰度，比如下面的图像及其对应的灰阶矩阵:\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/kM9Cmutg_1721031990126_mianshiya.png)\r\n\n但在计算机中实际存储时，会使用**压缩算法**，其中一种压缩格式和描述如下：`10 10 255 34 0 1 255 8 0 3 255 6 0 5 255 4 0 7 255 2 0 9 255 21`\r\n\n1. 有数值以空格分隔\r\n2. 前两个数分别表示矩阵的行数和列数\r\n3. 从第三个数开始，每两个数一组，每组第一个数是灰阶值，第二个数表示该灰阶值以左到右，从上到下（可理解为将二维数组按行存储在一维矩阵中)的连续像素个数。比如题目所述例子，`255 34`表示有连续`34`个像素的灰阶值是`255`。如此，图像软件在打开此格式灰度图的时候，就可以根据此算法从压缩数据恢复出原始灰度图矩阵。\r\n\n请从输入的压缩数据恢复灰度图原始矩阵，并返回**指定像素的灰阶值**。\r\n\n## 输入描述\n输入包括两行，第一行是灰度图压缩数据，第二行表示一个像素位置的行号和列号，如 `0 0` 表示左上角像素\r\n\n## 输出描述\n一个数字，表示输入数据表示的灰阶矩阵的指定像素的灰阶值\r\n\n## 补充说明\n1. 系统保证输入的压缩数据是合法有效的，不会出现数据越界、数值不合法等无法恢复的场景\r\n2. 系统保证输入的像素坐标是合法的，不会出现不在矩阵中的像素\r\n3. 矩阵的行和列数范围为: `(0, 100]`\r\n4. 灰阶值取值范围为 `[0,255]`\r\n\n## 示例一\n### 输入\n```\r\n10 10 255 34 0 1 255 8 0 3 255 6 0 5 255 4 0 7 255 2 0 9 255 21\r\n3 4\r\n```\n### 输出\n```\r\n0\r\n```\n## 示例二\n### 输入\n```\r\n10 10 56 34 99 1 87 8 99 3 255 6 99 5 255 4 99 7 255 2 99 9 255 21 \r\n3 4\r\n```\n### 输出\n```\r\n99\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 177,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:56",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:56",
                "updateTime": "2025-06-24 14:18:54",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "4z6am0",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977102684901378",
                "questionNum": "3210",
                "title": "2023B-VLAN资源池",
                "content": "## 题目描述\nVLAN是一种对局域网设备进行逻辑划分的技术，为了标识不同的VLAN，引入`VLAN ID`（`1-4094`之间的整数）的概念。\r\n\n定义一个`VLAN ID`的资源池（下称VLAN资源池），资源池中连续的VLAN用`开始VLAN-结束VLAN`表示；不连续的用单个整数表示，所有的VLAN用英文逗号连接起来。\r\n\n现在有一个VLAN资源池，业务需要从资源池中申请一个VLAN，需要你输出从VLAN资源池中移除申请的VLAN后的资源池。\r\n\n## 输入描述\n第一行为字符串格式的VLAN资源池，第二行为业务要申请的VLAN，VLAN的取值范围为`[1，4094]`之间的整数。\r\n\n## 输出描述\n从输入VLAN资源池中移除申请的VLAN后字符串格式的VLAN资源池，输出要求满足题目描述中的格式，并且按照VLAN从小到大升序输出。\r\n\n如果申请的VLAN不在原VLAN资源池内，输出原VLAN资源池升序排序后的字符串即可\r\n\n**备注**\r\n\n输入VLAN资源池中VLAN的数量取值范围为`[2-4094]`间的整数，资源池中VLAN不重复且合法（`[1,4094]`之间的整数），输入是乱序的。\r\n\n## 示例一\n### 输入\n```\r\n1-5\r\n2\r\n```\n### 输出\n```\r\n1,3-5\r\n```\n### 说明\n原VLAN资源池中有VLAN`1、2、3、4、5`，从资源池中移除`2`后，剩下VLAN `1、3、4、5`，按照题目描述格式并升序后的结果为`1,3-5`。\r\n\n## 示例二\n### 输入\n```\r\n20-21,15,18,30,5-10\r\n15\r\n```\n### 输出\n```\r\n5-10,18,20-21,30\r\n```\n### 说明\n原VLAN资源池中有VLAN `5、6、7、8、9、10、15、18、20、21、30`，从资源池中移除`15`后，资源池中剩下的VLAN为` 5、6、7、8、9、10、18、20、21、30`，按照题目描述格式并升序后的结果为`5-10,18,20-21,30`。\r\n\n## 示例三\n### 输入\n```\r\n5,1-3\r\n10\r\n```\n### 输出\n```\r\n1-3,5\r\n```\n### 说明\n原VLAN资源池中有VLAN`1、2、3、5`，申请的VLAN `10`不在原资源池中，将原资源池按照题目描述格式并按升序排序后输出的结果为`1-3,5`。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 155,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:57",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:56",
                "updateTime": "2025-06-25 21:18:56",
                "tagList": [
                    "华为OD",
                    "排序"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "8uurhq",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977102861062146",
                "questionNum": "3211",
                "title": "2023B-一种字符串压缩表示的解压",
                "content": "## 题目描述\n有一种简易压缩算法: 针对全部由小写英文字母组成的字符串，将其中连续超过两个相同字母的部分压缩为连续个数加该字母，其他部分保持原样不变。\r\n\n例如: 字符串`\"aaabbccccd\"`经过压缩成为字符串`\"3abb4cd\"`。\r\n\n请您编写解压函数，根据输入的字符串，判断其是否为合法压缩过的字符串若输入合法则输出解压缩后的字符串，否则输出字符串`\"!error\"`来报告错误。\r\n\n## 输入描述\n输入一行，为一个`ASCII`字符串，长度不会超过`100`字符，用例保证输出的字符串长度也不会超过`100`字符。\r\n\n## 输出描述\n若判断输入为合法的经过压缩后的字符串，则输出压缩前的字符串若输入不合法，则输出字符串`“!error”`\r\n\n## 示例一\n### 输入\n```\r\n4dff\r\n```\n### 输出\n```\r\nddddff\r\n```\n### 说明\n## 示例二\n### 输入\n```\r\n2dff\r\n```\n### 输出\n```\r\n!error\r\n```\n### 说明\n两个`d`不需要压缩，故输入不合法。\r\n\n## 示例三\n### 输入\n```\r\n4d@A\r\n```\n### 输出\n```\r\n!error\r\n```\n### 说明\n全部由小写英文字母组成的字符串压缩后不会出现特殊字符`@`和大写字母`A`，故输入不合法\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 155,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:57",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:56",
                "updateTime": "2025-06-25 13:24:49",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "pxr99v",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977103058194434",
                "questionNum": "3212",
                "title": "2024D-小明能到达的最大坐标值",
                "content": "## **题目描述**\n小明在玩一个游戏，游戏规则如下：在游戏开始前，小明站在坐标轴原点处（坐标值为 `0`）给定一组指令和一个幸运数，每个指令都是一个整数，小明按照指定的要求前进或者后退指定的步数。\r\n\n前进代表朝坐标轴的正方向走，后退代表朝坐标轴的负方向走，幸运数为一个整数，如果某个指令正好和幸运数相等，则小明行进步数加 `1` 。\r\n\n例如：\r\n\n幸运数为 `3` ，指令数组为`[2, 3, 0, -5]`\r\n\n指令为 `2` ，表示前进 `2` 步\r\n\n指令为 `3` ，正好好和幸运数相等，前进 `3+1=4` 步\r\n\n指令为 `0` ，表示原地不动，既不前进，也不后退\r\n\n指令为 `-5` ，表示后退 `5` 步。\r\n\n请你计算小明在整个游戏过程中，小明所处的最大坐标值。\r\n\n## **输入描述**\n第一行输入 `1` 个数字，代表指令的总个数 `n(1≤n≤100）`\r\n\n第二行输入 `1` 个数字，代表幸运数 `m(−100≤m≤100)`\r\n\n第三行输入 `n` 个指令，每个指令值的取值范围为： `− 100 ≤ 指令值 ≤ 100`\r\n\n## **输出描述**\n输出在整个游戏过程中，小明所处的最大坐标值。异常情况下输出：`12345`\r\n\n## **示例一**\n### **输入**\n```\r\n2\r\n1\r\n-5 1\r\n```\n### **输出**\n```\r\n0\r\n```\n### **说明**\n总共 `2` 个指令，幸运数为 `1` ，依照指令行进，依次如下游戏开始前，站在坐标轴原点，此时坐标值为 `0` ；\r\n\n指令为 `−5` ，后退 `5` 步 ，此时坐标值为 `−5` ；指令为 `1` ，正好等于幸运数，前进 `1+1=2` 步，此时坐标值为 `−3`；\r\n\n整个游戏过程中，小明所处的坐标值依次为`[0,−5,−3]`，最大坐标值为 `0` 。\r\n\n## **示例二**\n### **输入**\n```\r\n5\r\n-5\r\n-5 1 6 0 -7\r\n```\n### **输出**\n```\r\n1\r\n```\n### **说明**\n总共 `5` 个指令，幸运数为 `−5`，依照指令行进，依次如下：\r\n\n游戏开始前，站在坐标轴原点，此时坐标值为 `0` ，\r\n\n指令为 `−5`，正好等于幸运数，后退 `5+1=6` 步，此时坐标值为 `−6`；\r\n\n指令为 `1` ，前进 1 步此时坐标值为 `−5` ；\r\n\n指令为 `6` ，前进 6 步此时坐标值为 `1` ；\r\n\n指令为 `0` ，既不前进也不后退，此时坐标值为 `1` ：\r\n\n指令为 `−7`，后退 `7` 步，此时坐标值为 `−6`。\r\n\n整个游戏过程中，小明所处的坐标值依次为 `[0,−6,−5,1,1,−6]`，最大坐标值为 `1` 。\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 200,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:57",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:56",
                "updateTime": "2025-06-25 13:44:22",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "obvw5l",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977103246938113",
                "questionNum": "3213",
                "title": "2024D-身高体重排序",
                "content": "## 题目描述\n某学校举行运动会,学生们按编号`(1、2、3.....n)` 进行标识,\r\n\n现需要按照身高由低到高排列，对身高相同的人，按体重由轻到重排列，对于身高体重都相同的人，维持原有的编号顺序关系。\r\n\n请输出排列后的学生编号\r\n\n## 输入描述\n两个序列，每个序列由 n 个正整数组成`(0 < n < 100)`。第一个序列中的数值代表身高，第二个序列中的数值代表体重。\r\n\n## 输出描述\n排列结果，每个数值都是原始序列中的学生编号，编号从 `1` 开始\r\n\n## 示例一\n### 输入\n```\r\n4\r\n100 100 120 130\r\n40 30 60 50\r\n```\n### 输出\n```\r\n2134\r\n```\n## 示例二\n### 输入\n```\r\n3\r\n90 110 90\r\n45 60 45\r\n```\n### 输出\n```\r\n132\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 179,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:57",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:56",
                "updateTime": "2025-06-25 14:37:22",
                "tagList": [
                    "华为OD",
                    "排序"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "68ugab",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977103410515970",
                "questionNum": "3214",
                "title": "2024D-素数之积",
                "content": "## 题目描述\nRSA加密算法在网络安全世界中无处不在，它利用了极大些数因数分解的闲难度，数据越大，安全系数越高，给定一个`32`位整数，请对其进行因数分解，找出是哪两个素数的乘积。\r\n\n## 输入描述\n`1`个正整数`num`\r\n\n`0 < num <= 2147483647`\r\n\n## 输出描述\n如果成功找到，以单个空格分割，从小到大输出两个素数。分解失败，请输出`-1 -1`\r\n\n## 示例\n### 输入\n```\r\n15\r\n```\n### 输出\n```\r\n3 5\r\n```\n### 说明\n因数分解后，找到两个素数`3`和`5`，使得`3*5=15`，按从小到大排列后，输出`3 5`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 208,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:57",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:56",
                "updateTime": "2025-06-25 18:42:25",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "n6hiim",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977103586676737",
                "questionNum": "3215",
                "title": "2024D-来自异国的客人",
                "content": "## 题目描述\n有位客人来自异国，在该国使用`m`进制计数。该客人有个幸运数字`n`(`n < m`)，每次购物时，其总是喜欢计算本次支付的花费（折算为异国的价格后）中存在多少幸运数字。问: 当其购买一个在我国价值`k`的产品时，其中包含多少幸运数字?\r\n\n## 输入描述\n第一行输入为`k n m`\r\n\n`k` 表示 该客人购买的物品价值 (以十进制计算的价格)\r\n\n`n` 表示 该客人的幸运数字\r\n\n`m` 表示 该客人所在国度的采用的进制\r\n\n## 输出描述\n输出幸运数字的个数，行末无空格.\r\n\n## 示例\n### 输入\n```\r\n10 2 4\r\n```\n### 输出\n```\r\n2\r\n```\n### 补充说明\n![72077112265](https://pic.code-nav.cn/mianshiya/question_picture/markdown/zxoOobfv_1721031890946.png)\r\n\n`22`一共包含`2`个`2`，故答案为`2`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 188,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:57",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:56",
                "updateTime": "2025-06-25 19:26:04",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "2pwvir",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977103758643201",
                "questionNum": "3216",
                "title": "2024D-开源项目热榜",
                "content": "## 题目描述\n某个开源社区希望将最近热度比较高的开源项目出一个榜单，推荐给社区里面的开发者。\r\n\n对于每个开源项目，开发者可以进行关注(watch)、收藏(star)、fork、issue、提交合并请求(MR)等。\r\n\n数据库里面统计了每个开源项目关注、收藏、fork、issue、MR 的数量，开源项目的热度根据这 `5` 个维度的加权求和进行排序。\r\n\n![72077095280](https://pic.code-nav.cn/mianshiya/question_picture/markdown/nEzYoeBy_1721029555358.png)\r\n\n- H：表示热度值；\r\n- ![72077102004](C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\1721029566115.png)：分别表示 `5` 个统计维度的权重；\r\n- #watch ，#star，#fork，#issure，#mr：分别表示 5 个统计维度的统计值。\r\n\n榜单按照热度值降序排序，对于热度值相等的，按照项目名字转换为全小写字母后的字典序排序。\r\n\n## 输入描述\n第一行输入为 `N`，表示开源项目的个数，`0 < N < 100`。\r\n\n第二行输入为权重值列表，一共 `5` 个整型值，分别对应关注、收藏、fork、issue、MR 的权重，权重取值 `0 < M ≤ 50`。\r\n\n第三行开始接下来的 `N` 行为开源项目的统计维度，每一行的格式为：\r\n\n```\r\nname nr_watch nr_star nr_fork nr_issue nr_mr\r\n```\n其中 name 为开源项目的名字，由英文字母组成，长度 `≤50`，其余 `5` 个整型值分别为该开源项目关注、收藏、fork、issue、MR 的数量，数量取值 `0 < nr ≤ 1000`。\r\n\n## 输出描述\n按照热度降序，输出开源项目的名字，对于热度值相等的，按照项目名字转换为全小写字母后的字典序排序\r\n\n## 示例一\n### 输入\n```\r\n4\r\n8 6 2 8 6\r\ncamila 66 70 46 158 80\r\nvictoria 94 76 86 189 211\r\nanthony 29 17 83 21 48\r\nemily 53 97 1 19 218\r\n```\n### 输出\n```\r\nvictoria\r\ncamila\r\nemily\r\nanthony\r\n```\n### 说明\n排序热度值计算：\r\n\ncamila: 66*8 + 70*6 + 46*2 + 158*8 + 80*6 = 2784\r\n\nvictoria: 94*8 + 76*6 + 86*2 + 189*8 + 211*6 = 4158\r\n\nanthony: 29*8 + 17*6 + 83*2 + 21*8 + 48*6 = 956\r\n\nemily: 53*8 + 97*6 + 1*2 + 19*8 + 218*6 = 2468\r\n\n根据热度值降序，得到结果。\r\n\n## 示例二\n### 输入\n```\r\n5\r\n5 6 6 1 2\r\ncamila 13 88 46 26 169\r\ngrace 64 38 87 23 103\r\nlucas 91 79 98 154 79\r\nleo 29 27 36 43 178\r\nava 29 27 36 43 178\r\n```\n### 输出\n```\r\nlucas\r\ngrace\r\ncamila\r\nava\r\nleo\r\n```\n### 说明\n排序热度值计算：\r\n\ncamila: 13*5 + 88*6 + 46*6 + 26*1 + 169*2 = 1233\r\n\ngrace: 64*5 + 38*6 + 87*6 + 23*1 + 103*2 = 1299\r\n\nlucas: 91*5 + 79*6 + 98*6 + 154*1 + 79*2 = 1829\r\n\nleo: 29*5 + 27*6 + 36*6 + 43*1 + 178*2 = 922\r\n\nava: 29*5 + 27*6 + 36*6 + 43*1 + 178*2 = 922\r\n\n根据热度值降序，对于 leo 和 ava，热度值相等，按照字典序，ava 排在 leo 前面，得到结果。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 188,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:57",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:57",
                "updateTime": "2025-06-19 15:17:08",
                "tagList": [
                    "华为OD",
                    "排序"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "dpyo3g",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977106426220546",
                "questionNum": "3217",
                "title": "2024D-比赛的冠亚季军",
                "content": "## 题目描述\n有`N (3 <= N< 10000)`个运动员，他们的`id`为`0`到`N-1`,他们的实力由一组整数表示。他们之间进行比赛，需要决出冠亚军。比赛的规则是`0`号和`1`号比赛，`2`号和`3`号比赛，以此类推，每一轮，相邻的运动员进行比赛，获胜的进入下一轮，实力值大的获胜，实力值相等的情况，`id`小的情况下获胜；轮空的直接进入下一轮。\r\n\n## 输入描述\n输入一行`N`个数字代表`N`个运动员的实力值`(0<=实力值<=10000000000)`.\r\n\n## 输出描述\n输出冠亚季军的`id`，用空格隔开\r\n\n## 示例\n### 输入\n```\r\n2 3 4 5\r\n```\n### 输出\n```\r\n3 1 2\r\n```\n### 说明\n第一轮比赛`id`为`0`实力值为`2`的运动员和`id`为`1`实力值为`3`的运动员比赛，`1`号胜出进入下一轮争夺冠亚军。`id`为`2`实力值为`4`的运动员和`id`为`3`实力值为`5`的运动员比赛，`3`号胜出进入下一轮争夺冠亚军。\r\n\n冠亚军比赛，`3`号胜`1`号故冠军为`3`号，亚军为`1`号。\r\n\n`2`号与`0`号，比赛进行季军的争夺，`2`号实力值为`4`，`0`号实力值`2`，故`2`号胜出，得季军。\r\n\n冠亚季军为`3 1 2`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 113,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:57",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:57",
                "updateTime": "2025-06-19 07:27:31",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "odeyh0",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977106665295873",
                "questionNum": "3218",
                "title": "2024D-数组去重和排序",
                "content": "## 题目描述\n给定一个乱序的数组，删除所有的重复元素，使得每个元素只出现一次，并且按照出现的次数**从高到低**进行排序，相同出现次数按照**第一次出现顺序进行先后排序**。\r\n\n## 输入描述\n一个数组\r\n\n## 输出描述\n去重排序后的数组\r\n\n## 补充说明\n数组大小不超过`100`，数组元素值大小不超过`100`\r\n\n## 示例\n### 输入\n```\r\n1,3,3,3,2,4,4,4,5\r\n```\n### 输出\n```\r\n3,4,1,2,5\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 170,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:57",
                "updateTime": "2025-06-20 16:40:55",
                "tagList": [
                    "华为OD",
                    "排序"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "tnf91l",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977106866622465",
                "questionNum": "3219",
                "title": "2024D-高效货运",
                "content": "## 题目描述\n老李是货运公司承运人，老李的货车额定载货重量为`wt`。\r\n\n现有两种货物，货物`A`单件重量为`wa`，单件运费利润为`pa`。货物`B`单件重量为`wb`，单件运费利润为`pb`。\r\n\n老李每次发车时**载货总重量刚好为货车额定载货重量**`wt`，车上必须同时有货物`A`和货物`B`，货物`A`、`B` 不可切割。\r\n\n老李单车次满载运输可获得的最高利润是多少？\r\n\n## **输入描述**\n输入一行五个正整数。\r\n\n第一个数字为货物`A`的单件重量`wa`，`0<wa<10000`\r\n\n第二个数字为货物`B`的单件重量`wb`，`0<wb<10000`\r\n\n第三个数字为货车的额定载重`wt`，`0<wt<100000`\r\n\n第四个数字为货物`A`的单件运费利润`pa`，`0<pa<1000`\r\n\n第五个数字为货物`B`的单件运费利润`pb`，`0<pb<1000`\r\n\n## **输出描述**\n单次满载运输的最高利润\r\n\n## **示例一**\n### **输入**\n```\r\n10 8 36 15 7\r\n```\n### **输出**\n```\r\n44\r\n```\n### **说明：**\n运送`2`个`A`货物，`2`个`B`货物。\r\n\n## **示例二**\n### **输入**\n```\r\n1 1 2 1 1\r\n```\n### **输出**\n```\r\n2\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 106,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:57",
                "updateTime": "2025-06-20 10:05:09",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "zrlmbm",
                "hasChoiceQuestion": false
            }
        ],
        "total": "209",
        "size": "20",
        "current": "2",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "11"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814977107084726273",
                "questionNum": "3220",
                "title": "2023B-统计监控",
                "content": "## 题目描述\n在一长方形停车场内，每个车位上方都有对应监控器，当且仅当在当前车位或者前后左右四个方向任意一个车位范围停车时，监控器才需要打开，给出某一时刻停车场的停车分布，请统计最少需要打开多少个监控器。\r\n\n## 输入\n第一行输入 `m`，`n` 表示长宽，满足 `1 < m, n <= 20`；后面输入 `m` 行，每行有 `n` 个 `0` 或 `1` 的整数，整数间使用一个空格隔开，表示该行已停车情况，其中 `0`表示空位，`1` 表示已停。\r\n\n## 输出\n最少需要打开监控器的数量。\r\n\n## 示例一\n### 输入\n```\r\n3 3\r\n0 0 0\r\n0 1 0\r\n0 0 0\r\n```\n### 输出\n```\r\n5\r\n```\n## 示例二\n### 输入\n```\r\n3 3\r\n1 0 0\r\n0 1 0\r\n0 0 0\r\n```\n### 输出\n```\r\n6\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 94,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:57",
                "updateTime": "2025-06-25 12:27:31",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "dzwqh6",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977107327995906",
                "questionNum": "3221",
                "title": "2023B-磁盘容量",
                "content": "磁盘的容量单位常用的有 `M`、`G`、`T`。他们之间的换算关系为 `1T =1024G`，`1G=1024M`。现在给定 `n` 块磁盘的容量，请对他们按从小到大的顺序进行稳定排序。\r\n\n例如给定 `5` 块盘的容量`1T`、`20M`、`3G`、`10G6T`、`3M12G9M`，排序后的结果为`20M`、`3G`、`3M12G9M`、`1T`、`10G6T`。注意单位可以重复出现上述`3M12G9M`表示的容量即为`3M12G9M`和`12M12G`相等。\r\n\n所谓稳定排序，指的是对于大小相同的元素，应该按照元素在原先数组中的位置进行排序。\r\n\n## 输入\n输入第一行包含一个整数`n`，`2 <= n <= 100`，表示磁盘的个数。\r\n\n接下来的 `n` 行，每行一个字符串，`2 < 长度 < 30`，表示磁盘的容量，由一个或多个格式为`MV`的子串组成，其中`M`表示容量大小，`V`表示容量单位，例如`20M`、`1T`。\r\n\n磁盘容量的范围是`1 ~ 1024`的正整数，单位`M`、`G`、`T`。\r\n\n## 输出\n输出`n`行，表示`n`块磁盘容量排序后的结果\r\n\n## 示例一\n### 输入\n```\r\n3\r\n1G\r\n2G\r\n1024M\r\n```\n### 输出\n```\r\n1G\r\n1024M\r\n2G\r\n```\n### 说明\n稳定排序要求相等值保留原来位置。\r\n\n## 示例二\n### 输入\n```\r\n3\r\n2G4M\r\n3M2G\r\n1T\r\n```\n### 输出\n```\r\n3M2G\r\n2G4M\r\n1T\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 105,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:57",
                "updateTime": "2025-06-25 13:26:16",
                "tagList": [
                    "华为OD",
                    "排序"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "uuwthh",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977107487379457",
                "questionNum": "3222",
                "title": "2024D-螺旋数字矩阵",
                "content": "## 题目描述\n疫情期间，小明隔离在家，百无聊赖，在纸上写数字玩。\r\n\n他发明了一种写法：给出数字个数`n`和行数`m` `(0 < n < 999，0 < m < 999)`，从左上角的`1`开始，按照顺时针螺旋向内写方式，依次写出`2, 3, ..., n`，最终形成一个`m`行矩阵。\r\n\n小明对这个矩阵有些要求：\r\n\n1. 每行数字的个数一样多\r\n2. 列的数量尽可能少\r\n3. 填充数字时优先填充外部\r\n4. 数字不够时，使用单个`*`号占位\r\n\n## 输入描述\n两个整数，空格隔开，依次表示`n`、`m`\r\n\n## 输出描述\n符合要求的唯一短阵\r\n\n## 示例\n### 输入\n```\r\n9 4\r\n```\n### 输出\n```\r\n1 2 3\r\n* * 4\r\n9 * 5\r\n8 7 6\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 172,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:57",
                "updateTime": "2025-06-16 11:02:21",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "vewh9a",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977107663540226",
                "questionNum": "3223",
                "title": "2023B-五子棋迷",
                "content": "## 题目描述\n张兵和王武是五子棋迷，工作之余经常切磋棋艺。这不，这会儿又下起来了。走了一会儿，轮张兵了，对着一条线思考起来了，这条线上的棋子分布如下\r\n\n用数组表示：`-1 0 1 1 1 0 1 0 1 1`\r\n\n棋子分布说明：\r\n\n1. `-1`代表白子，`0`代表空位，`1` 代表黑子\r\n2. 数组长度`L`，满足`1 < L < 40`，且`L`为奇数\r\n\n你得帮他写一个程序，算出**最有利的出子位置**。最有利定义\r\n\n1. 找到一个空位(`0`)，用棋子(`1/-1`)填充该位置，可以使得当前子的最大连续长度变大\r\n2. 如果存在多个符合要求的位置，返回最靠近中间的较小的那个坐标；\r\n3. 如果不存在可行位置，直接返回`-1`:\r\n4. 连续长度不能超过`5`个(五字棋约束)\r\n\n## 输入描述\n第一行: 当前出子颜色\r\n\n第二行: 当前的棋局状态\r\n\n## 输出描述\n`1`个整数，表示出子位置的数组下标\r\n\n## 示例一\n### 输入\n```\r\n1\r\n-1 0 1 1 1 0 1 0 1 -1 1\r\n```\n### 输出\n```\r\n5\r\n```\n### 说明\n当前为黑子 (`1`)，放置在下标为`5`的位置，黑子的最大连续长度由`3`变成为`5`，由下标`2`到`6`构成\r\n\n## 示例二\n### 输入\n```\r\n-1\r\n-1 0 1 1 1 0 1 0 1 -1 1\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n当前为白子，唯一可以放置的位置下标为`1`，白子的最大长度，由`1`变为`2`\r\n\n## 示例三\n### 输入\n```\r\n1\r\n0 0 0 0 1 0 0 0 0 1 0\r\n```\n### 输出\n```\r\n5\r\n```\n### 说明\n可行的位置很多，`5`最接近中间的位置坐标\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 127,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:57",
                "updateTime": "2025-06-20 15:33:15",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "y4ecbk",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977107856478209",
                "questionNum": "3224",
                "title": "2024D-字符串分割（二）",
                "content": "## 题目描述\n给定一个非空字符串`S`，其被`N`个`'-'`分隔成`N+1`的子串，给定正整数`K`，要求除第一个子串外，其余的子串每`K`个字符组成新的子串，并用`'-'`分隔。对于新组成的每一个子串，如果它含有的小写字母比大写字母多，则将这个子串的所有大写字母转换为小写字母;\r\n\n反之，如果它含有的大写字母比小写字母多，则将这个子串的所有小写字母转换为大写字母，大小写字母的数量相等时，不做转换。\r\n\n## 输入描述\n输入为两行，第一行为参数`K`，第二行为字符串`S`.\r\n\n## 输出描述\n输出转换后的字符串。\r\n\n## 示例一\n### 输入\n```\r\n3\r\n12abc-abCABc-4aB@\r\n```\n### 输出\n```\r\n12abc-abc-ABC-4aB-@\r\n```\n### 说明\n子串为`12abc`、`abCABc`、`4aB@`，第一个子串保留,后面的子串每`3`个字符一组为`abC`、`ABc`、`4aB`、`@`。\r\n\n`abC`中小写字母较多，转换为`abc`\r\n\n`ABc`中大写字母较多，转换为`ABC`\r\n\n`4aB`中大小写字母都为`1`个，不做转换\r\n\n`@`中没有字母\r\n\n连起来即`12abc-abc-ABC-4aB-@`\r\n\n## 示例二\n### 输入\n```\r\n12\r\n12abc-abCABc-4aB@\r\n```\n### 输出\n```\r\n12abc-abCABc4aB@\r\n```\n### 说明\n子串为`12abc`、`abCABc`、`4aB@`，第一个子串保留，后面的子串每`12`个字符一组为`abCABc4aB@`。这个子串中大小写字母都为`4`个，不做转换，连起来即`12abc-abCABc4aB@`。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 184,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:57",
                "updateTime": "2025-06-23 13:45:23",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "1saygu",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977108028444673",
                "questionNum": "3225",
                "title": "2024D-整数分解&2024D-数的分解",
                "content": "## 题目描述\n一个整数可以由连续的自然数之和来表示。\r\n\n给定一个整数，计算该整数有几种连续自然数之和的表达式，\r\n\n并打印出每一种表达式。\r\n\n## 输入描述\n一个目标整数 `t`，`1 <= t <= 1000`\r\n\n## 输出描述\n1. 该整数的所有表达式和表达式的个数，如果有多种表达式，自然数个数最少的表达式优先输出\r\n2. 每个表达式中按自然数递增输出\r\n3. 具体的格式参见样例\r\n4. 在每个测试数据结束时，输出一行 `Result:X`\r\n5. 其中 X 是最终的表达式个数\r\n\n## 示例一\n### 输入\n```\r\n9\r\n```\n### 输出\n```\r\n9=9\r\n9=4+5\r\n9=2+3+4\r\nResult:3\r\n```\n### 说明\n整数 `9` 有三种表达方法\r\n\n## 示例二\n### 输入\n```\r\n10\r\n```\n### 输出\n```\r\n10=10\r\n10=1+2+3+4\r\nResult:2\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 76,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:57",
                "updateTime": "2025-06-25 20:02:26",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "qi5i4y",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977108196216833",
                "questionNum": "3226",
                "title": "2024D-绘图机器",
                "content": "## 题目描述\n绘图机器的绘图笔初始位置在原点`(0,0)`，机器启动后其绘图笔按下面规则绘制直线：\r\n\n1) 尝试沿着横向坐标轴正向绘制直线，直到给定的终点值`E`。\r\n\r\n2) 期间可通过指令在纵坐标轴方向进行偏移，并同时绘制直线，偏移后按规则`1`绘制直线。\r\n\n指令的格式为`X offsetY`，表示在横坐标`X`沿纵坐标方向偏移，`offsetY`为正数表示正向偏移，为负数表示负向偏移。\r\n\n给定了横坐标终点值`E`、以及若干条绘制指令，请计算绘制的直线和横坐标轴、以及 `X=E` 的直线组成图形的面积。\r\n\n## 输入描述\n首行为两个整数 `N E`，表示有`N`条指令，机器运行的横坐标终点值`E`。\r\n\n接下来`N`行，每行两个整数表示一条绘制指令`X offsetY`，用例保证横坐标`X`以递增排序方式出现，且不会出现相同横坐标`X`。\r\n\n取值范围:`0 < N <= 10000, 0 <= X <= E <= 20000, -10000 <= offsetY <= 10000`。\r\n\n## 输出描述\n一个整数，表示计算得到的面积，用例保证，结果范围在`0~4294967295`内\r\n\n## 示例\n### 输入\n```\r\n4 10\r\n1 1\r\n2 1\r\n3 1\r\n4 -2\r\n```\n### 输出\n```\r\n12\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 113,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:57",
                "updateTime": "2025-06-24 04:35:35",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "gwougn",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977108363988993",
                "questionNum": "3227",
                "title": "2023B-敏感字段加密",
                "content": "## 题目描述\n给定一个由多个命令字组成的命令字符串；\r\n\n1. 字符串长度小于等于`127`字节，只包含**大小写字母，数字，下划线和偶数个双引号**\r\n2. 命令字之间以一个或多个下划线`_`进行分割\r\n3. 可以通过两个双引号`\"\"`来标识包含下划线_的命令字或空命令字（仅包含两个双引号的命令字），双引号不会在命令字内部出现\r\n\n请对指定索引的敏感字段进行加密，替换为`******`（6 个`*`）， 并删除命令字前后多余的下划线`_`。 如果无法找到指定索引的命令字，输出字符串`ERROR`\r\n\n## 输入描述\n输入为两行 第一行为命令字索引`K`（从`0`开始） 第二行为命令字符串`S`\r\n\n## 输出描述\n输出处理后的命令字符串 如果无法找到指定索引的命令字，输出字符串`ERROR`\r\n\n## 示例一\n### 输入\n```\r\n1\r\npassword_a12345678_timeout_100\r\n```\n### 输出\n```\r\npassword_******_timeout_100\r\n```\n### 说明\n## 示例二\n### 输入\n```\r\n2\r\naaa_password_\"a12_45678\"_timeout_100_\"\"_\r\n```\n### 输出\n```\r\naaa_password_******_timeout_100_\"\"\r\n```\n### 说明\n`\"a12_45678\"`为包含双引号的命令字，需要整体替换。原字符串中末尾的`\"_\"`需要删除。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 93,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-24 17:48:54",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "vnou93",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977108535955458",
                "questionNum": "3228",
                "title": "2023B-查字典",
                "content": "## 题目描述\n输入一个单词前缀和一个字典，输出包含该前缀的单词。\r\n\n## 输入\n单词前缀+字典长度+字典。字典是一个有序单词数组。输入输出都是小写\r\n\n## 输出\n所有包含该前缀的单词，多个单词换行输出\r\n\n若没有则返回`-1`\r\n\n## 示例一\n### 输入\n```\r\nb 3 a b c\r\n```\n### 输出\n```\r\nb\r\n```\n## 示例二\n### 输入\n```\r\nabc 4 a ab abc abcd\r\n```\n### 输出\n```\r\nabc\r\nabcd\r\n```\n## 示例三\n### 输入\n```\r\na 3 b c d\r\n```\n### 输出\n```\r\n-1\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 135,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-19 22:16:50",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ye8f4p",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977108712116225",
                "questionNum": "3229",
                "title": "2023B-矩阵稀疏扫描",
                "content": "## 题目描述\n如果矩阵中的许多系数都为零，那么该矩阵就是稀疏的。对稀疏现象有兴趣是因为它的开发可以带来巨大的计算节省，并且在许多大的实践中都会出现矩阵稀疏的问题。\r\n\n给定一个矩阵，现在需要逐行和逐列地扫描矩阵，如果某一行或者某一列内，出现的`0`的个数超过了行宽或者列宽的一半 （`W // 2`整除)，则认为该行或者该列是稀疏的。\r\n\n扫描给定的矩阵，输出稀疏的行数和列数\r\n\n## 输入描述\n第一行输入为`N`和`M`，表示矩阵的大小`N * M`，`0 < M <= 100`，`0 < N <= 100`\r\n\n接下来`N`行输入为矩阵的成员，每行`M`个成员，知阵成员都是有符号整数，范围 `-32768-32767`\r\n\n## 输出描述\n输出两行，第一行表示稀疏行的个数，第二行表示稀疏列的个数\r\n\n## 示例一\n### 输入\n```\r\n3 3\r\n1 0 0\r\n0 1 0\r\n0 0 1\r\n```\n### 输出\n```\r\n3\r\n3\r\n```\n### 说明\n## 示例二\n### 输入\n```\r\n5 3\r\n0 0 1\r\n0 0 0\r\n-1 0 0\r\n0 -1 0\r\n0 0 0\r\n```\n### 输出\n```\r\n5\r\n3\r\n```\n### 说明\n给定的`5 * 3`矩阵，每行里面`0`的个数大于等于`1`表示稀疏行，每列里面`0`的个数大于等于`2`表示稀疏行，所以有`5`个稀疏行，`3`个稀疏列\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 71,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-16 21:25:28",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "v3hng6",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977108917637121",
                "questionNum": "3230",
                "title": "2024D-简易内存池",
                "content": "## 题目描述\n请实现一个简易内存池,根据请求命令完成内存分配和释放。\r\n\n内存池支持两种操作命令，`REQUEST`和`RELEASE`，其格式为:\r\n\n`REQUEST=请求的内存大小` 表示请求分配指定大小内存，如果分配成功，返回分配到的内存首地址；如果内存不足，或指定的大小为`0`，则输出`error`\r\n\n`RELEASE=释放的内存首地址` 表示释放掉之前分配的内存，释放成功无需输出，如果释放不存在的首地址则输出`error`。\r\n\n注意:\r\n\n1. 内存池总大小为`100`字节。\r\n2. 内存池地址分配必须是连续内存，并优先从低地址分配。\r\n3. 内存释放后可被再次分配，已释放的内存在空闲时不能被二次释放。\r\n4. 不会释放已申请的内存块的中间地址。\r\n5. 释放操作只是针对首地址所对应的单个内存块进行操作，不会影响其它内存块。\r\n\n## 输入描述\n首行为整数`N`，表示操作命令的个数，取值范围`0<N<=100`。\r\n\n接下来的`N`行，每行将给出一个操作命令，操作命令和参数之间用`\"=\"`分割。\r\n\n## 输出描述\n见题面输出要求\r\n\n## 示例一\n### 输入\n```\r\n2\r\nREQUEST=10\r\nREQUEST=20\r\n```\n### 输出\n```\r\n0\r\n10\r\n```\n## 示例二\n### 输入\n```\r\n5\r\nREQUEST=10\r\nREQUEST=20\r\nRELEASE=20\r\nRELEASE=10\r\nREQUEST=10\r\n```\n### 输出\n```\r\n0\r\n10\r\nerror\r\n10\r\n```\n## 示例三\n### 输入\n```\r\n6\r\nREQUEST=10\r\nREQUEST=20\r\nRELEASE=0\r\nREQUEST=1\r\nREQUEST=10\r\nREQUEST=9\r\n```\n### 输出\n```\r\n0\r\n10\r\n0\r\n30\r\n1\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 137,
                "thumbNum": 0,
                "favourNum": 3,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-20 00:08:36",
                "tagList": [
                    "华为OD",
                    "系统设计"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "jujy3z",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977109148323842",
                "questionNum": "3231",
                "title": "2023B-矩阵最大值",
                "content": "## 题目描述\n给定一个仅包含`0`和`1`的`N*N`二维矩阵，请计算二维矩阵的最大值，计算规则如下:\r\n\n1. 每行元素按下标顺序组成一个二进制数(下标越大越排在低位)，二进制数的值就是该行的值，矩阵各行值之和为矩阵的值。\r\n2. 允许通过向左或向右整体循环移动每行元素来改变各元素在行中的位置\r\n\n比如:\r\n\n`[1,0,1,1,1]`向右整体循环移动`2`位变为`[1,1,1,0,1]`，二进制数为`11101`，值为`29`\r\n\n`[1,0,1,1,1]`向左整体循环移动`2`位变为`[1,1,1,1,0]`，二进制数为`11110`，值为`30`。\r\n\n## 输入描述\n1、输入的第一行为正整数，记录了`N`的大小，`0 < N <= 20`\r\n\n2、输入的第`2`到`N+1`行为二维矩阵信息，行内元素 边角逗号分隔。\r\n\n## 输出描述\n矩阵的最大值。\r\n\n## 示例一\n### 输入\n```\r\n5\r\n1,0,0,0,1\r\n0,0,0,1,1\r\n0,1,0,1,0\r\n1,0,0,1,1\r\n1,0,1,0,1\r\n```\n### 输出\n```\r\n122\r\n```\n### 说明\n第一行向右整体循环移动`1`位，得到本行的最大值`[1,1,0,0,0]`，二进制值为`11000`，十进制值为`24`。\r\n\n第二行向右整体循环移动`2`位，得到本行的最大值`[1,1,0,0,0]`，二进制值为`11000`，十进制值为`24`。\r\n\n第三行向左整体循环移动`1`位，得到本行的最大值`[1,0,1,0,0]`，二进制值为`10100`，十进制值为`20`。\r\n\n第四行向右整体循环移动`2`位，得到本行的最大值`[1,1,1,0,0]`，二进制值为`11100`，十进制值为`28`。\r\n\n第五行向右整体循环移动`1`位，得到本行的最大值`[1,1,0,1,0]`，二进制值为`11010`，十进制值为`26`。\r\n\n因此，矩阵的最大值为`122`.\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 122,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-24 13:39:55",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "f2dbqr",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977109320290306",
                "questionNum": "3232",
                "title": "2023B-字符串加密",
                "content": "## 题目描述\n给你一串末加密的字符串`str`，通过对字符串的每一个字母进行改变来实现加密，加密方式是在每一字母`str[i]`偏移特定数组元素`a[i]`的量，数组`a`前三位已经赋值：`a[0]=1,a[1]=2,a[2]=4`。\r\n\n当`i>=3`时，数组元素`a[i]=a[i-1]+a[i-2]+a[i-3]`。\r\n\n例如: 原文 `abcde` 加密后 `bdgkr`，其中偏移量分别是`1,2,4,7,13`。\r\n\n## 输入描述\n第一行为一个整数`n (1<=n<=1000)`，表示有`n`组测试数据，每组数据包含一行，原文`str`(只含有小写字母，`0<长度<=50`)。\r\n\n## 输出描述\n每组测试数据输出一行，表示字符串的密文\r\n\n## 示例一\n### 输入\n```\r\n1\r\nxy\r\n```\n### 输出\n```\r\nya\r\n```\n### 说明\n第一个字符`x`偏移量是`1`，即为`y`，第二个字符`y`偏移量是`2`，即为`a`。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 106,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-17 08:18:42",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "wl7a2h",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977109479673858",
                "questionNum": "3233",
                "title": "2024D-整数对最小和",
                "content": "## 题目描述\n给定两个整数数组`array1`、`array2`，数组元素按升序排列。假设从`array1`、`array2`中分别取出一个元素可构成一对元素，现在需要取出`k`对元素，并对取出的所有元素求和计算和的最小值。\r\n\n注意：两对元素如果对应于`array1`、`array2`中的两个下标均相同，则视为同一对元素。\r\n\n### 输入描述\n输入两行数组`array1`、`array2`，每行首个数字为数组大小`size(0 < size <= 100)`\r\n\n`0 < array1[i] <= 1000`\r\n\n`0 < array2[i] <= 1000`\r\n\n接下来一行为正整数`k`\r\n\n`0 < k <= array1.size()*array2.size()`\r\n\n### 输出描述\n满足要求的最小和\r\n\n## **示例**\n### **输入**\n```\r\n3 1 1 2\r\n3 1 2 3\r\n2\r\n```\n### **输出**\n```\r\n4\r\n```\n### **说明**\n用例中，需要取`2`对元素\r\n\n取第一个数组第`0`个元素与第二个数组第`0`个元素组成`1`对元素`[1,1]`;\r\n\n取第一个数组第`1`个元素与第二个数组第`0`个元素组成`1`对元素`[1,1]`;\r\n\n求和为`1+1+1+1=4`，为满足要求的最小和。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 118,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-17 08:48:40",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "i3psn9",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977109651640322",
                "questionNum": "3234",
                "title": "2023B-数大雁",
                "content": "## 题目描述\n一群大雁往南飞，给定一个字符串记录地面上的游客听到的大雁叫声，请给出叫声最少由几只大雁发出。\r\n\n具体的：\r\n\n1. 大雁发出的完整叫声为 `\"quack\"`，因为有多只大雁同一时间嘎嘎作响，所以字符串中可能会混合多个`\"quack\"`。\r\n2. 大雁会依次完整发出`\"quack\"`，即字符串中 `\"q\" ,\"u\", \"a\", \"c\", \"k\"` 这 5 个字母按顺序完整存在才能计数为一只大雁。如果不完整或者没有按顺序则不予计数。\r\n3. 如果字符串不是由`\"q\" ,\"u\", \"a\", \"c\", \"k\"`字符组合而成，或者没有找到一只大雁，请返回`-1`。\r\n\n## 输入\n一个字符串，包含大雁 `quack` 的叫声。`1 <= 字符串长度 <= 1000`，字符串中的字符只有 `\"q\" ,\"u\", \"a\", \"c\", \"k\"`。\r\n\n## 输出\n大雁的数量\r\n\n## 示例一\n### 输入\n```\r\nquackquack\r\n```\n### 输出\n```\r\n1\r\n```\n## 示例二\n### 输入\n```\r\nqaauucqcaa\r\n```\n### 输出\n```\r\n-1\r\n```\n## 示例三\n### 输入\n```\r\nquacqkuackquack\r\n```\n### 输出\n```\r\n2\r\n```\n## 说明\n用不同的颜色表示同一只大雁，`quacqkuackquack`，最少需要`2`只大雁。\r\n\n以下情况都是`2`只大雁。\r\n\n`quacqkuackquack`\r\n\n`quacqkuacqkuack`\r\n\n`quacqkuaqckuack`\r\n\n`quacqkuqackuack`\r\n\n`quacqkquackuack`\r\n\n以下情况需要`3`只大雁。\r\n\n`quacqqkuackuack`\r\n\n`quaqcqkuackuack`\r\n\n## 示例四\n### 输入\n```\r\nquacqkuquacqkacuqkackuack\r\n```\n### 输出\n```\r\n3\r\n```\n## 说明\n用不同的颜色表示同一只大雁，quacqkuquacqkacuqkackuack，最少需要`3`只大雁。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 127,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-19 21:26:32",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "nviq5l",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977109819412482",
                "questionNum": "3235",
                "title": "2024D-学生重新排队",
                "content": "## 题目描述\n`m`个学生排成一排，学生编号分别是`1`到`m`，`m`为`3`的整倍数。\r\n\n老师随机抽签决定将所有学生分成`n`个`3`人的小组，`m=3*n`为了便于同组学生交流，老师决定将小组成员安排到一起，也就是同组成员彼此相连，同组任意两个成员之间无其它组的成员。\r\n\n因此老师决定调整队伍，老师每次可以调整任何一名学生到队伍的任意位置，计为调整了一次，请计算最少调整多少次可以达到目标。\r\n\n注意：对于小组之间没有顺序要求，同组学生之间没有顺序要求\r\n\n## 输入描述\n两行字符串，空格分隔表示不同的学生编号。\r\n\n第一行是学生目前排队情况，第二行是随机抽签分组情况，从左开始每`3`个元素为一组`n`为学生的数量，`m`的范围为`[3，900]`，`m`一定为`3`的整数倍。第一行和第二行的元素个数一定相同。\r\n\n## 输出描述\n老师调整学生达到同组彼此相连的最小次数\r\n\n## 备注\n同组相连: 同组任意两个成员之间无其它组的成员 ，比如有两个小组`[4 5 6]`、`[1 2 3]`，以下结果都满足要求\r\n\n`1 2 3 4 5 6`\r\n\n`1 3 2 4 5 6`\r\n\n`2 3 1 5 6 4`\r\n\n`5 6 4 1 2 3`\r\n\n以下结果不满足要求\r\n\n`1 2 4 3 5 6`，`4`与`5`之间存在其它组的成员`3`\r\n\n## 示例一\n### 输入\n```\r\n7 9 8 5 6 4 2 1 3\r\n7 8 9 4 2 1 3 5 6\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n学生目前排队情况：`7 9 8 5 6 4 2 1 3`\r\n\n学生分组情况：`[7 8 9]`、`[4 2 1]`、`[3 5 6]`\r\n\n将`3`调整到`4`之前，队列调整为`7 9 8 5 6 3 4 2 1`\r\n\n那么三个小组成员均彼此相连`[7 9 8]`、`[5 6 3]`、`[4 2 1]`\r\n\n输出：`1`\r\n\n## 示例二\n### 输入\n```\r\n1 4 7 2 5 8 3 6 9\r\n1 2 3 4 5 6 7 8 9\r\n```\n### 输出\n```\r\n4\r\n```\n### 说明\n第一次移动：1 4 2 5 8 3 6 7 9\r\n\n第二次移动：1 4 2 5 3 6 7 8 9\r\n\n第三次移动：1 2 5 3 4 6 7 8 9\r\n\n第四次移动：1 2 3 4 5 6 7 8 9\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 140,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-25 17:20:31",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "p7x3dm",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977110029127682",
                "questionNum": "3236",
                "title": "2024D-文件缓存系统",
                "content": "## 题目描述\n请设计一个文件缓存系统，该文件缓存系统可以指定缓存的最大值(单位为字节)。文件缓存系统有两种操作：存储文件（`put`）和读取文件（`get`）\r\n\n操作命令为`put fileName fileSize`或者`get fileName`\r\n\n存储文件是把文件放入文件缓存系统中；读取文件是从文件缓存系统中访问已存在的文件，如果文件不存在，则不作任何操作。\r\n\n当缓存空间不足以存放新的文件时，根据规则删除文件，直到剩余空间满足新的文件大小为止，再存放新文件。\r\n\n具体的删除规则为：文件访问过后，会更新文件的最近访问时间和总的访问次数，当缓存不够时，按照第一优先顺序为访问次数从少到多，第二顺序为时间从老到新的方式来删除文件。\r\n\n## 输入描述\n第一行为缓存最大值`m`(整数，取值范围为`0 < m <= 52428800`)\r\n\n第二行为文件操作序列个数`n`(`0 <= n <= 300000`）\r\n\n从第三行起为文件操作序列，每个序列单独一行\r\n\n文件操作定义为`\"op fileName fileSize\"`\r\n\n`fileName`是文件名，`fileSize`是文件大小\r\n\n## 输出描述\n输出当前文件缓存中的文件名列表，文件名用英文逗号分隔，按字典顺序排序\r\n\n如：`a,c`\r\n\n如果文件缓存中没有文件，则输出`NONE`\r\n\n## 补充说明\n1. 如果新文件的文件名和文件缓存中已有的文件名相同，则不会放在缓存中\r\n2. 新的文件第一次存入到文件缓存中时，文件的总访问次数不会变化，文件的最近访问时间会更新到最新时间\r\n3. 每次文件访问后，总访问次数加`1`，最近访问时间更新到最新时间\r\n4. 任何两个文件的最近访问时间不会重复\r\n5. 文件名不会为空，均为小写字母，最大长度为`10`\r\n6. 缓存空间不足时，不能存放新文件\r\n7. 每个文件大小都是大于`0`的整数\r\n\n## 示例一\n### 输入\n```\r\n50\r\n6\r\nput a 10\r\nput b 20\r\nget a\r\nget a\r\nget b\r\nput c 30\r\n```\n### 输出\n```\r\na,c\r\n```\n## 示例二\n### 输入\n```\r\n50\r\n7\r\nput a 10\r\nput b 20\r\nget a\r\nget a\r\nget b\r\nget b\r\nput c 30\r\n```\n### 输出\n```\r\nb,c\r\n```\n## 示例三\n### 输入\n```\r\n60\r\n7\r\nput a 10\r\nput b 20\r\nget a\r\nget a\r\nget b\r\nput c 30\r\nget c\r\n```\n### 输出\n```\r\na,b,c\r\n```\n## 示例四\n### 输入\n```\r\n60\r\n0\r\n```\n### 输出\n```\r\nNONE\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 190,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-25 20:02:30",
                "tagList": [
                    "华为OD",
                    "系统设计"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "lqfou0",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977110217871362",
                "questionNum": "3237",
                "title": "2023B-拔河比赛",
                "content": "## 题目描述\n公司最近准备进行拔河比赛，需要在全部员工中进行挑选选拔的规则如下\r\n\n1. 按照身高优先、体重次优先的方式准备比赛阵容\r\n2. 规定参赛的队伍派出`10`名选手\r\n\n请实现一个选拔队员的小程序\r\n\n输入为一个数组，记录了部门人员的身高、体重信息，部门全部成员数量为大于`10`。要求输出一个`size`为`10`的二维数组\r\n\n## 输入描述\n输入为`N`行员工信息，表示部门报名参加选拔的候选人信息，每行有两个数字，使用空格分隔，表示员工的身高、体重信息\r\n\n如\r\n\n`181 70`\r\n\n`182 70`\r\n\n表示两位候选员工，第一人身高`181`厘米，体重`70`公斤；第二人身高`182`厘米，体重`70`公斤\r\n\n## 输出描述\n要求输出一个`10`行的已经排序的参赛员工信息数据，每行有两个数字，使用空格分隔，表示员工的身高、体重信息如\r\n\n`182 70`\r\n\n`181 70`\r\n\n备注：\r\n\n输入数据范围\r\n\n成员身高、体重为`int`数据类型\r\n\n输入备选成员数量为`N`，`10 <= N <= 100`\r\n\n## 示例一\n### 输入\n```\r\n181 70\r\n182 70\r\n183 70\r\n184 70\r\n185 70\r\n186 70\r\n180 71\r\n180 72\r\n180 73\r\n180 74\r\n180 75\r\n```\n### 输出\n```\r\n186 70\r\n185 70\r\n184 70\r\n183 70\r\n182 70\r\n181 70\r\n180 75\r\n180 74\r\n180 73\r\n180 72\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 144,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-23 22:21:13",
                "tagList": [
                    "华为OD",
                    "排序"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "c516ft",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977110377254913",
                "questionNum": "3238",
                "title": "2023B-最远足迹",
                "content": "## 题目描述\n某探险队负责对地下洞穴进行探险。探险队成员在进行探险任务时，随身携带的记录器会不定期地记录自身的坐标，但在记录的间隙中也会记录其他数据。探索工作结束后,探险队需要获取到某成员在探险过程中相对于探险队总部的最远的足迹位置。\r\n\n1. 仪器记录坐标时,坐标的数据格式为`(x,y)`，如`(1,2)`, `(100,200)`，其中`0<x<1000`，` 0<y<1000`。同时存在非法坐标，如`(01,1)`，`(1,01)`，`(0,100)`属于非法坐标。\r\n2. 设定探险队总部的坐标为`(0,0)`，某位置相对总部的距离为: `x*x+y*y`。\r\n3. 若两个座标的相对总部的距离相同，则第一次到达的坐标为最远的足迹。\r\n4. 若记录仪中的坐标都不合法，输出总部坐标`(0,0)`。\r\n\n备注：不需要考虑双层括号嵌套的情况，比如`sfsdfsd((1,2))`。\r\n\n## 输入描述\n字符串，表示记录仪中的数据。\r\n\n如: `ferga13fdsf3(100,200)f2r3rfasf(300,400)`\r\n\n## 输出描述\n字符串，表示最远足迹到达的坐标。\r\n\n如： `(300,400)`\r\n\n## 示例一\n### 输入\n```\r\nferg(3,10)a13fdsf3(3,4)f2r3rfasf(5,10)\r\n```\n### 输出\n```\r\n(5,10)\r\n```\n## 示例二\n### 输入\n```\r\nasfefaweawfaw(0,1)fe\r\n```\n### 输出\n```\r\n(0,0)\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 67,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-20 15:13:22",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "oxlj9n",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977110515666946",
                "questionNum": "3239",
                "title": "2024D-最低位排序",
                "content": "## 题目描述\n给定一个非空数组(列表)，其中元素数据类型为整型，请按照数组元素十进制最低位从小到大进行排序，十进制最低位相同的元素，相对位置保持不变，当数组元素为负值时，十进制最低位等同于去除符号位后对应十进制值最低位。\r\n\n## 输入描述\n给定一个非空数组，其元素数据类型为`32`位有符号整数，数组长度为`[1,1000]`。\r\n\n## 输出描述\n输出排序后的数组\r\n\n## 示例\n### 输入\n```\r\n1,2,5,-21,22,11,55,-101,42,8,7,32\r\n```\n### 输出\n```\r\n1,-21,11,-101,2,22,42,32,5,55,7,8\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 80,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-24 15:45:18",
                "tagList": [
                    "华为OD",
                    "排序"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "85khzd",
                "hasChoiceQuestion": false
            }
        ],
        "total": "209",
        "size": "20",
        "current": "3",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "11"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814977110704410626",
                "questionNum": "3240",
                "title": "2024D-攀登者1",
                "content": "## 题目描述\n攀登者喜欢寻找各种地图，并且尝试攀登到最高的山峰。\r\n\n地图表示为一维数组，数组的索引代表水平位置，数组的高度代表相对海拔高度。其中数组元素 `0` 代表地面。\r\n\n例如`[0,1,2,4,3,1,0,0,1,2,3,1,2,1,0]`， 代表如下图所示的地图。地图中有两个山脉位置分别为 `1,2,3,4,5`和`8,9,10,11,12,13`，最高峰高度分别为 `4,3`。最高峰位置分别为`3,10`。\r\n\n一个山脉可能有多座山峰（高度大于相邻位置的高度，或在地图边界且高度大于相邻的高度）。\r\n\n```\r\n                4\r\n\r\n              +---+\r\n              |   |\r\n              |   | 3                       3\r\n              |   |\r\n              |   +---+                   +---+\r\n              |       |                   |   |\r\n            2 |       |                 2 |   |     2\r\n              |       |                   |   |\r\n          +---+       |               +---+   |   +---+\r\n          |           |               |       |   |   |\r\n        1 |           | 1           1 |       | 1 |   | 1\r\n          |           |               |       |   |   |\r\n      +---+           +---+       +---+       +---+   +---+\r\n      |                   |       |                       |\r\n    0 |                   | 0   0 |                       | 0\r\n      |                   |       |                       |\r\n  +---+                   +-------+                       +---+\r\n\r\n    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14\r\n```\n登山时会消耗登山者的体力(整数)，上山时，消耗相邻高度差两倍的体力，下坡时消耗相邻高度差一倍的体力，平地不消耗体力，登山者体力消耗到零时会有生命危险。\r\n\n例如，上图所示的山峰：从索引 `0`，走到索引 `1`，高度差为 `1`，需要消耗 `2*1=2` 的体力；从索引 `2` 高度 `2`走到高度 `4` 索引 `3` 需要消耗 `2*2=4` 的体力；从索引 `3` 走到索引 `4` 则消耗 `1*1=1` 的体力。\r\n\n登山者想知道一张地图中有多少座山峰？\r\n\n### 输入描述\n第一行输入一个长度为`N`的数组，表示地图。\r\n\n### 输出描述\n输出一个数字，地图中的山峰数量\r\n\n## **示例**\n### **输入**\n```\r\n0,1,4,3,1,0,0,1,2,3,1,2,1,0\r\n```\n### **输出**\n```\r\n3\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 103,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:58",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-23 05:53:52",
                "tagList": [
                    "华为OD",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "2gtxgw",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977110901542914",
                "questionNum": "3241",
                "title": "2023A-相同数字的积木游戏",
                "content": "## 题目\n小华和小薇一起通过玩积木游戏学习数学。他们有很多积木，每个积木块上都有一个数字，积木块上的数字可能相同。小华随机拿一些积木挨着排成一排，请小薇找到这排积木中数字相同且所处位置最远的 `2` 块积木块，计算他们的距离。小薇请你帮忙替她解决这个问题。\r\n\n## 输入\n第一行输入为 `N` ，表示小华排成一排的积木总数。接下来 `N` 行每行一个数字，表示小花排成一排的积木上数字。\r\n\n## 输出\n相同数字的积木的位置最远距离；如果所有积木数字都不相同，请返回 `-1`\r\n\n## 示例一\n### 输入\n```\r\n5\r\n1\r\n2\r\n3\r\n1\r\n4\r\n```\n### 输出\n```\r\n3\r\n```\n## 示例二\n### 输入\n```\r\n5\r\n1\r\n2\r\n3\r\n1\r\n1\r\n```\n### 输出\n```\r\n4\r\n```\n## 示例三\n### 输入\n```\r\n2\r\n1\r\n2\r\n```\n### 输出\n```\r\n-1\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 91,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-23 21:58:35",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "5ki0la",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977111090286594",
                "questionNum": "3242",
                "title": "2024D-石头剪刀布游戏",
                "content": "## **题目描述**\n石头剪刀布游戏有 3 种出拳形状：石头、剪刀、布。分别用字母 A , B , C 表示。\r\n\n游戏规则:\r\n\n1. 出拳形状之间的胜负规则如下： `A > B`；`B > C`；`C > A`；`\">\"`左边一个字母，表示相对优势形状。右边一个字母，表示相对劣势形状。 \r\n2. 当本场次中有且仅有一种出拳形状优于其它出拳形状，则该形状的玩家是胜利者。否则认为是平局。\r\n3. 当发生平局，没有赢家。有多个胜利者时，同为赢家。\r\n\n例如 1： 三个玩家出拳分别是`A, B, C` ，由于出现三方优势循环(即没有任何一方优于其它出拳者)，判断为平局。\r\n\n例如 2： 三个玩家，出拳分别是 `A, B` ，出拳 `A` 的获胜。\r\n\n例如 3： 三个玩家，出拳全部是 `A` ，判为平局。\r\n\n## **输入描述**\n在一场游戏中，每个玩家的信息为一行。玩家数量不超过 `1000` 。每个玩家信息有 `2` 个字段，用空格隔开： \r\n\n1. 玩家 ID：一个仅由英文字母和数字组成的字符串\r\n2. 出拳形状：以英文大写字母表示, `A 、B 、C` 形状。 例：\r\n\n```\r\nabc1 A\r\nxyz B\r\n```\n解释：玩家 `abc1` 出拳为石头( `A` )。玩家 `xyz` 出拳为剪刀( `B` )\r\n\n## **输出描述**\n输出为赢家的玩家 ID 列表(一个或多个)，每个 ID 一行，按字符串升序排列。如果没有赢家，输出为`\"NULL\"`字符串。例如：\r\n\n```\r\nabc1\r\n```\n## **示例一**\n### **输入**\n```\r\nabc1 A\r\nxyz B\r\n```\n### **输出**\n```\r\nabc1\r\n```\n### **说明**\n`A` 比 `B` 有优势，`abc1` 胜出\r\n\n## **示例二**\n### **输入**\n```\r\nabc1 A\r\nxyz A\r\n```\n### **输出**\n```\r\nNULL\r\n```\n### **说明**\n没有优胜的出拳形状，平局\r\n\n## **示例三**\n### **输入**\n```\r\nabc1 A\r\ndef A\r\nalic A\r\nxyz B\r\n```\n### **输出**\n```\r\nabc1\r\nalic\r\ndef\r\n```\n### **说明**\n`A` 为优胜方，有三个赢家。\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 105,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-20 15:59:51",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "vkqscb",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977111262253058",
                "questionNum": "3243",
                "title": "2024D-测试用例执行计划",
                "content": "## 题目描述\n某个产品当前迭代周期内有 `N` 个特性（`F1, F2, ..., FN`）需要进行覆盖测试，每个特性都被评估了对应的优先级，特性使用其 `ID` 作为下标进行标识。\r\n\n设计了 `M` 个测试用例（`T1, T2, ..., TN` ），每个用例对应了一个覆盖特性的集合，测试用例使用其 `ID` 作为下标进行标识，测试用例的优先级定义为其覆盖的特性的优先级之和。\r\n\n在开展测试之前，需要制定测试用例的执行顺序，规则为：优先级大的用例先执行，如果存在优先级相同的用例，用例 `ID` 小的先执行。\r\n\n## 输入描述\n第一行输入为 `N` 和 `M` ，`N`  表示特性的数量，`M`  表示测试用例的数量，`0＜N<=100` ，`0＜M<=100` \r\n\n之后 `N` 行表示特性 `ID=1` 到特性 `ID=N` 的优先级。\r\n\n再接下来 `M` 行表示测试用例 `ID=1` 到测试用例 `ID=M` 关联的特性的 `ID` 的列表。\r\n\n## 输出描述\n按照执行顺序（优先级从大到小）输出测试用例的 `ID`，每行一个 `ID`。\r\n\n测试用例覆盖的 `ID` 不重复。\r\n\n## 示例一\n### 输入\n```\r\n5 4\r\n1\r\n1\r\n2\r\n3\r\n5\r\n1 2 3\r\n1 4\r\n3 4 5\r\n2 3 4\r\n```\n### 输出\n```\r\n3\r\n4\r\n1\r\n2\r\n```\n### 说明\n测试用例的优先级计算如下：\r\n\n```\r\nT1=Pf1+Pf2+Pf3=1+1+2=4\r\nT2=Pf1+Pf4=1+3=4\r\nT3=Pf3+Pf4+Pf5=2+3+5=10\r\nT4=Pf2+Pf3+Pf4=1+2+3=6\r\n```\n按照优先级从小到大，以及相同优先级，`ID` 小的先执行的规则，执行顺序为 `T3,T4,T1,T2`\r\n\n## 示例二\n### 输入\n```\r\n3 3\r\n3\r\n1\r\n5\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n```\n### 输出\n```\r\n1\r\n2\r\n3\r\n```\n### 说明\n测试用例的优先级计算如下：\r\n\n```\r\nT1=Pf1+Pf2+Pf3=3+1+5=9\r\nT2=Pf1+Pf2+Pf3=3+1+5=9\r\nT3=Pf1+Pf2+Pf3=3+1+5=9\r\n```\n每个优先级一样，按照 `ID` 从小到大执行，执行顺序为 `T1,T2,T3`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 90,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-23 16:39:01",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "xq6hqe",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977111476162562",
                "questionNum": "3244",
                "title": "2023B-恢复数字序列",
                "content": "## 题目描述\n对于一个连续正整数组成的序列，可以将其拼接成一个字符串，再将字符串里的部分字符打乱顺序。如序列`8 9 10 11 12`，拼接成的字符串为`89101112`，打乱一部分字符后得到`90811211`，原来的正整数`10`就被拆成了`0`和`1`。 现给定一个按如上规则得到的打乱字符的字符串，请将其还原成连续正整数序列，并输出序列中最小的数字。\r\n\n## 输入描述\n输入一行，为打乱字符的字符串和正整数序列的长度，两者间用空格分隔，字符串长度不超过`200`，正整数不超过`1000`，保证输入可以还原成唯一序列。\r\n\n## 输出描述\n输出一个数字，为序列中最小的数字。\r\n\n## 示例一\n### 输入\n```\r\n19801211 5\r\n```\n### 输出\n```\r\n8\r\n```\n### 说明\n还原出的序列为 `8 9 10 11 12`，故输出 `8`\r\n\n## 示例二\n### 输入\n```\r\n432111111111 4\r\n```\n### 输出\n```\r\n111\r\n```\n### 说明\n还原出的序列为 `111 112 113 114`，故输出 `111`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 65,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-23 17:28:49",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ogrdkq",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977111669100546",
                "questionNum": "3245",
                "title": "2023B-单词接龙",
                "content": "## 题目描述\n单词接龙的规则是：\r\n\n可用于接龙的单词首字母必须要前一个单词的尾字母相同\r\n\n当存在多个首字母相同的单词时，取长度最长的单词，如果长度也相等，则取字典序最小的单词；已经参与接龙的单词不能重复使用\r\n\n现给定一组全部由小写字母组成单词数组，并指定其中的一个单词作为起始单词，进行单词接龙，\r\n\n请输出最长的单词串，单词串是单词拼接而成，中间没有空格\r\n\n## 输入描述\n输入的第一行为一个非负整数，表示起始单词在数组中的索引`K`，`0 <= K < N` 输入的第二行为一个非负整数，表示单词的个数`N`；接下来的`N`行，分别表示单词数组中的单词\r\n\n备注：\r\n\n单词个数`N`的取值范围为`[1,20]`;\r\n\n单个单词的长度的取值范围为`[1,30]`\r\n\n## 输出描述\n输出一个字符串，表示最终拼接的单词串\r\n\n## 示例一\n### 输入\n```\r\n0\r\n6\r\nword\r\ndd\r\nda\r\ndc\r\ndword\r\nd\r\n```\n### 输出\n```\r\nworddwordda\r\n```\n### 说明\n先确定起始单词`word`，再接以`d`开头的且长度最长的单词`dword`，剩余以`d`开头且长度最长的有`dd、da、dc`，则取字典序最小的`da`，所以最后输出`worddwordda`。\r\n\n## 示例二\n### 输入\n```\r\n4\r\n6\r\nword\r\ndd\r\nda\r\ndc\r\ndword\r\nd\r\n```\n### 输出\n```\r\ndwordda\r\n```\n### 说明\n先确定起始单词`dword`，剩余以d开头且长度最长的有`dd、da.`\r\n\n`dc`，则取字典序最小的`da`，所以最后输出`dwordda。`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 73,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-24 09:17:59",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "7p0k3z",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977111883010049",
                "questionNum": "3246",
                "title": "2023A-明明的随机数",
                "content": "## 题目描述\n明明生成了`N` 个 `1` 至 `500` 之间的随机整数。请你**删去其中重复的数字**，即相同的数字只保留一个，把其余相同的数去掉，然后再把这些数**从小到大排序**，按照排好的顺序输出。\r\n\n数据范围： `1 ≤ N ≤ 1000` ，输入的数字大小 `val` 满足 `1 ≤ val ≤ 500`\r\n\n## 输入描述\n第一行先输入随机整数的个数 `N` 。 接下来的 `N` 行每行输入一个整数，代表明明生成的随机数。\r\n\n## 输出描述：\n输出多行，表示输入数据处理后的结果。\r\n\n## 示例 1\n### 输入\n```\r\n3\r\n2\r\n2\r\n1\r\n```\n### 输出\n```\r\n1\r\n2\r\n```\n### 说明\n输入解释：第一个数字是 `3`，也即这个样例的 `N = 3`，说明用计算机生成了 `3` 个 `1` 到 `500` 之间的随机整数，接下来每行一个输入随机数字，共 `3` 行，也即这 `3` 个随机数字为：`2 2 1`\r\n\n输出解释：`2 2 1`中，出现了重复的`2`，只需要输出一个`2`即可，而且要按照从小到大的顺序输出全部整数，即依次输出`1 2`\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 89,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-24 09:50:28",
                "tagList": [
                    "华为OD",
                    "哈希集合"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "9fy5pv",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977112046587905",
                "questionNum": "3247",
                "title": "2023B-阿里巴巴找黄金宝箱(3)",
                "content": "## 题目描述\n一贫如洗的樵夫阿里巴巴在去砍柴的路上，无意中发现了强盗集团的藏宝地，藏宝地有编号从`0~N`的箱子，每个箱子上面贴有一个数字。\r\n\n阿里巴巴念出一个咒语数字，查看宝箱是否存在两个不同箱子，这两个箱子上贴的数字相同，同时这两个箱子的编号之差的绝对值小于等于咒语数字，如果存在这样的一对宝箱，请返回最先找到的那对宝箱左边箱子的编号，如果不存在则返回`-1`。\r\n\n## 输入描述\n第一行输入一个数字字串，数字之间使用逗号分隔，例如: `1,2,3,1`字串中数字个数`>=1`，`<=100000`; 每人数字值`>=-100000，<=100000`:\r\n\n第二行输入咒语数字，例如: `3`，咒语数字`>=1`，`<=100000`\r\n\n## 输出描述\n存在这样的一对宝箱，请返回最先找到的那对宝箱左边箱子的编号，如果不存在则返回`-1`\r\n\n## 示例一\n### 输入\n```\r\n6,3,1,6\r\n3\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n下标为`0`和`3`的两个元素`6`满足条件，输出较小的下标`0`\r\n\n## 示例二\n### 输入\n```\r\n5,6,7,5,6,7\r\n2\r\n```\n### 输出\n```\r\n-1\r\n```\n### 说明\n数组中没有满足条件的两个元素。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 74,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-24 09:58:59",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "y13sw4",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977112239525889",
                "questionNum": "3248",
                "title": "2023A-删除最少字符",
                "content": "## 题目\n删除字符串`s`中出现次数最少的字符，如果多个字符出现次数一样则都删除。\r\n\n## 输入\n输入只包含小写字母\r\n\n## 输出描述\n输出删除后剩余的字符串；若删除后字符串长度为`0`，则输出字符串`\"empty\"`\r\n\n## 示例一\n### 输入\n```\r\nabcdd\r\n```\n### 输出\n```\r\ndd\r\n```\n## 示例二\n### 输入\n```\r\naabbccdd\r\n```\n### 输出\n```\r\nempty\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 94,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-24 10:16:27",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "r144iy",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977112398909442",
                "questionNum": "3249",
                "title": "2023A-寻找密码",
                "content": "## 题目描述\n小王在进行游戏大闯关，有一个关卡需要输入一个密码才能通过，密码获得的条件如下：在一个密码本中，每一页都有一个由 `26` 个小写字母组成的若干位密码，**从它的末尾开始依次去掉一位得到的新密码也在密码本中存在**。请输出符合要求的**最长密码**，如果由多个符合要求的密码，则返回字典序最大的密码。若没有符合要求的密码，则返回空字符串。\r\n\n## 输入\n密码本由一个字符串数组组成，不同元素之间使用空格隔开，每一个元素代表密码本每一页的密码。\r\n\n## 输出\n一个字符串\r\n\n## 示例一\n### 输入\n```\r\nh he hel hell hello\r\n```\n### 输出\n```\r\nhello\r\n```\n### 说明\n`\"hello\"` 从末尾依次去掉一位得到的 `\"hell\"`, `\"hel\"`, `\"he\"`, `\"h\"`在密码本中都存在。\r\n\n## 示例二\n### 输入\n```\r\nb eredderd bw bww bwwl bwwlm bwwln\r\n```\n### 输出\n```\r\nbwwln\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 69,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:58",
                "updateTime": "2025-06-24 10:21:48",
                "tagList": [
                    "华为OD",
                    "哈希集合"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "oa3byh",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977112570875905",
                "questionNum": "3250",
                "title": "2023B-选修课",
                "content": "## 题目描述\n现有两门选修课，每门选修课都有一部分学生选修，每个学生都有选修课的成绩，需要你找出同时选修了两门选修课的学生，先按照班级进行划分，班级编号小的先输出，每个班级按照两门选修课成绩和的降序排序，成绩相同时按照学生的学号升序排序。\r\n\n## 输入\n第一行为第一门选修课学生的成绩，第二行为第二门选修课学生的成绩，每行数据中学生之间以英文分号分隔，每个学生的学号和成绩以英文逗号分隔，学生学号的格式为 `8` 位数字(`2` 位院系编号+入学年份后 `2` 位+院系内部 `1` 位专业编号+所在班级 `3` 位学号)，学生成绩的取值范围为 `[0,100]` 之间的整数，两门选修课选修学生数的取值范围为 `[1-2000]` 之间的整数。\r\n\n## 输出\n同时选修了两门选修课的学生的学号，如果没有同时选修两门选修课的学生输出 `NULL`，否则，先按照班级划分，班级编号小的先输出，每个班级先输出班级编号(学号前五位)，然后另起一行输出这个班级同时选修两门选修课的学生学号，学号按照要求排序(按照两门选修课成绩和的降序，成绩和相同时按照学号升序)，学生之间以英文分号分隔。\r\n\n## 示例一\n### 输入\n```\r\n01202021,75;01201033,95;01202008,80;01203006,90;01203088,100\r\n01202008,70;01203088,85;01202111,80;01202021,75;01201100,88\r\n```\n### 输出\n```\r\n01202\r\n01202008;01202021\r\n01203\r\n01203088\r\n```\n### 说明\n同时选修了两门选修课的学生 `01202021`、`01202008`、`01203088`，这三个学生两门选修课的成绩和分别为 `150`、`150`、`185`。`01202021`、`01202008` 属于 `01202` 班的学生，按照成绩和降序，成绩相同时按学号升序输出的结果为 `01202008;01202021`。`01203088` 属于 `01203` 班的学生，按照成绩和降序，成绩相同时按学号升序输出的结果为 `01203088`。`01202` 的班级编号小于 `01203` 的班级编号，需要先输出。\r\n\n## 示例二\n### 输入\n```\r\n01201022,75;01202033,95;01202018,80;01203006,90;01202066,100\r\n01202008,70;01203102,85;01202111,80;01201021,75;01201100,88\r\n```\n### 输出\n```\r\nNULL\r\n```\n### 说明\n没有同时选修了两门选修课的学生，输出 `NULL`。\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 109,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-24 17:49:38",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "4ndby7",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977112755425282",
                "questionNum": "3251",
                "title": "2023A-集五福",
                "content": "## 集五福\n## 题目描述\n集五福作为近年来大家喜闻乐见迎新春活动，集合爱国福、富强福、和谐福、友善福、敬业福即可分享超大红包。以 `0` 和 `1` 组成的长度为 `5` 的字符串代表每个人所得到的福卡，每一位代表一种福卡，`1` 表示已经获得该福卡，单类型福卡不超过 `1` 张，随机抽取一个小于 `10` 人团队，求该团队最多可以集齐多少套五福？\r\n\n## 输入描述\n输入若干个由`0`、`1`组成的长度等于`5`的字符串，代表团队中每个人福卡获得情况注意1：`1`人也可以是一个团队注意2：`1`人可以有`0`到`5`张福卡，但福卡不能重复\r\n\n## 输出描述\n输出该团队最多能凑齐多少套五福\r\n\n## 示例一\n### 输入\n```\r\n11001,11101\r\n```\n### 输出\n```\r\n0\r\n```\n## 示例二\n### 输入\n```\r\n11101,10111\r\n```\n### 输出\n```\r\n1\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 92,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-17 10:25:33",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "84cvn4",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977112919003138",
                "questionNum": "3252",
                "title": "2024D-跳房子I",
                "content": "## 题目描述\n跳房子，也叫跳飞机，是一种世界性的儿童游戏。 游戏参与者需要分多个回合按顺序跳到第`1`格直到房子的最后一格\r\n\n跳房子的过程中，可以向前跳，也可以向后跳。\r\n\n假设房子的总格数是`count`，小红每回合可能连续跳的步教都放在数组`steps`中，请问数组中是否有一种步数的组合，可以让小红**两个回合**跳到最后一格? 如果有，请输出索引和最小的步数组合。 \r\n\n注意:\r\n\n- 数组中的步数可以重复，但数组中的元素不能重复使用。\r\n- 提供的数据保证存在满足题目要求的组合，且索引和最小的步数组合是唯一的。\r\n\n## 输入描述\n第一行输入为每回合可能连续跳的步数，它是整数数组类型。\r\n\n第二行输入为房子总格数`count`，它是`int`整数类型。\r\n\n## 输出描述\n返回索引和最小的满足要求的步数组合(顺序保持`steps`中原有顺序)\r\n\n## 备注\n- `count ≤ 1000`\r\n- `0 ≤ steps.length ≤ 5000`\r\n- `-100000000 ≤ steps ≤ 100000000`\r\n\n## 示例一\n### 输入\n```\r\n[1,4,5,2]\r\n7\r\n```\n### 输出\n```\r\n[5,2]\r\n```\n### 说明\n## 示例二\n### 输入\n```\r\n[-1,2,4,9,6]\r\n8\r\n```\n### 输出\n```\r\n[-1,9]\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 101,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-17 10:27:06",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "b8gsu2",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977113095163906",
                "questionNum": "3253",
                "title": "2024D-围棋的气",
                "content": "## 题目描述\n围棋棋盘由纵横各`19`条线垂直相交组成，棋盘上一共`19x19=361`个交点，对弈双方一方执白棋，一方执黑棋，落子时只能将棋子置于交点上。\r\n\n“气”是围棋中很重要的一个概念，某个棋子有几口气，是指其上下左右方向四个相邻的交叉点中，有几个交又点没有棋子，由此可知：\r\n\n1、在棋盘的边缘上的棋子最多有`3`口气（黑`1`），在棋盘角点的棋子最多有`2`口气（黑`2`），其它情况最多有`4`口气（白`1`）\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/zPSh15ix_1721042811302_mianshiya.png)\r\n\n2、所有同色棋子的气之和叫作该色棋子的气，需要注意的是，同色棋子重合的气点，对于该颜色棋子来说，只能计算一次气，比如下图中，黑棋一共`4`口气，而不是`5`口气，因为黑`1`和黑`2`中间红色三角标出的气，是两个黑棋共有的，对于黑棋整体来说只能算一个气。\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/mzpXHeJh_1721042819883_mianshiya.png)\r\n\n3、本题目只计算气，对于眼也按气计算，如果您不清楚“眼”的概念，可忽略。按照前面描述的规则计算即可。\r\n\n现在，请根据输入的黑棋和白棋的坐标位置，计算黑和白棋一共各有多少气?\r\n\n## 输入描述\n输入包括两行数据，如:\r\n\n`0 5 8 9 9 10`\r\n\n`5 0 9 9 9 8`\r\n\n1、每行数据以空格分隔，数据个数是`2`的整数倍，每两个数是一组，代表棋子在棋盘上的坐标\r\n\n2、坐标的原点在棋盘左上角点，第一个值是行号，范围从`0`到`18`；第二个值是列号，范围从`0`到`18`\r\n\n3、举例说明：第一行数据表示三个坐标`(0, 5)`、`(8, 9)`、`(9, 10)`\r\n\n4、第一行表示黑棋的坐标，第二行表示白棋的坐标。\r\n\n5、题目保证输入两行数据，无空行且每行按前文要求是偶数个，每个坐标不会超出棋盘范围。\r\n\n## 输出描述\n`8 7`\r\n\n两个数字以空格分隔，第一个数代表黑棋的气数，第二个数代表白棋的气数。\r\n\n## 示例\n### 输入\n```\r\n0 5 8 9 9 10\r\n5 0 9 9 9 8\r\n```\n### 输出\n```\r\n8 7\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 97,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-24 16:56:10",
                "tagList": [
                    "华为OD",
                    "哈希集合"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ahp2tb",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977113384570882",
                "questionNum": "3254",
                "title": "2023B-找出符合要求的字符串子串",
                "content": "## 题目描述\n给定两个字符串，从字符串`2`中找出字符串`1`中的所有字符，去重并按照`ASCII`值从小到大排序。\r\n\n输入字符串`1`：长度不超过`1024`\r\n\n输入字符串`2`：长度不超过`1000000`\r\n\n字符范围满足`ASCII`编码要求，按照`ASCII`的值由小到大排序\r\n\n## 输入描述\n`bach`\r\n\n`bbaaccedfg`\r\n\n## 输出描述\n`abc`\r\n\n输入字符串`1` 为给定字符串`bach`，输入字符串`2`为`bbaaccedfg`，从字符串`2`中找出字符串`1`的字符，去除重复的字符，并且按照ASCII值从小到大排序，得到输出的结果为`abc`。\r\n\n字符串`1`中的字符`h`在字符串`2`中找不到不输出\r\n\n## 示例一\n### 输入\n```\r\nfach\r\nbbaaccedfg\r\n```\n### 输出\n```\r\nacf\r\n```\n### 说明\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 68,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-17 16:32:31",
                "tagList": [
                    "华为OD",
                    "哈希集合"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "clx0pp",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977113648812033",
                "questionNum": "3255",
                "title": "2024D-最大N个数与最小N个数的和",
                "content": "## 题目描述\n给定一个数组，编写一个函数来计算它的最大`N`个数与最小`N`个数的和。你需要对数组进行去重。\r\n\n## **输入描述**\n第一行输入`M`， `M`标识数组大小\r\n\n第二行输入`M`个数，标识数组内容\r\n\n第三行输入`N`，`N`表达需要计算的最大、最小`N`个数\r\n\n## **输出描述**\n输出最大`N`个数与最小`N`个数的和。\r\n\n## **补充说明**\n数组中数字范围`[0，1000]`\r\n\n最大`N`个数与最小`N`个数不能有重叠，如有重叠返回`-1`\r\n\n## **示例**\n### **输入**\n```\r\n5\r\n95 88 83 64 100\r\n2\r\n```\n### **输出**\n```\r\n342\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 79,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-22 10:54:06",
                "tagList": [
                    "华为OD",
                    "哈希集合"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "5k1c5n",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977113837555714",
                "questionNum": "3256",
                "title": "2023B-斗地主",
                "content": "## 题目描述\n斗地主起源于湖北十堰房县，据传是一位叫吴修全的年轻人根据当地流行的扑克玩法“跑得快”改编的，如今已风靡整个中国，并流行于互联网上。\r\n\n牌型：单顺，又称顺子，最少 `5` 张牌，最多 `12` 张牌( `3...A` )，不能有 `2`，也不能有大小王，不计花色。例如：`3-4-5-7-8`，`7-8-9-10-J-Q`，`3-4-5-6-7-8-9-10-J-Q-K-A`可用的牌 `3<4<5<6<7<8<9<10<J<Q<K<A<2<B(小王)<C(大王)`，每种牌除大小王外有 `4` 种花色(共有 `13X4+2` 张牌)\r\n\n## 输入描述\n1. 手上已有的牌\r\n2. 已经出过的牌(包括对手出的和自己出的牌)\r\n\n## 输出描述\n对手可能构成的最长的顺子（如果有相同长度的顺子，输出牌面最大的那一个)，如果无法构成顺子，则输出 `NO-CHAIN`\r\n\n## 示例一\n### 输入\n```\r\n3-3-3-3-4-4-5-5-6-7-8-9-10-J-Q-K-A\r\n4-5-6-7-8-8-8\r\n```\n### 输出\n```\r\n9-10-J-Q-K-A\r\n```\n## 示例二\n### 输入\n```\r\n3-3-3-3-8-8-8-8\r\nK-K-K-K\r\n```\n### 输出\n```\r\nNO-CHAIN\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 174,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-24 04:35:46",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "pyqd3k",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977114022105089",
                "questionNum": "3257",
                "title": "2023A-寻找关键钥匙",
                "content": "## 题目描述\n小强正在参加《密室逃生》游戏，当前关卡要求找到符合给定密码 `K`（升序的不重复小写字母组成）的箱子，并给出箱子编号，箱子编号为 `1~N`。\r\n\n每个箱子中都有一个字符串 `s`，字符串由大写字母，小写字母，数字，标点符号，空格组成，需要在这些字符串中找出所有的字母，忽略大小写且去重后排列出对应的密码串，并返回匹配密码的箱子序号。\r\n\n注意：满足条件的箱子不超过 `1` 个。\r\n\n## 输入描述\n第一行为表示密码 `K` 的字符串\r\n\n第二行为一系列箱子 `boxes`，为字符串数组样式，以空格分隔\r\n\n箱子 `N` 数量满足 `1<=N<=10000`，代表每一个箱子的字符串 `s` 的长度满足 `0 <= s.length <= 50`，密码为仅包含小写字母的升序字符串，且不存在重复字母，密码 `K` 长度满足`1 <= K.length <= 26`\r\n\n## 输出描述\n返回对应箱子编号，如不存在符合要求的密码箱，则返回`-1`\r\n\n## 补充说明\n箱子中字符拼出的字符串与密码的匹配忽略大小写，且要求与密码完全匹配，如密码 `abc` 匹配 `aBc`，但是密码 `abc` 不匹配 `abcd`\r\n\n## 示例 1\n### 输入\n```\r\nabc\r\ns,sdf134 A2c4b\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n第 2 个箱子中的 `Abc`，符合密码 `abc`\r\n\n## 示例 2\n### 输入\n```\r\nabc\r\ns,sdf134 A2c4bd 523[]\r\n```\n### 输出\n```\r\n-1\r\n```\n### 说明\n第 `2` 个箱子中的 `Abcd`，与密码不完全匹配，不符合要求。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 49,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-17 11:58:43",
                "tagList": [
                    "华为OD",
                    "哈希集合"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ffk7bq",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977114189877250",
                "questionNum": "3258",
                "title": "2024D-内存冷热标记",
                "content": "## 题目描述\n现代计算机系统中通常存在多级的存储设备，针对海量workload的优化的一种思路是将热点内存页优先放到快速存储层级，这就需要对内存页进行冷热标记。\r\n\n一种典型的方案是基于内存页的访问频次进行标记，如果统计窗口内访问次数大于等于设定阈值，则认为是热内存页，否则是冷内存页。\r\n\n对于统计窗口内跟踪到的访存序列和阈值，现在需要实现基于频次的冷热标记。内存页使用页框号作为标识。\r\n\n## 输入描述\n第一行为输入为`N`，表示访存序列的记录条数，`0 < N < 10000`。\r\n\n第二行为访存序列，空格间隔的`N`个内存页框号，页框号范围`0-65535`，同一页框号可能重复出现，出现的次数即为对应页框号的频次。\r\n\n第三行为热内存页的频次阈值`T`，正整数，范围`1 < T < 10000`\r\n\n## 输出描述\n第一行输出标记为热内存的内存页个数，如果没有被标记为热内存的，则输出`0`。\r\n\n如果第一行`>0`，则接下来按照访问频次降序输出内存页框号，一行一个，频次一样的页框号，页框号小的排前面。\r\n\n## 示例\n### 输入\n```\r\n10\r\n1 2 1 2 1 2 1 2 1 2\r\n5\r\n```\n### 输出\n```\r\n2\r\n1\r\n2\r\n```\n### 说明\n内存页`1`和内存页`2`均被访问了`5`次，达到了阈值`5`，因此热内存页有`2`个。内存页`1`和内存页`2`的访问频次相等，页框号小的排前面。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 61,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-23 09:30:21",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "xo4cwg",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977114420563969",
                "questionNum": "3259",
                "title": "2024D-掌握单词个数",
                "content": "## 题目描述\n有一个字符串数组 `words` 和一个字符串 `chars` 。\r\n\n假如可以用 `chars` 中的字母拼写出 `words` 中的某个`“单词”`（字符串），那么我们就认为你掌握了这个单词。\r\n\n`words` 的字符仅由 `a-z` 英文小写字母组成，例如 `“abc”`\r\n\n``chars` 由 `a-z` 英文小写字母和 `“?”` 组成。其中英文问号 `“?”` 表示万能字符，能够在拼写时当做任意一个英文字母。例如：`“?”` 可以当做 `“a”` 等字母。\r\n\n注意：每次拼写时，`chars` 中的每个字母和万能字符都只能使用一次。\r\n\n输出词汇表 `words` 中你掌握的所有单词的个数。没有掌握任何单词，则输出 `0`。\r\n\n### 输入描述\n第 `1` 行输入数组 `words` 的个数，记为 `N`。从第 `2` 行开始到第 `N+1` 行一次输入数组 `words` 的每个字符串元素。第 `N+2` 行输入字符串 `chars`。\r\n\n### 输入描述\n输出一个整数，表示词汇表 `words` 中你掌握的单词个数。\r\n\n## 示例一\n### 输入\n```\r\n4\r\ncat\r\nbt\r\nhat\r\ntree\r\natach\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n`atach`可以拼写出单词`cat`和`hat`，因此掌握的单词是`2`个。\r\n\n## 示例二\n### 输入\n```\r\n4\r\ncat\r\nbt\r\nhat\r\ntree\r\nat?ch\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n`at?ch`可以拼写出单词`cat`、`hat`和`bt`，因此掌握的单词是`3`个。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 67,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-19 18:53:19",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "2zv7fn",
                "hasChoiceQuestion": false
            }
        ],
        "total": "209",
        "size": "20",
        "current": "4",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "11"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814977114600919041",
                "questionNum": "3260",
                "title": "2023A-字符串重新排序",
                "content": "给定一个字符串 `s`，`s` 包含以空格分隔的若干个单词，请对 `s` 进行如下处理后输出：\r\n\n1. 单词内部调整：对每个单词字母重新按字典序排序；\r\n2. 单词间顺序调整：\r\n   - 统计每个单词出现的次数，并按次数降序排列；\r\n   - 次数相同时，按单词长度升序排列；\r\n   - 次数和单词长度均相同时，按字典序升序排列。\r\n\n请输出处理后的字符串，每个单词以一个空格分隔。\r\n\n## 输入描述\n一行字符串，每个字符取值范围：`[a-z, A-Z, 0-9]` 以及空格`\" \"`，字符串长度范围：`[1, 1000]`\r\n\n## 输出描述,\n重新排序后的字符串，每个单词间隔 1 个空格，且首尾无空格\r\n\n## 示例一\n### 输入\n```\r\nThis is an apple\r\n```\n### 输出\n```\r\nan is This aelpp\r\n```\n## 示例二\n### 输入\n```\r\nMy sister is in the house not in the yard\r\n```\n### 输出\n```\r\nin in eht eht My is not adry ehosu eirsst\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 62,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-24 15:11:07",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ydrdbe",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977114764496897",
                "questionNum": "3261",
                "title": "2023A-统计匹配的二元组个数",
                "content": "## 题目\n给定两个数组 `A` 和 `B`，若数组 `A` 的某个元素 `A[i]` 与数组 `B` 中的某个元素 `B[j]` 满足 `A[i]==B[j]`，则寻找到一个匹配的二元组`(i,j)` ，请统计再这两个数组 `A` 和 `B` 中，一共存在多少个这样的二元组。\r\n\n## 输入描述\n第一行输入数组 `A` 的长度 `M` ；第一行输入数组 `B` 的长度 `N` ；第三行输入数组 `A` 的值；第四行输入数组 `B` 的值。`1 ≤ M, N ≤ 100000``A`，`B` 数组中数值的取值均小于 `100000`\r\n\n## 输出描述\n输出匹配的二元组个数\r\n\n## 示例一\n### 输入\n```\r\n5\r\n4\r\n1 2 3 4 5\r\n4 3 2 1\r\n```\n### 输出\n```\r\n4\r\n```\n### 说明\n若下标从 `0` 开始，则匹配的二元组分别为`(0,3)`，`(1,2)`，`(2,1)`，`(3,0)`，共计 `4` 对二元组。\r\n\n## 示例二\n### 输入\n```\r\n6\r\n3\r\n1 2 4 4 2 1\r\n1 2 3\r\n```\n### 输出\n```\r\n4\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 44,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:53:59",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-19 21:04:12",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "yvcac4",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977114936463361",
                "questionNum": "3262",
                "title": "2024D-CPU算力分配",
                "content": "## 题目描述\n现有两组服务器`A`和`B`，每组有多个算力不同的CPU，其中`Ai`是`A`组第`i`个CPU的运算能力，`Bi`是`B`组第`i`个CPU的运算能力。一组服务器的总算力是各CPU的算力之和。\r\n\n为了让两组服务器的算力相等，**允许从每组各选出一个CPU进行一次交换**，求两组服务器中，用于交换的CPU的算力，并且要求从`A`组服务器中选出的CPU，算力尽可能小。\r\n\n## 输入描述\n第一行输入为`L1`和`L2`，以空格分隔，`L1`表示`A`组服务器中的CPU数量，`L2`表示`B`组服务器中的CPU数量\r\n\n第二行输入为`A`组服务器中各个CPU的算力值，以空格分隔。\r\n\n第三行输入为`B`组服务器中各个CPU的算力值，以空格分隔。\r\n\n`1 <= L1 <= 10000`\r\n\n`1 <= L2 <= 10000`\r\n\n`1 <= A[i] <= 100000`\r\n\n`1 <= B[i] <= 100000`\r\n\n## 输出描述\n对于每组测试数据，输出两个整数，以空格分隔，依次表示`A`组选出的CPU算力、`B`组选出的CPU算力，要求从`A`组选出的CPU的算力尽可能小。\r\n\n## 补充说明\n保证两组服务器的初始总算力不同，答案肯定存在。\r\n\n## 示例一\n### 输入\n```\r\n2 2\r\n1 1\r\n2 2\r\n```\n### 输出\n```\r\n1 2\r\n```\n## 示例二\n### 输入\n```\r\n3 4\r\n1 2 3\r\n1 2 3 4\r\n```\n### 输出\n```\r\n1 3\r\n```\n## 说明\n有两种可能的选择，选择`A`组中的`1`和`B`组中的`3`进行交换，或者选择`A`组中的`2`和`B`组中的`4`进行交换，但由于要求`A`组选择的算力要尽可能地小，所以选择前者。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 82,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-19 21:10:33",
                "tagList": [
                    "华为OD",
                    "哈希集合"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "2vm4ub",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977115100041218",
                "questionNum": "3263",
                "title": "2024D-密码解密",
                "content": "## 题目描述\n给定一段\"密文\"字符串`s`，其中字符都是经过\"密码本\"映射的，现需要将\"密文\"解密并且输出。\r\n\n映射的规则 ：`\"a-i\"`分别用`\"1-9\"`表示，`\"j-z\"` 分别用`\"10*-26*\"`表示\r\n\n约束：映射始终唯一\r\n\n## 输入描述\n“密文”字符串\r\n\n## 输出描述\n明文字符串\r\n\n## 补充说明\n翻译后的文本的长度在`100`以内\r\n\n## 示例一\n### 输入\n```\r\n20*19*20*\r\n```\n### 输出\n```\r\ntst\r\n```\n## 示例二\n### 输入\n```\r\n12320*12319*20*\r\n```\n### 输出\n```\r\nabctabcst\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 97,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-24 16:36:22",
                "tagList": [
                    "华为OD",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "5osom4",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977115318145026",
                "questionNum": "3264",
                "title": "2024D-英文输入法",
                "content": "## 题目\n主管期望你来实现英文输入法单词联想功能，需求如下：\r\n\n1. 依据用户输入的单词前缀，从已输入的英文语句中联想出用户想输入的单词。\r\n2. 按字典序输出联想到的单词序列，如果联想不到，请输出用户输入的单词前缀。\r\n\n注意：\r\n\n1. 英文单词联想时区分大小写\r\n2. 缩略形式如`\"don't\"` 判定为两个单词`\"don\"`和 `\"t\"`\r\n3. 输出的单词序列不能有重复单词，且只能是英文单词，不能有标点符号\r\n\n## 输入\n输入两行。\r\n\n首行输入一段由英文单词`word`和`标点`构成的语句`str`，接下来一行为一个英文单词前缀`pre`。\r\n\n`0 < word.length() <= 20`，`0 < str.length() <= 10000`，`0 < pre.length() <= 20`\r\n\n## 输出\n输出符合要求的单词序列或单词前缀。存在多个时，单词之间以单个空格分割\r\n\n## 示例一\n### 输入\n```\r\nI love you\r\nHe\r\n```\n### 输出\n```\r\nHe\r\n```\n### 说明\n用户已输入单词语句`\"I love you\"`，可以提炼出`\"I\"`,`\"love\"`,`\"you\"`三个单词。接下来用户输入`\"He\"` ，从已经输入信息中无法联想到符合要求的单词，所以输出用户输入的单词前缀。\r\n\n## 示例二\n### 输入\n```\r\nThe furthest distance in the world,Is not between life and death,But when I stand in front or you,Yet you don't know that I love you.\r\nf\r\n```\n### 输出\n```\r\nfront furthest\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 82,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-19 21:37:50",
                "tagList": [
                    "华为OD",
                    "哈希集合"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "v0i9i0",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977115498500097",
                "questionNum": "3265",
                "title": "2023A-寻找链表的中间节点",
                "content": "## 题目描述\n给定一个单链表`L`，请编写程序输出`L`中间节点保存的数据。\r\n\n如果有两个中间节点，则输出第二个中间节点保存的数据。\r\n\n例如：\r\n\n给定`L`为`1→7→5`，则输出应该为`7`；\r\n\n给定`L`为`1→2→3→4`，则输出应该为`3`.\r\n\n## 输入描述\n每个输入包含`1`个测试用例。每个测试用例第一行给出链表首节点的地址、节点总个数为正整数`N` (`N≤105`）。\r\n\n节点的地址是`5`位非负整数，`NULL`地址用`-1`表示。\r\n\n接下来有`N`行，每行格式为：\r\n\n`Address` `Data` `Next`\r\n\n其中`Adress`是节点地址，`Data`是该节点保存的 整数数据，`Next`是下一个节点的地址。\r\n\n## 输出描述\n对每个测试用例，在一行中输出`L`中间节点保存的数据。\r\n\n如果有两个中间节点，则输出第二个中间节点保存的数据。\r\n\n补充说明：\r\n\n以确保输入的节点所构成的链表`L`不会成环，但会存在部分输入节点不属于链表`L`的情况\r\n\n## 示例一\n### 输入\n```\r\n00100 4\r\n00000 4 -1\r\n00100 1 12309\r\n33218 3 00000\r\n12309 2 33218\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n链表为 `1->2->3->4`，中间节点为`3`\r\n\n## 示例二\n### 输入\n```\r\n10000 3\r\n76892 7 12309\r\n12309 5 -1\r\n10000 1 76892\r\n```\n### 输出\n```\r\n7\r\n```\n### 说明\n链表为 `1->7->5`，中间节点为`7`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 57,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-20 11:03:52",
                "tagList": [
                    "华为OD",
                    "链表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "8r5my7",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977115737575426",
                "questionNum": "3266",
                "title": "2024D-篮球游戏",
                "content": "## 题目描述\n幼儿园里有一个放倒的圆桶，它是一个线性结构，允许在桶的右边将篮球放入，可以在桶的左边和右边将篮球取出。每个篮球有单独的编号，老师可以连续放入一个或多个篮球，小朋友可以在桶左边或右边将篮球取出，当桶里只有一个篮球的情况下，必须从左边取出。\r\n\n如老师按顺序放入`1、2、3、4、5` 共`5`个编号的篮球，那么小朋友可以依次取出的编号为`1、2、3、4、5`或者`3、1、2、4、5`编号的篮球，无法取出`5、1、3、2、4`编号的篮球\r\n\n其中`3、1、2、4、5`的取出场景为: 连续放入`1、2、3`号 -> 从右边取出`3`号 -> 从左边取出`1`号 -> 从左边取出`2`号 -> 放入`4`号 -> 从左边取出`4`号 -> 放入`5`号>从左边取出`5`号，简单起见，我们以`L`表示左，`R`表示右，此时的篮球的依次取出序列为`\"RLLLL\"`\r\n\n## 输入描述\n每次输入包含一个测试用例:\r\n\n1、第一行的数字作为老师依次放入的篮球编号\r\n\n2、第二行的数字作为要检查是否能够按照放入顺序取出的篮球编号\r\n\n其中篮球编号用逗号进行分隔。\r\n\n## 输出描述\n对于每个篮球的取出序列，如果确实可以获取，请打印出其按照左右方向的操作的取出顺序，如果无法获取则打印`\"NO\"`\r\n\n## 备注\n1、`1 <= 篮球的编号，篮球个数 <= 200`;\r\n\n2、篮球上的数字不重复\r\n\n3、输出的结果中`LR`的必须为大写:\r\n\n## 示例\n### 输入\n```\r\n4,5,6,7,0,1,2\r\n6,4,0,1,2,5,7\r\n```\n### 输出\n```\r\nRLRRRLL\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 61,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-20 13:37:57",
                "tagList": [
                    "华为OD",
                    "队列"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "95egys",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977115947290626",
                "questionNum": "3267",
                "title": "2023B-不开心的小朋友",
                "content": "## 题目描述\n游乐场里增加了一批摇摇车，非常受小朋友欢迎，但是每辆摇摇车同时只能有一个小朋友使用，如果没有空余的摇摇车需要排队等候，或者直接离开，最后没有玩上的小朋友会非常不开心。\r\n\n请根据今天小朋友的来去情况，统计不开心的小朋友数量。\r\n\n1. 摇摇车数量为`N`，范围是: `1 <= N < 10`;\r\n2. 每个小朋友都对应一个编码，编码是不重复的数字，今天小朋友的来去情况，可以使用编码表示为:`1 1 2 3 2 3`。(若小朋友离去之前有空闲的摇摇车，则代表玩耍后离开；不考虑小朋友多次玩的情况)。`小朋友数量≤ 100`\r\n3. 题目保证所有输入数据无异常且范围满足上述说明\r\n\n## 输入描述\n第一行: 摇摇车数量\r\n\n第二行: 小朋友来去情况\r\n\n## 输出描述\n返回不开心的小朋友数量\r\n\n## 示例一\n### 输入\n```\r\n1\r\n1 2 1 2\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n第一行，1个摇摇车第二行，1号来 2号来(排队) 1号走 2号走(1号走后摇摇车已有空闲，所以玩后离开)\r\n\n## 示例二\n### 输入\n```\r\n1\r\n1 2 2 3 1 3\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n第一行，1个摇摇车第二行，1号来 2号来(排队) 2号走(不开心离开) 3号来(排队)1号走 3号走(1号走后摇摇车已有空闲，所以玩后离)\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 87,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-23 19:56:26",
                "tagList": [
                    "华为OD",
                    "队列"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "07al7g",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977116173783042",
                "questionNum": "3268",
                "title": "2024D-提取字符串中最长数学表达式",
                "content": "## 题目描述\n提取字符串中的最长合法简单数学表达式，字符串长度最长的，并计算表达式的值。如果没有，则返回`0`。\r\n\n简单数学表达式只能包含以下内容：`0-9`数字，符号 `+-*`\r\n\n说明：\r\n\n1. 所有数字，计算结果都不超过`long`\r\n2. 如果有多个长度一样的，请返回第一个表达式的结果\r\n3. 数学表达式，必须是最长的，合法的\r\n4. 操作符不能连续出现，如 `+--+1` 是不合法的\r\n\n## 输入描述\n字符串\r\n\n## 输出描述\n表达式值\r\n\n## 示例\n### 输入\n```\r\n1+2abcd\r\n```\n### 输出\n```\r\n-1\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 66,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-25 16:43:05",
                "tagList": [
                    "华为OD",
                    "双指针"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "mjjp0b",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977116442218498",
                "questionNum": "3269",
                "title": "2023A-两数之和绝对值最小",
                "content": "## 题目描述\n给定一个整数数组`nums`，请你在该数组中找出两个数，使得这两个数的和的绝对值`abs(nums[x] + nums[y])`为最小值并按从小到大返回这两个数以及它们和的绝对值。每种输入只会对应一个答案。数组中同一个元素不能使用两遍。\r\n\n## 输入\n一个通过空格分割的整数序列字符串，最多`1000`个整数，且整数数值范围是`[-65535,65535]`\r\n\n## 输出\n两个数以及两数之和绝对值\r\n\n## 示例一\n### 输入\n```\r\n-1 -3 7 5 11 15\r\n```\n### 输出\n```\r\n-3 5 2\r\n```\n### 说明\n因为`abs(nums[0]+nums[2]) = abs(-3+5) = 2`在所有数对中最小，所以返回`-3 5 2`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 56,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-25 22:20:47",
                "tagList": [
                    "华为OD",
                    "双指针"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "4qb9s6",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977116618379266",
                "questionNum": "3270",
                "title": "2023A-双十一",
                "content": "## 题目描述\n双十一众多商品进行打折销售，小明想购买一些自己心仪的商品，但由于受购买资金限制，所以他决定从众多心意商品中购买 `3` 件，而且想尽可能的花完资金，现在请你设计一个程序帮助小明计算尽可能花费的最大资金额。\r\n\n## 输入\n第一行为整型数组 `M`，数组长度小于`100`，数组元素记录单个商品的价格；单个商品价格小于`1000`；第二行输入为购买资金的额度`R`，`R < 100000`。\r\n\n## 输出\n输出为满足上述条件的最大花费额度如果不存在满足上述条件的商品请返回`-1`\r\n\n## 示例一\n### 输入\n```\r\n23,26,36,27\r\n78\r\n```\n### 输出\n```\r\n76\r\n```\n## 示例二\n### 输入\n```\r\n23,30,40\r\n26\r\n```\n### 输出\n```\r\n-1\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 71,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:53:59",
                "updateTime": "2025-06-25 22:30:47",
                "tagList": [
                    "华为OD",
                    "双指针"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "m45ndm",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977116819705858",
                "questionNum": "3271",
                "title": "2023B-太阳能航天器",
                "content": "## 题目描述\n给航天器一侧加装长方形或正方形的太阳能板（图中的红色斜线区域），需要先安装两个支柱（图中的黑色竖条）,再在支柱的中间部分固定太阳能板。但航天器不同位置的支柱长度不同，太阳能板的安装面积受限于最短一侧的那根支柱长度。如图：\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/nVCpFCjN_1721043178332_mianshiya.png)\r\n\n现提供一组整形数组的支柱高度数据，假设每根支柱间距离相等为`1`个单位长度，计算如何选择两根支柱可以使太阳能板的面积最大。\r\n\n## 输入描述\n`10,9,8,7,6,5,4,3,2,1`\r\n\n注：支柱至少有`2`根，最多`10000`根，能支持的高度范围`1~10^9`的整数。柱子的高度是无序的，例子中递减只是巧合。\r\n\n## 输出描述\n可以支持的最大太阳能板面积：\r\n\n如：`25`（`10`米高支柱和`5`米高支柱之间）\r\n\n## 示例一\n### 输入\n```\r\n10,9,8,7,6,5,4,3,2,1\r\n```\n### 输出\n```\r\n25\r\n```\n### 说明\n## 示例二\n### 输入\n```\r\n1,7,5,9\r\n```\n### 输出\n```\r\n14\r\n```\n### 说明\n`7*2=14`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 56,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-25 22:45:30",
                "tagList": [
                    "华为OD",
                    "双指针"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "oq4jyk",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977117046198273",
                "questionNum": "3272",
                "title": "2024D-跳房子II",
                "content": "## 题目描述\n跳房子，也叫跳飞机，是一种世界性的儿童游戏。\r\n\n游戏参与者需要分多个回合按顺序跳到第`1`格直到房子的最后一格，然后获得一次选房子的机会，直到所有房子都被选完，房子最多的人获胜。\r\n\n跳房子的过程中，如果有踩线等违规行为会结束当前回合，甚至可能倒退几步。\r\n\n假设房子的总格数是`count`，小红每回合可能连续跳的步数都放在数据`steps`中，请问数组中是否有一种步数的组合，可以让小红三个回合跳到最后一格？如果有，请输出索引和最小的步数组合，数据保证索引和最小的步数组合是唯一的。\r\n\n注意：数组中的步数可以重复，但数组中的元素不能重复使用。\r\n\n## 输入描述\n第一行输入为房子总格数`count`，它是整数类型`int`。\r\n\n第二行输入为每回合可能连续跳过的步数，它是整数数组类型。\r\n\n## 输出描述\n返回索引和最小满足要求的步数组合。\r\n\n注意：顺序保持`steps`中的原有顺序。\r\n\n## 备注\n- count <= 10000；\r\n- 3 <= steps.length <= 10000；\r\n- -100000 <= steps[i] <= 100000；\r\n\n## 示例一\n### 输入\n```\r\n1,4,5,2,0,2\r\n9\r\n```\n### 输出\n```\r\n4,5,0\r\n```\n### 说明\n## 示例二\n### 输入\n```\r\n1,5,2,0,2,4\r\n9\r\n```\n### 输出\n```\r\n5,2,2\r\n```\n## 示例三\n### 输入\n```\r\n-1,2,4,9\r\n12\r\n```\n### 输出\n```\r\n-1,4,9\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 79,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-18 15:07:36",
                "tagList": [
                    "华为OD",
                    "双指针"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "w5zbbv",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977117352382466",
                "questionNum": "3274",
                "title": "2024D-火星文计算2",
                "content": "## 题目描述\n已知火星人使用的运算符号为 `#` 、`$`\r\n\n他们与地球人的等价公式如下：\r\n\n- `x#y = 4*x+3*y+2`\r\n- `x$y = 2*x+y+3`\r\n\n其中 `x` `y` 是无符号整数\r\n\n地球人公式按照 C 语言规则进行计算\r\n\n火星人公式中 `#` 符优先级高于 `$`\r\n\n相同的运算符按从左到右的顺序运算\r\n\n## 输入描述\n火星人字符串表达式结尾不带回车换行\r\n\n**输入的字符串说明**：\r\n\n字符串为仅有无符号整数和操作符组成的计算表达式\r\n\n1. 用例保证字符串中操作数与操作符之间没有任何分隔符\r\n2. 用例保证操作数取值范围为 `32` 位无符号整数\r\n3. 保证输入以及计算结果不会出现整型溢出\r\n4. 保证输入的字符串为合法的求值报文例如: `123#4$5#76$78`\r\n5. 保证不会出现非法的求值报文\r\n\n例如：\r\n\n- `#4$5` 这种缺少操作数；\r\n- `4$5#` 这种缺少操作数；\r\n- `4#$5` 这种缺少操作数；\r\n- `4 $5` 有空格；\r\n- `3+4-5*6/7` 有其他操作符；\r\n- `12345678987654321$54321` 32 位整数溢出\r\n\n## 输出描述\n根据火星人字符串输出计算结果，结尾不带回车换行\r\n\n## 示例\n### 输入\n```\r\n7#6$5#12\r\n```\n### 输出\n```\r\n157\r\n```\n### 说明\n```\r\n7#6$5#12=(4*7+3*6+2)$5#12\r\n        =48$5#12\r\n        =48$(4*5+3*12+2)\r\n        =48$58\r\n        =2*48+58+3\r\n        =157\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 74,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-25 17:20:41",
                "tagList": [
                    "华为OD",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "79cziy",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977117515960322",
                "questionNum": "3275",
                "title": "2023A-投篮大赛",
                "content": "## 题目描述\n你现在是一场采用特殊赛制投篮大赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 `ops`，其中 `ops[i]` 是你需要记录的第 `i` 项操作，`ops` 遵循下述规则：\r\n\n1. 整数 `x` 表示本回合新获得分数 `x`\r\n2. `+` 表示本回合新获得的得分是前两次得分的总和。\r\n3. `D` 表示本回合新获得的得分是前一次得分的两倍。\r\n4. `C` 表示本回合没有分数，并且前一次得分无效，将其从记录中移除。\r\n\n请你返回记录中所有得分的总和。\r\n\n## 输入\n输入为一个字符串数组\r\n\n## 输出描述\n输出为一个整形数字\r\n\n## 备注\n1. `1 ≤ ops.length ≤ 1000`\r\n2. `ops[i]` 为 `C`、`D`、`+`，或者一个表示`整数`的字符串。整数范围是 `[−3×10^4,3×10^4]`\r\n3. 需要考虑异常的存在，如有异常情况，请返回`-1`：\r\n4. 对于 `+` 操作，题目数据不保证记录此操作时前面总是存在两个有效的分数\r\n5. 对于 `C` 和 `D` 操作，题目数据不保证记录此操作时前面存在一个有效的分数\r\n6. 题目输出范围不会超过整型的最大范围\r\n\n## 示例一\n### 输入\n```\r\n5 2 C D +\r\n```\n### 输出\n```\r\n30\r\n```\n### 说明\n`5` 记录加 `5` ，记录现在是 `[5]`\r\n\n`2` 记录加 `2` ，记录现在是 `[5, 2]`\r\n\n`C` 使前一次得分的记录无效并将其移除，记录现在是 `[5]`.\r\n\n`D` 记录加 `2 * 5 = 10` ，记录现在是 `[5, 10]`.\r\n\n`+` 记录加 `5 + 10 = 15` ，记录现在是 `[5, 10, 15]`.\r\n\n所有得分的总和 `5 + 10 + 15 = 30`\r\n\n## 示例二\n### 输入\n```\r\n5 -2 4 C D 9 + +\r\n```\n### 输出\n```\r\n27\r\n```\n### 说明\n`5` 记录加 `5` ，记录现在是 `[5]`\r\n\n`-2` 记录加 `-2` ，记录现在是 `[5, -2]`\r\n\n`4` 记录加 `4` ，记录现在是 `[5, -2, 4]`\r\n\n`C` 使前一次得分的记录无效并将其移除，记录现在是 `[5, -2]`\r\n\n`D` 记录加 `2 * -2 = -4` ，记录现在是 `[5, -2, -4]`\r\n\n`9` 记录加 `9` ，记录现在是 `[5, -2, -4, 9]`\r\n\n`+` 记录加 `-4 + 9 = 5` ，记录现在是 `[5, -2, -4, 9, 5]`\r\n\n`+` 记录加 `9 + 5 = 14` ，记录现在是 `[5, -2, -4, 9, 5, 14]`\r\n\n所有得分的总和 `5 + -2 + -4 + 9 + 5 + 14 = 27`\r\n\n## 示例三\n### 输入\n```\r\n1\r\n```\n### 输出\n```\r\n1\r\n```\n## 示例四\n### 输入\n```\r\n+\r\n```\n### 输出\n```\r\n-1\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 104,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-23 21:44:15",
                "tagList": [
                    "华为OD",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "z79sxj",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977117742452737",
                "questionNum": "3276",
                "title": "2023B-阿里巴巴找黄金宝箱(4)",
                "content": "一贫如洗的椎夫阿里巴巴在去砍柴的路上，无意中发现了强盗集团的藏宝地，藏宝地有编号从 `0-N` 的子，每个箱子上面有一个数字，箱子排列成一个环，编号最大的箱子的下一个是编号为 `0` 的箱子。请输出每个箱子贴的数字之后的第一个比它大的数，如果不存在则输出`-1`。\r\n\n## 输入\n输入一个数字字串，数字之间使用逗号分隔，例如: `1,2,3,1`；`1 ≤ 字串中数字个数 ≤ 10000`；`-100000≤ 每个数字值 ≤100000`\r\n\n## 输出\n下一个大的数列表，以逗号分隔，例如: `2,3,6,-1,6`\r\n\n## 示例一\n### 输入\n```\r\n2,5,2\r\n```\n### 输出\n```\r\n5,-1,5\r\n```\n### 说明\n第一个 `2` 的下一个更大的数是 `5` \r\n\n数字 `5` 找不到下一个更大的数\r\n\n第二个 `2` 的下一个最大的数需要循环搜索，结果也是 `5`\r\n\n## 示例二\n### 输入\n```\r\n3,4,5,6,3\r\n```\n### 输出\n```\r\n4,5,6,-1,4\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 80,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-24 13:32:53",
                "tagList": [
                    "华为OD",
                    "单调栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "fahdt4",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977117889253378",
                "questionNum": "3277",
                "title": "2024D-找最小数",
                "content": "## 题目描述\n给一个正整数 `NUM1`，计算出新正整数 `NUM2`。`NUM2` 为 `NUM1` 中移除 `N` 位数字后的结果，需要使得 `NUM2` 的值最小。\r\n\n## 输入\n1. 输入的第一行为一个字符串，字符串由 `0-9` 字符组成，记录正整数 `NUM1`，`NUM1` 长度小于 `32`。\r\n2. 输入的第二行为需要移除的数字的个数，小于 `NUM1` 长度。\r\n\n## 输出\n输出一个数字字符串，记录最小值 `NUM2`。\r\n\n## 示例一\n### 输入\n```\r\n2615371\r\n4\r\n```\n### 输出\n```\r\n131\r\n```\n### 说明\n移除 `2`、`6`、`5`、`7` 这四个数字，剩下 `1`、`3`、`1` 按原有顺序排列组成 `131` 为最小值。\r\n\n## 示例二\n### 输入\n```\r\n12345\r\n2\r\n```\n### 输出\n```\r\n123\r\n```\n## 示例三\n### 输入\n```\r\n10345\r\n2\r\n```\n### 输出\n```\r\n034\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 84,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-18 18:36:39",
                "tagList": [
                    "华为OD",
                    "单调栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "9gjy43",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977118061219841",
                "questionNum": "3278",
                "title": "2023A-删除重复数字后的最大数字",
                "content": "## 题目\n一个长整型数字，消除重复的数字后，得到最大的一个数字。\r\n\n如 `12341` ，消除重复的 `1`，可得到 `1234` 或 `2341`，取最大值 `2341`。\r\n\n如 `42234`，消除 `4` 得到 `4223` 或者 `2234` ，再消除 `2`，得到 `423` 或 `234`，取最大值 `423`。\r\n\n## 输入\n输入一个数字，范围 `[1, 100000]`\r\n\n## 输出\n输出经过删除操作后的最大值\r\n\n## 示例一\n### 输入\n```\r\n12341\r\n```\n### 输出\n```\r\n2341\r\n```\n## 示例二\n### 输入\n```\r\n42234\r\n```\n### 输出\n```\r\n423\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 57,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-20 13:38:11",
                "tagList": [
                    "华为OD",
                    "单调栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "xtwor3",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977118317072386",
                "questionNum": "3279",
                "title": "2023A-天然蓄水池",
                "content": "## 题目描述\n公元 2919 年，人类终于发现了一颗宜居星球——X 星。现想在 X 星一片连绵起伏的山脉间建一个天热蓄水库，如何选取水库边界，使蓄水量最大？\r\n\n山脉用正整数数组 `s` 表示，每个元素代表山脉的高度。选取山脉上两个点作为蓄水库的边界，则边界内的区域可以蓄水，蓄水量需排除山脉占用的空间。蓄水量的高度为两边界的最小值。\r\n\n如果出现多个满足条件的边界，应选取距离最近的一组边界。\r\n\n输出边界下标（从 `0` 开始）和最大蓄水量；如果无法蓄水，则返回 `0`，此时不返回边界。\r\n\n例如，当山脉为 `s=[3,1,2]`时，则选取 `s[0]`和 `s[2]`作为水库边界，最大蓄水量为 `1`，此时输出：`0 2:1`\r\n\n当山脉 `s = [3,2,1]`时，不存在合理的边界，此时输出 `0`。\r\n\n## 输入描述\n一行正整数，用空格隔开，例如输入`1 2 3`表示 `s = [1,2,3]`\r\n\n## 输出描述\n当存在合理的水库边界时，输出**左边界、空格、右边界、英文冒号、蓄水量**，例如`0 2:1`当不存在合理的水库边界时，输出 `0`。\r\n\n## 说明\n数组 `s` 满足：`1 <= length(s) <= 10000`，`0 <= s[i] <= 10000`\r\n\n## 示例一\n### 输入\n```\r\n1 9 6 2 5 4 9 3 7\r\n```\n### 输出\n```\r\n1 6:19\r\n```\n### 说明\n经过分析，选取 `s[1]`和 `s[6]` 时，水库蓄水量为 `3+7+4+5 = 19` 为最大蓄水量\r\n\n## 示例二\n### 输入\n```\r\n1 8 6 2 5 4 8 3 7\r\n```\n### 输出\n```\r\n1 6:15\r\n```\n### 说明\n经过分析，选取 `s[1]` 和 `s[8]` 时，水库蓄水量为 `15`；同样选取 `s[1]`和 `s[6]`时，水库蓄水量也为 `15`。由于后者下标距离小（为 `5`），故应选取后者。\r\n\n## 示例三\n### 输入\n```\r\n1 2 3\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n不存在合理的水库边界。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 64,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-18 16:23:26",
                "tagList": [
                    "华为OD",
                    "单调栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "kfev3b",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977118589702146",
                "questionNum": "3280",
                "title": "2024D-回转寿司",
                "content": "## 题目描述\n寿司店周年庆，正在举办优惠活动回馈新老客户寿司转盘上总共有`n`盘寿司，`prices[i]`是第 `i` 盘寿司的价格，如果客户选择了第 `i`盘寿司，寿司店免费赠送客户距离第 `i` 盘寿司最近的下一盘寿司 `j`，前提是`prices[j] < prices[i]`，如果没有满足条件的 `j`，则不赠送寿司。每个价格的寿司都可无限供应。\r\n\n## 输入描述\n输入的每一个数字代表每盘寿司的价格，每盘寿司的价格之间使用空格分隔寿司的盘数 `n`范围为: `1 <= n <= 500`\r\n\n## 输出描述\n输出享受优惠后的一组数据，每个值表示客户选择第`i` 盘寿司时实际得到的寿司的总价格。使用空格进行分隔。\r\n\n## 示例一\n#### 输入\n```\r\n3 15 6 14\r\n```\n#### 输出\n```\r\n3 21 9 17\r\n```\n## 示例二\n#### 输入\n```\r\n5 12 7 13\r\n```\n#### 输出\n```\r\n5 19 12 18\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 63,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-18 16:53:19",
                "tagList": [
                    "华为OD",
                    "单调栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "7clq26",
                "hasChoiceQuestion": false
            }
        ],
        "total": "209",
        "size": "20",
        "current": "5",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "11"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814977118761668610",
                "questionNum": "3281",
                "title": "2023B-荒岛求生",
                "content": "## 题目描述\n有一个荒岛，只有左右两个港口，只有一座桥连接这两个港口，现在有一群人需要从两个港口逃生，有的人往右逃生，有的往左逃生，如果两个人相遇，则 pk，体力值大的能够打赢体力值小的，体力值相同则同归于尽，赢的人才能继续往前逃生，并减少相应的体力\r\n\n## 输入描述\n系列非 `0` 整数，用空格隔开，正数代表向右逃生，负数代表向左逃生\r\n\n## 输出描述\n最终能够逃生的人数\r\n\n## 示例一\n### 输入\n```\r\n5 10 8 -8 -5\r\n```\n### 输出\n```\r\n5 5\r\n```\n## 说明\n`8` 与 `-8` 相遇，同归于尽，`10` 遇到`-5`，打赢并减少五点体力，最终逃生的为`[5，5]`，均从右侧港口逃生，输出 `2`\r\n\n## 示例二\n### 输入\n```\r\n5 6 -10\r\n```\n### 输出\n```\r\n1\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 61,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-18 16:58:08",
                "tagList": [
                    "华为OD",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "0o1xds",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977119004938241",
                "questionNum": "3282",
                "title": "2023A-解压缩算法",
                "content": "## 题目描述\n现需要实现一种算法，能将一组压缩字符串还原成原始字符串，还原规则如下：\r\n\n1. 字符后面加数字 `N`，表示重复字符 `N` 次。例如：压缩内容为 `A3`，表示原始字符串为 `AAA`。\r\n2. 花括号中的字符串加数字 `N`，表示花括号中的字符串重复 `N` 次。例如：压缩内容为`{AB}3`，表示原始字符串为 `ABABAB`。\r\n3. 字符加 `N` 和花括号后面加 `N`，支持任意的嵌套，包括互相嵌套。例如：压缩内容可以`{A3B1{C}3}3`。\r\n\n## 输入描述\n输入一行压缩后的字符串\r\n\n## 输出描述\n输出压缩前的字符串\r\n\n## 说明\n输入输出的字符串区分大小写。\r\n\n输入的字符串长度的范围为`[1, 10000]`，输出的字符串长度的范围为`[1, 100000]`，数字 N 范围`[1, 10000]`\r\n\n## 示例一\n### 输入\n```\r\nA3\r\n```\n### 输出\n```\r\nAAA\r\n```\n### 说明\n`A3` 代表 `A` 字符重复 `3` 次\r\n\n## 示例二\n### 输入\n```\r\n{A3B1{C}3}3\r\n```\n### 输出\n```\r\nAAABCCCAAABCCCAAABCCC\r\n```\n### 说明\n`{A3B1{C}3}3` 代表 `A` 字符重复 `3` 次，`B` 字符重复 `1` 次，花括号中的 `C` 字符重复 `3` 次，最外层花括号中的 `AAABCCC` 重复 `3` 次\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 48,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:00",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-18 20:45:15",
                "tagList": [
                    "华为OD",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "uqis5r",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977119332093953",
                "questionNum": "3283",
                "title": "2024D-密码输入检测",
                "content": "## 题目描述\n给定用户密码输入流 `input`，输入流中字符`'<'`表示退格，可以清除前一个输入的字符，请你编写程序，输出最终得到的密码字符，并判断密码是否满足如下的密码安全要求。\r\n\n密码安全要求如下：\r\n\n1. 密码长度>=8;\r\n2. 密码至少需要包含 1 个大写字母;\r\n3. 密码至少需要包含 1 个小写字母;\r\n4. 密码至少需要包含 1 个数字;\r\n5. 密码至少需要包含 1 个字母和数字以外的非空白特殊字符\r\n\n注意空串退格后仍然为空串，且用户输入的字符串不包含`'<'`字符和空白字符。\r\n\n## 输入描述\n用一行字符串表示输入的用户数据，输入的字符串中`'<'`字符标识退格，用户输入的字符串不包含空白字符，例如：`ABC<c89%000<`\r\n\n## 输出描述\n输出经过程序处理后，输出的实际密码字符串，并输出改密码字符串是否满足密码安全要求。两者间由`','`分隔， 例如：`ABc89%00,true`\r\n\n## 示例\n### 输入\n```\r\nABC<c89%000<\r\n```\n### 输出\n```\r\nABc89%00,true\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 43,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-18 21:04:48",
                "tagList": [
                    "华为OD",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "stpu68",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977119504060418",
                "questionNum": "3284",
                "title": "2023A-括号检查",
                "content": "## 题目\n现有一字符串 仅由 `'('`, `')'`, `'{'`, `'}'`, `'['`, `']'` 一共六种括号组成。若字符串满足以下条件之一，则为无效字符串\r\n\n1. 任意类型的左右括号数量不相等\r\n2. 存在未按正确顺序（先左后右）合的括号，\r\n\n输出括号的最大嵌套深度，若字符串无效则输出 `0`。`0 <= 字符串长度 <= 100000`\r\n\n## 输入\n一个只包括 `'('`, `')'`, `'{'`, `'}'`, `'['`, `']'` 以一共`6`种字符的字符串。\r\n\n## 输出\n一个整数，表示最大的括号深度。若字符串无效，则输出 `0` \r\n\n## 示例一\n### 输入\n```\r\n[]\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n该字符串有效，且最大嵌套深度为 `1`\r\n\n## 示例二\n### 输入\n```\r\n([]{()})\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n该字符串有效，且最大嵌套深度为 `3`\r\n\n## 示例三\n### 输入\n```\r\n(]\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n该字符串无效\r\n\n## 示例四\n### 输入\n```\r\n([)]\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n该字符串无效\r\n\n## 示例五\n### 输入\n```\r\n)(\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n该字符串无效\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 60,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-19 15:12:09",
                "tagList": [
                    "华为OD",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "wqvj8y",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977119709581314",
                "questionNum": "3285",
                "title": "2024D-通过软盘拷贝文件",
                "content": "## 题目描述\n有一名科学家想要从一台古董电脑中拷贝文件到自己的电脑中加以研究。\r\n\n但此电脑除了有一个3.5寸软盘驱动器以外，没有任何手段可以将文件持贝出来，而且只有一张软盘可以使用。\r\n\n因此这一张软盘是唯一可以用来拷贝文件的载体。\r\n\n科学家想要尽可能多地将计算机中的信息拷贝到软盘中，做到软盘中文件内容总大小最大。\r\n\n已知该软盘容量为`1474560`字节。文件占用的软盘空间都是按块分配的，每个块大小为`512`个字节。一个块只能被一个文件使用。拷贝到软盘中的文件必须是完整的，且不能采取任何压缩技术。\r\n\n## 输入描述\n第`1`行为一个整数`N`，表示计算机中的文件数量。`1 ≤ N ≤ 1000`.\r\n\n接下来的第`2`行到第`N+1`行(共`N`行)，每行为一个整数，表示每个文件的大小`Si`，单位为`字节`。\r\n\n`0 ≤ i < N`,`0 ≤ Si <= 1474560`\r\n\n## 输出描述\n科学家最多能拷贝的文件总大小\r\n\n### **备注**\n为了充分利用软盘空间，将每个文件在软盘上占用的块记录到本子上。即真正占用软盘空间的只有文件内容本身。\r\n\n## 示例一\n### 输入\n```\r\n3\r\n737270\r\n737272\r\n737288\r\n```\n### 输出\n```\r\n1474542\r\n```\n### 说明\n3个文件中，每个文件实际占用的大小分别为`737280`字节、`737280`字节、`737792`字节。只能选取前两个文件，总大小为`1474542`字节。虽然后两个文件总大小更大且未超过`1474560`字节，但因为实际占用的大小超过了`1474560`字节，所以不能选后两个文件。\r\n\n## 示例二\n### 输入\n```\r\n6\r\n400000\r\n200000\r\n200000\r\n200000\r\n400000\r\n400000\r\n```\n### 输出\n```\r\n1400000\r\n```\n### 说明\n从`6`个文件中，选择`3`个大小为`400000`的文件和`1`个大小为`200000`的文件，得到最大总大小为`1400000`。\r\n\n也可以选择`2`个大小为`400000`的文件和`3`个大小为`200000`的文件，得到的总大小也是`1400000`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 53,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-18 21:19:08",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "f26rlo",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977119927685121",
                "questionNum": "3286",
                "title": "2023B-代表团坐车",
                "content": "## 题目描述\n某组织举行会议，来了多个代表团同时到达，接待处只有一辆汽车，可以同时接待多个代表团，为了提高车辆利用率，请帮接待员计算可以坐满车的接待方案，输出方案数量。\r\n\n约束：\r\n\n1. 一个团只能上一辆车，并且代表团人数（代表团数量小于`30`，每个代表团人数小于`30`）小于汽车容量（汽车容量小于`100`）\r\n2. 需要将车辆坐满\r\n\n## 输入描述\n第一行代表团人数，英文逗号隔开，代表团数量小于`30`，每个代表团人数小于`30`\r\n\n第二行汽车载客量，汽车容量小于`100`\r\n\n## 输出描述\n坐满汽车的方案数量\r\n\n如果无解输出`0`\r\n\n## 示例一\n### 输入\n```\r\n5,4,2,3,2,4,9\r\n10\r\n```\n### 输出\n```\r\n4\r\n```\n### 说明\n以下几种方式都可以坐满车，所以，优先接待输出为`4`\r\n\n```\r\n[2,3,5]\r\n[2,4,4]\r\n[2,3,5]\r\n[2,4,4]\r\n```\n## 示例二\n### 输入\n```\r\n1,2,3,4\r\n3\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n`[1,2]`或`[3]`\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 66,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-19 16:39:44",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "cjeap2",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977120116428802",
                "questionNum": "3287",
                "title": "2023B-高速公路休息站充电规划",
                "content": "## 题目描述\n小明购买了一辆续航里程数达 `1000` 公里的某自动驾驶新能源车。某一天车辆充满电后，需从甲城出发前往距离 `D` 公里远的乙城，全程走高速。车载导航提示沿途有  `N` 个休息站均可提供充电服务，各休息站均可实时提供当前充电排队时间，单位为小时。\r\n\n请协助规划时间最优的休息站充电方案，返回最短的旅行用时。\r\n\n为方便计算，高速上的行驶速度固定为 `100` 公里/小时。规划时可不必考虑保留安全续航里程数，汽车可以将电完全用光，`1000` 公里续航的汽车按 `100` 公里/小时，可以开 `10` 个小时。每次充电时间固定为 `1` 小时，完成后电量充满。各站点充电排队时间不会变化，充电排队过程不耗电。\r\n\n## 输入描述\n第一行表示甲乙两城的距离 `D`，单位为公里。第二行表示沿途的休息站数量 `N`。第三行起，每行 `2` 个数据，分别表示休息站离起点甲城的距离，以及充电排队所需时间，单位为小时。各休息站按离从近到远排序。`0 < = D < = 1000000` ，`D` 是 `100` 的整数倍`0 < = N < = 10000`\r\n\n## 示例一\n### 输入\n```\r\n1500\r\n4\r\n300 2\r\n600 1\r\n1000 0\r\n1200 1\r\n```\n### 输出\n```\r\n16\r\n```\n### 说明\n最佳方案：只在位置为 `1000` 的第 `3` 个休息站进行充电。`1500` 公里的行程耗时 `15` 小时，充电排队 `0` 小时，充电 `1` 小时。最快旅程总计花费 `16` 小时\r\n\n其他方案一：在第 `2` 个休息站进行充电，总计花费 `17` 小时其他方案二：在第 `2` 个休息站和第 `4` 个休息站进行充电，总计花费 `19` 小时\r\n\n## 示例二\n### 输入\n```\r\n800\r\n2\r\n300 0\r\n600 0\r\n```\n### 输出\n```\r\n8\r\n```\n### 说明\n最佳方案：不进任何休息站充电。`800` 公里的行程耗时 `8` 小时\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 59,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-18 22:06:09",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "t8yud5",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977120305172482",
                "questionNum": "3288",
                "title": "2023B-超级玛丽过吊桥",
                "content": "## 题目描述\n超级玛丽好不容易来到新的一关。有一个长长的吊桥共有 `N` 个木板，从吊桥一段的外侧开始跳（第 `0` 块），每一次可跳 `1`、`2`、`3` 步，其中有一些木板是陷阱，踩到即消耗一点生命值并在陷阱原地复活，刚好跳到吊桥的另一侧（第 `N+1` 块）则通关。给定起始生命数量 `M` ，吊桥长度 `N`，陷阱木板数量 `K` 及 `K` 个陷阱木板的编号，求保证生命值大于 `0` 条件下所有可能的通关路线数量。\r\n\n## 输入描述\n超级玛丽当前生命数：`1 <= M <= 5 `\r\n\n吊桥的长度：`1 <= N <= 32 `\r\n\n陷阱木板数：`1 <= K <= 32 `\r\n\n陷阱木板编号数组： `L` 是长度及元素不大于 `N` 的编号数组\r\n\n### 输入结构\n`M N K`\r\n\n`L`\r\n\n### 提示\n1. 输入总是合法，忽略参数校验。\r\n2. 必须从起点开始走。\r\n3. 必须离开吊桥走到终点。\r\n\n## 输出描述\n输出通过此关的吊桥走法个数，如果不能通过此关，请输出 `0`\r\n\n## 示例一\n### 输入\n```\r\n2 2 1\r\n2\r\n```\n### 输出\n```\r\n4\r\n```\n### 说明\n`2` 个生命，`2` 个木板，缺失 `1` 个木板，第 `2` 个木板有缺失，一共有 `4` 种走法：\r\n\n1. `3`\r\n2. `1` `2`\r\n3. `2` `1`\r\n4. `1` `1`(复活) `1`\r\n\n## 示例二\n### 输入\n```\r\n1 3 2\r\n1 3\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n`1` 个生命，`3` 个木板，缺失 `2` 个木板，第 `1`、`3` 个木板有缺失，只有 `1` 种走法，其他走法都不能通关。\r\n\n1. 先走一步，死亡；\r\n2. 先走三步，死亡。\r\n\n## 示例三\n### 输入\n```\r\n3 10 2\r\n4 7\r\n```\n### 输出\n```\r\n504\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 71,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-19 20:19:35",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "aium2o",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977120489721858",
                "questionNum": "3289",
                "title": "2024D-分月饼",
                "content": "## 题目描述\n中秋节，公司分月饼，`m`个员工，买了`n`个月饼，`m <= n`，每个员工至少分`1`个月饼，但可以分多个，单人分到最多月饼的个数是`Max1`，单人分到第二多月饼个数是`Max2`，`Max1-Max2 <= 3`，单人分到第`n-1`多月饼个数是`Max(n-1)`，单人分到第`n`多月饼个数是`Max(n)`，`Max(n-1)- Max(n) <= 3`，问有多少种分月饼的方法?\r\n\n## 输入描述\n每一行输入`m n`，表示`m`个员工，`n`个月饼，`m<=n`\r\n\n## 输出描述\n输出有多少种月饼分法\r\n\n## 示例\n### 输入\n```\r\n2 4\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n分法有`2`种:\r\n\n`4=1+3`\r\n\n`4=2+2`\r\n\n注意: `1+3`和`3+1`算一种分法\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 85,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:00",
                "updateTime": "2025-06-21 02:21:10",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "5ri8f6",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977120716214274",
                "questionNum": "3290",
                "title": "2023A-递增字符串",
                "content": "## 题目描述\n定义字符串完全由`\"A\"`和`\"B\"`组成，当然也可以全是`\"A\"`或全是`\"B\"`。如果**字符串从前往后都是以字典序排列的，那么我们称之为严格递增字符串。**给出一个字符串 `s`，允许修改字符串中的任意字符，即可以将任何的`\"A\"`修改成`\"B\"`，也可以将任何的`\"B\"`修改成`\"A\"`，求可以使 `s` 满足严格递增的最小修改次数。存在`0 < len(s) < 100000`。\r\n\n## 输入描述\n输入一个字符串，表示原始字符串。\r\n\n## 输出描述\n输出一个数字，表示将原始字符串修改为严格递增字符串的**最少修改次数**。\r\n\n## 示例一\n### 输入\n```\r\nAABBA\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n修改最后一位`\"A\"`为`\"B\"`，字符串会变为`\"AABBB\"`，符合题意。\r\n\n## 示例二\n### 输入\n```\r\nABABBA\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n翻转得到`\"ABBBBB\"`或者是`\"AAABBB\"`后，符合题意，均只需翻转`2`次。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 47,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-19 16:24:48",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "2nfi9i",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977121416663041",
                "questionNum": "3291",
                "title": "2023B-跳格子(2)",
                "content": "## 题目描述\n小明和朋友玩跳格子游戏，有 `n` 个连续格子组成的圆圈，每个格子有不同的分数，小朋友可以选择从任意格子起跳，但是不能跳连续的格子，不能回头跳，也不能超过一圈；\r\n\n给定一个代表每个格子得分的非负整数数组，计算能够得到的最高分数。\r\n\n## 输入\n给定一个数例，第一个格子和最后一个格子首尾相连，如： `2 3 2`。\r\n\n## 输出\n输出能够得到的最高分，如： `3`。\r\n\n## 说明\n- `1 <= nums.length <= 100`\r\n- `0 <= nums[i] <= 1000`\r\n\n## 示例一\n### 输入\n```\r\n2 3 2\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n只能跳 `3` 这个格子，因为第一个格子和第三个格子收尾相连\r\n\n## 示例二\n### 输入\n```\r\n1 2 3 1\r\n```\n### 输出\n```\r\n4\r\n```\n### 说明\n选择第一个和第三个格子，`1 + 3 = 4`\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 58,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-19 22:46:59",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "n16fr8",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977121617989634",
                "questionNum": "3292",
                "title": "2023Q1A-寻找重复代码",
                "content": "## 题目\n小明负责维护项目下的代码，需要查找出重复代码，用以支撑后续的代码优化，请你帮助小明找出重复的代码。重复代码查找方法：以字符串形式给出两行代码`text1`，`text2`（字符串长度`1 < len(text1)，len(text2) <= 100`，由英文字母、数字和空格组成），找出两行代码中的最长公共子串。如果不存在公共子串，返回空字符串。\r\n\n注意子串是**连续的**。\r\n\n## 输入\n输入的参数`text1`，`text2`分别表示两行代码\r\n\n## 输出\n输出任一最长公共子串。\r\n\n## 示例一\n### 输入\n```\r\nhello123world\r\nhello123abc4\r\n```\n### 输出\n```\r\nhello123\r\n```\n## 示例二\n### 输入\n```\r\nprivate_void_method\r\npublic_void_method\r\n```\n### 输出\n```\r\n_void_method\r\n```\n## 示例三\n### 输入\n```\r\nhiworld\r\nhiweb\r\n```\n### 输出\n```\r\nhiw\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 70,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-19 16:56:10",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "do6vk6",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977121827704834",
                "questionNum": "3293",
                "title": "2023B-跳格子(1)",
                "content": "## 题目描述\n小明和朋友玩跳格子游戏，有 `n` 个连续格子，每个格子有不同的分数，小朋友可以选择以任意格子起跳，**但是不能跳连续的格子**，也不能回头跳；\r\n\n给定一个代表每个格子得分的非负整数数组，计算能够得到的最高分数\r\n\n## 输入描述\n给定一个数列，如:   `1 2 3 1`\r\n\n## 输出描述\n输出能够得到的最高分，如: `4`\r\n\n**备注**\r\n\n`1 ≤ nums.length ≤ 100`\r\n\n`0 <= nums[i] <= 1000`\r\n\n## 示例一\n### 输入\n```\r\n1 2 3 1\r\n```\n### 输出\n```\r\n4\r\n```\n### 说明\n选择跳第一个格子和第三个格子\r\n\n## 示例二\n### 输入\n```\r\n2 7 9 3 1\r\n```\n### 输出\n```\r\n12\r\n```\n### 说明\n`2+9+1=12`\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 56,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-19 22:15:54",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "m4l2ep",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977122037420033",
                "questionNum": "3294",
                "title": "2024D-园区参观路径",
                "content": "## 题目描述\n园区某部门举办了Family Day，邀请员工及其家属参加;将公司园区视为一个矩形，起始园区设置在左上角，终点园区设置在右下角；家属参观园区时，只能**向右和向下**园区前进；求从起始园区到终点园区会有多少条不同的参观路径\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/D1HBIeZa_1721042753984_mianshiya.png)\r\n\n## 输入描述\n第一行为园区长和宽；后面每一行表示该园区是否可以参观，`0`表示可以参观，`1`表示不能参观\r\n\n`1 <= 园区长, 园区宽 <= 100`\r\n\n## 输出描述\n输出为不同的路径数量\r\n\n## 示例\n### 输入\n```\r\n3 3\r\n0 0 0\r\n0 1 0\r\n0 0 0\r\n```\n### 输出\n```\r\n2\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 51,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-19 19:57:14",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "e20017",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977122276495361",
                "questionNum": "3295",
                "title": "2023A-猴子爬山",
                "content": "## 题目\n一天一只顽猴想要从山脚爬到山顶，途中经过一个有 `n` 个台阶的阶梯，但是这个猴子有个习惯，每一次只跳 `1` 步或 `3` 步。试问猴子通过这个阶梯有多少种不同的跳跃方式。\r\n\n## 输入\n输入只有一个数 `n`， `0 <= n <= 50`，代表此阶梯有多个台阶。\r\n\n## 输出描述\n一个整数，表示有多少种跳跃方式。\r\n\n## 示例一\n### 输入\n```\r\n50\r\n```\n### 输出\n```\r\n122106097\r\n```\n## 示例二\n### 输入\n```\r\n3\r\n```\n### 输出\n```\r\n2\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 74,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-24 17:14:54",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "oa9zuy",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977122968555522",
                "questionNum": "3296",
                "title": "2023B-书籍叠放",
                "content": "## 题目描述\n书籍的长、宽都是整数对应`(l,w)`。如果书`A`的长宽度都比`B`长宽大时，则允许将`B`排列放在`A`上面。\r\n\n现在有一组书籍，书籍叠放时要求书籍不能做旋转，请计算最多能有多少个书籍能叠放在一起。\r\n\n## 输入描述\n输入：`books = 20,16,15,11,10,10,9,10`\r\n\n说明：总共`4`本书籍，\r\n\n第一本长度为`20`，宽度为`16`；\r\n\n第二本书长度为`15`宽度为`11`；\r\n\n依次类推，最后一本书长度为`9`，宽度为`10`\r\n\n## 输出描述\n输出：`3`\r\n\n最多能有多少个规格书籍能叠放在一起\r\n\n## 示例一\n### 输入\n```\r\n20,16,15,11,10,10,9,10\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n最多`3`个规格的书籍可以叠放到一起，从下到上依次为: `[20,16],[15,11],[10,10]`\r\n\n## 示例二\n### 输入\n```\r\n20,15,15,20\r\n```\n### 输出\n```\r\n1\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 70,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-20 10:36:34",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "wtkiy7",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977123153104897",
                "questionNum": "3297",
                "title": "2023A-工作安排",
                "content": "## 题目描述\n小明每周上班都会拿到自己的工作清单，工作清单内包含`n`项工作，每项工作都有对应的耗时时长(单位h)和报酬，工作的总报酬为所有已完成工作的报酬之和。那么请你帮小明安排一下工作，保证小明在指定的工作时间内工作收入最大化。\r\n\n## 输入描述\n输入的第一行为两个正整数`T`，`n`。`T`代表工作时长(单位h，`0<T<100000`) , `n`代表工作数量(`1 <n<3000`)\r\n\n接下来是`n`行，每行包含两个整数`t`，`w`。`t`代表该项工作消耗的时长(单位h，`t>0`) ，`w`代表该项工作的报酬。\r\n\n## 输出描述\n输出小明指定工作时长内工作可获得的最大报酬。\r\n\n## 示例一\n### 输入\n```\r\n40 3\r\n20 10\r\n20 20\r\n20 5\r\n```\n### 输出\n```\r\n30\r\n```\n## 示例二\n### 输入\n```\r\n100 3\r\n50 10\r\n20 30\r\n50 20\r\n```\n### 输出\n```\r\n50\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 78,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:01",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-20 11:20:19",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "g88cuv",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977123350237186",
                "questionNum": "3298",
                "title": "2024D-分班",
                "content": "## 题目描述\n幼儿园两个班的小朋友在排队时混在了一起，每位小朋友都知道自己是否与前面一位小朋友是否同班，请你帮忙把同班的小朋友找出来。小朋友的编号为整数，与前一位小朋友同班用`Y`表示，不同班用`N`表示。\r\n\n## 输入描述\n输入为空格分开的小朋友编号和是否同班标志。\r\n\n比如: `6/N` `2/Y` `3/N` `4/Y`，表示共`4`位小朋友，`2`和`6`同班， `3`和`2`不同班，`4`和`3`同班。\r\n\n其中，小朋友总数不超过`999`，每个小朋友编号大于`0`，小于等于`999`。不考虑输入格式错误问题。\r\n\n## 输出描述\n输出为两行，每一行记录一个班小朋友的编号，编号用空格分开。\r\n\n且:\r\n\n1. 编号需要按照大小升序排列，分班记录中第一个编号小的排在第一行；\r\n2. 若只有一个班的小朋友，第二行为空行；\r\n3. 若输入不符合要求，则直接输出字符串`ERROR`。\r\n\n## 示例一\n### 输入\n```\r\n6/N\r\n2/Y\r\n3/N\r\n4/Y\r\n```\n### 输出\n```\r\n2 6\r\n3 4\r\n```\n## 示例二\n### 输入\n```\r\n2/N\r\n3/Y\r\n4/Y\r\n```\n### 输出\n```\r\n2 3 4\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 64,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:02",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-21 13:33:45",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "0upruq",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977123564146690",
                "questionNum": "3299",
                "title": "2024D-两个字符串间的最短路径",
                "content": "## 题目描述\n给定两个字符串，分别为字符串`A`与字符串`B`。\r\n\n例如`A`字符串为`ABCABBA`，`B`字符串为`CBABAC`，可以得到下图`m*n`的二维数组，定义原点为`(0,0)`，终点为`(m,n)`，水平与垂直的每一条边距离为`1`，映射成坐标系如下图。\r\n\n从原点`(0,0)`到`(0,A)`为水平边，距离为`1`，从`(0,A)`到`(A,C)`为垂直边，距离为`1`；假设两个字符串同一位置的两个字符相同则可以作一个斜边，如`(A,C)`到`(B,B)`最短距离为斜边，距离同样为`1`。出所有的斜边如下图，`(0,0)`到`(B,B)`的距离为 `1`个水平边+ `1`个垂直边+ `1`个斜边=`3`。\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/viqipvJK_1721042659979_mianshiya.png)\r\n\n根据定义可知，原点到终点的最短距离路径如下图红线标记，最短距离为`9`\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/SfVzLvod_1721042673068_mianshiya.png)\r\n\n## 输入描述\n空格分割的两个字符串`A`与字符串`B`，字符串不为空串，字符格式满足正则规则:`[A-Z]`，字符串长度`<10000`\r\n\n## 输出描述\n原点到终点的最短距离\r\n\n## 示例一\n### 输入\n```\r\nABC ABC\r\n```\n### 输出\n```\r\n3\r\n```\n## 示例二\n### 输入\n```\r\nABCABBA CBABAC\r\n```\n### 输出\n```\r\n9\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 72,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:02",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-19 21:27:55",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "tfjqlj",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977123778056194",
                "questionNum": "3300",
                "title": "2024D-抢7游戏",
                "content": "## 题目描述\n`A`、`B`两个人玩抢7游戏，游戏规则为A先报一个起始数字`X` (`10 <= X <= 10000`），`B`报下一个数字`Y`，(`0<X-Y<3`)，`A`再报一个数字`Z`(`0<Y-Z<3`)，以此类推，直到其中一个抢到`7`，抢到`7`即为胜者，在`B`赢得比赛的情况下，一共有多少种组合？\r\n\n## 输入描述\n起始数字`M`，如`100`\r\n\n`10 <= M <= 10000`\r\n\n## 输出描述\n`B`能赢得比赛的组合次数\r\n\n## 示例\n### 输入\n```\r\n10\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n只有一种赢的组合，`A`起始选择`10`，`B`接着选择`9`，`A`接着选择`8`，`B`接着选择`7`赢得胜利。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 58,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:02",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-19 21:30:10",
                "tagList": [
                    "华为OD",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "sfo9o4",
                "hasChoiceQuestion": false
            }
        ],
        "total": "209",
        "size": "20",
        "current": "6",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "11"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814977123983577090",
                "questionNum": "3301",
                "title": "2024D-考古学家",
                "content": "## 题目描述\n有一个考古学家发现一个石碑，但是很可惜 发现时其已经断成多段，原地发现 `N` 个断口整齐的石碑碎片，为了破解石碑内容\r\n\n考古学家希望有程序能帮忙计算复原后的石碑文字，你能帮忙吗\r\n\n#### 备注\n如果存在石碑碎片内容完全相同，则由于碎片间的顺序不影响复原后的碑文内容，仅相同碎片间的位置变化不影响组合\r\n\n## 输入描述\n第一行输入 `N`，`N` 表示石碑碎片的个数第二行依次输入石碑碎片上的文字内容 `S` 共有 `N` 组\r\n\n## 输出描述\n输出石碑文字的组合(按照升序排列)，行尾无多余空格\r\n\n## 示例一\n### 输入\n```\r\n3\r\na b c\r\n```\n### 输出\n```\r\nabc\r\nacb\r\nbac\r\nbca\r\ncab\r\ncba\r\n```\n## 示例二\n### 输入\n```\r\n3\r\na b a\r\n```\n### 输出\n```\r\naab\r\naba\r\nbaa\r\n```\n## 示例三\n### 输入\n```\r\n3\r\na b ab\r\n```\n### 输出\n```\r\naabb\r\nabab\r\nabba\r\nbaab\r\nbaba\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 56,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:02",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-19 22:36:53",
                "tagList": [
                    "华为OD",
                    "回溯"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ppab66",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977124176515073",
                "questionNum": "3302",
                "title": "2024D-表演赛游戏分组",
                "content": "## 题目描述\n部门准备举办一场王者荣耀表演赛，有 `10` 名游戏爱好者参与，分为两队，每队 `5` 人。\r\n\n每位参与者都有一个评分，代表着他的游戏水平。\r\n\n为了表演赛尽可能精彩，我们需要把 `10` 名参赛者分为实力尽量相近的两队。一队的实力可以表示为这一队 `5` 名队员的评分总和。\r\n\n现在给你 `10` 名参与者的游戏水平评分，请你根据上述要求分队最后输出这两组的实力差绝对值。\r\n\n例: `10` 名参赛者的评分分别为 `5 1 8 3 4 6 7 10 9 2`，分组为 `(1 3 5 8 10) (2 4 6 7 9)`，两组实力差最小，差值为 `1`。有多种分法，但实力差的绝对值最小为 `1`。\r\n\n### 输入描述\n`10` 个整数，表示 `10` 名参与者的游戏水平评分。范围在`[1,10000]`之间\r\n\n### 输出描述\n`1` 个整数，表示分组后两组实力差绝对值的最小值。\r\n\n### 示例一\n#### 输入\n```\r\n1 2 3 4 5 6 7 8 9 10\r\n```\n#### 输出\n```\r\n1\r\n```\n#### 说明\n`10` 名队员分成两组，两组实力差绝对值最小为 `1`。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 41,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:02",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-20 07:39:09",
                "tagList": [
                    "华为OD",
                    "回溯"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "44z3vf",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977124348481537",
                "questionNum": "3303",
                "title": "2023B-猜密码",
                "content": "## 题目\n小杨申请了一个保密柜，但是他忘记了密码。只记得密码都是数字，而且**所有数字都是不重复的**。\r\n\n请你根据他记住的数字范围和密码的最小数字数量，帮他算下有哪些可能的组合，\r\n\n规则如下：\r\n\n1. 输出的组合都是从可选的数字范围中选取的，且不能重复；\r\n2. 输出的密码数字要按照从小到大的顺序排列，密码组合需要按照字母顺序，从小到大的顺序排序。\r\n3. 输出的每一个组合的数字的数量要大于等于密码最小数字数量；\r\n4. 如果可能的组合为空，则返回`\"None\"`\r\n\n## 输入描述\n1. 输入的第一行是可能的密码数字列表，数字间以半角逗号分隔\r\n2. 输入的第二行是密码最小数字数量\r\n\n## 输出描述：\n可能的密码组合，每种组合显示成一行，每个组合内部的数字以半角逗号分隔，从小到大的顺序排列。输出的组合间需要按照字典序排序。比如：`2,3,4` 放到 `2,4` 的前面\r\n\n## 示例\n### 输入\n```\r\n2,3,4\r\n2\r\n```\n### 输出\n```\r\n2,3\r\n2,3,4\r\n2,4\r\n3,4\r\n```\n### 说明\n最小密码数量是两个，可能有三种组合：`2,3`、`2,4`、`3,4`；三个密码有一种：`2,3,4`\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 57,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:02",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-20 07:54:49",
                "tagList": [
                    "华为OD",
                    "回溯"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "j5g6br",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977124524642306",
                "questionNum": "3304",
                "title": "2023C-最长连续手牌",
                "content": "## 题目描述\n有这么一款单人卡牌游戏，牌面由颜色和数字组成，颜色为红、黄、蓝、绿中的一种，数字为`0-10` 中的一个。\r\n\n游戏开始时玩家从手牌中选取一张卡牌打出，接下来如果玩家手中有和他上一次打出的手牌颜色或者数字相同的手牌，他可以继续将该手牌打出，直至手牌打光或者没有符合条件可以继续打出的手牌。\r\n\n现给定一副手牌，请找到最优的出牌策略，使打出的手牌最多。\r\n\n## 输入描述\n输入为两行，第一行是每张手牌的数字，数字由空格分隔，第二张为对应的每张手牌的颜色，\r\n\n用`r y b g`这`4`个字母分别代表`4`种颜色，字母也由空格分隔。手牌数量不超过`10`。\r\n\n## 输出描述\n输出一个数字，即最多能打出的手牌的数量。\r\n\n## 示例一\n### 输入\n```\r\n1 4 3 4 5\r\nr y b b r\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n如果打出`1r`，那么下面只能再打出`5r`，共打出两张牌，而按照`4y-4b-3b`的顺序则可以打出三张牌，故输出`3`\r\n\n## 示例二\n### 输入\n```\r\n1 2 3 4\r\nr y b g\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n没有能够连续出牌的组合，只能在开始时打出一张手牌，故输出`1`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 47,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:02",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-20 09:28:22",
                "tagList": [
                    "华为OD",
                    "回溯"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "jg7o1q",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977124725968898",
                "questionNum": "3305",
                "title": "2024D-加密算法",
                "content": "## 题目描述\n有一种特殊的加密算法，明文为一段数字串，经过密码本查找转换，生成另一段密文数字串。规则如下\r\n\n1. 明文为一段数字串由`0-9`组成\r\n2. 密码本为数字`0-9`组成的二维数组\r\n3. 需要按明文串的数字顺序在密码本里找到同样的数字串，密码本里的数字串是由相邻的单元格数字组成，上下和左右是相邻的，注意:对角线不相邻，同一个单元格的数字不能重复使用。\r\n4. 每一位明文对应密文即为密码本中找到的单元格所在的行和列序号(序号从`0`开始)组成的两个数字。如明文第`i`位`Data[i]`对应密码本单元格为`Book[X][Y]`，则明文第`i`位对应的密文为`X Y`，`X`和`Y`之间用空格隔开。如果有多条密文，返回字符序最小的密文。如果密码本无法匹配，返回`\"error\"`.\r\n\n请你设计这个加密程序。\r\n\n示例 1:\r\n\n密码本:\r\n\n```\r\n{0,0,2},\r\n{1,3,4},\r\n{6,6,4}\r\n```\n明文`\"3\"`，密文`\"1 1\"`\r\n\n示例 2:\r\n\n密码本:\r\n\n```\r\n{0,0,2},\r\n{1,3,4},\r\n{6,6,4}\r\n```\n明文`\"0 3\"`,密文`\"0 1 1 1\"`\r\n\n示例 3:\r\n\n密码本:\r\n\n```\r\n{0,0,2,4}\r\n{1,3,4,6}\r\n{3,4,1,5}\r\n{6,6,6,5}\r\n```\n明文`\"0 0 2 4\"`，密文`\"0 0 0 1 0 2 0 3\"`和`\"0 0 0 1 0 2 1 2\"`，返回字典序小的`\"0 0 0 1 0 2 0 3\"`\r\n\n## 输入描述\n第一行输入`1`个正整数`N`，代表明文的长度`(1 <= N <= 9)`\r\n\n第二行输入`N`个明文数字组成的序列`Data[i]`(整数，`0 <= Data[i] <= 9`)\r\n\n第三行输入`1`个正整数`M`，(`1 <= M <= 9`)\r\n\n接下来输入一个`M*M`的矩阵代表密码本`Book[i][i]`，(整数，`0 <= Book[i][i] <= 9`)\r\n\n## 输出描述\n如明文 第`i`位`Data[i]`对应密码本单元格为`Book[i][j]`，则明文第`i`位对应的密文为`X Y`，`X`和`Y`之间用空格隔开。如果有多条密文，**返回字符序最小的密文**。如果密码本无法匹配，返回`\"error\"`。\r\n\n## 示例一\n### 输入\n```\r\n2\r\n0 3\r\n3\r\n0 0 2\r\n1 3 4\r\n6 6 4\r\n```\n### 输出\n```\r\n0 1 1 1\r\n```\n## 示例二\n### 输入\n```\r\n4\r\n0 0 2 4\r\n4\r\n0 0 2 4\r\n1 3 4 6\r\n3 4 1 5\r\n6 6 6 5\r\n```\n### 输出\n```\r\n0 0 0 1 0 2 0 3\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 76,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:02",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:01",
                "updateTime": "2025-06-20 09:54:25",
                "tagList": [
                    "华为OD",
                    "回溯"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "aybpq8",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977124969238529",
                "questionNum": "3306",
                "title": "2024D-田忌赛马",
                "content": "### 题目描述\n给定两个只包含数字的数组 `a`, `b`，调整数组 `a` 里面数字的顺序，使得尽可能多的 `a[i] > b[i]`。数组 `a` 和 `b` 中的数字各不相同。\r\n\n输出所有可以达到最优结果的 `a` 数组数量\r\n\n### 输入描述\n输入的第一行是数组 `a` 中的数字\r\n\n输入的第二行是数组 `b` 中的数字\r\n\n其中只包含数字，每两个数字之间相隔一个空格，`a`，`b` 数组大小不超过 `10`\r\n\n### 输出描述\n输出所有可以达到最优结果的 `a` 数组数量\r\n\n### 示例一\n#### 输入\n```\r\n11 8 20\r\n10 13 7\r\n```\n#### 输出\n```\r\n1\r\n```\n#### 说明\n最优结果只有一个，`a = [11, 20, 8]`，故输出 `1`\r\n\n### 示例二\n#### 输入\n```\r\n11 12 20\r\n10 13 7\r\n```\n#### 输出\n```\r\n2\r\n```\n#### 说明\n有两个 `a` 数组的排列可以达到最优结果，`[12, 20, 11]`和`[11, 20, 12]`，故输出 `2`\r\n\n### 示例三\n#### 输入\n```\r\n1 2 3\r\n4 5 6\r\n```\n#### 输出\n```\r\n0\r\n```\n#### 说明\n`a` 无论如何都会全输，所以无最优解。\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 87,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:02",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:02",
                "updateTime": "2025-06-20 10:02:11",
                "tagList": [
                    "华为OD",
                    "回溯"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "u46hcw",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977126890229762",
                "questionNum": "3307",
                "title": "2023C-找到它",
                "content": "## 题目描述\n找到它是个小游戏，你需要在一个矩阵中找到给定的单词\r\n\n假设给定单词`HELLOWORLD`，在矩阵中只要能找`HELLOWORLD`就算通过\r\n\n注意区分英文字母大小写，并且你只能上下左右行走，不能走回头路\r\n\n## 输入描述\n输入第一行包含两个整数`N M (0 < N, M < 21)`\r\n\n分别表示`N`行`M`列的矩阵\r\n\n第二行是长度不超过`100`的单词`W`\r\n\n在整个矩阵中给定单词`W`只会出现一次\r\n\n从第`3`行到第`N+2`是只包含大小写英文字母的长度为`M`的字符串矩阵\r\n\n## 输出描述\n如果能在矩阵中连成给定的单词，则输出给定单词首字母在矩阵中的位置为第几行第几列否则输出 `NO`\r\n\n## 示例一\n### 输入\n```\r\n5 5\r\nHELLOWORLD\r\nCPUCY\r\nEKLQH\r\nCHELL\r\nLROWO\r\nDGRBC\r\n```\n### 输出\n```\r\n3 2\r\n```\n## 示例二\n### 输入\n```\r\n5 5\r\nHelloworld\r\nCPUCh\r\nwolle\r\norldO\r\nEKLQo\r\nPGRBC\r\n```\n### 输出\n```\r\nNO\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 34,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:02",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:02",
                "updateTime": "2025-06-20 10:23:20",
                "tagList": [
                    "华为OD",
                    "回溯"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ztt1fd",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977127087362049",
                "questionNum": "3308",
                "title": "2024D-字符串拼接",
                "content": "## 题目描述\n给定`M (0<M<=30)`个字符`(a-z)`，从中取出任意字符(每个字符只能用一次)拼接成长度为`N (0<N<=5)`的字符串，要求相同的字符不能相邻，计算出给定的字符列表能拼接出多少种满足条件的字符串，输入非法或者无法拼接出满足条件的字符串则返回`0`。\r\n\n## 输入描述\n给定的字符列表和结果字符串长度，中间使用空格`(\" \")`拼接\r\n\n## 输出描述\n满足条件的字符串个数\r\n\n## 示例一\n### 输入\n```\r\nabc 1\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n给定的字符为`abc`，结果字符串长度为`1`，可以拼接成`a,b,c`，共`3`种\r\n\n## 示例二\n### 输入\n```\r\naabc 3\r\n```\n### 输出\n```\r\n8\r\n```\n### 说明\n给定的字符为`aabc`，结果字符串长度为`3`，可以拼接成`abc,acb,bac,bca,cba,cab,aba,aca`，共`8`种\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 52,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:02",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:02",
                "updateTime": "2025-06-20 10:26:15",
                "tagList": [
                    "华为OD",
                    "回溯"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "nty6z0",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977127359991810",
                "questionNum": "3309",
                "title": "2023A-硬件产品销售方案",
                "content": "## 题目描述\n某公司目前推出了 AI 开发者套件、AI 加速卡、AI 加速模块、AI 服务器、智能边缘多种硬件产品，每种产品包含若干个型号。现某合作厂商要采购金额为 `amount` 元的硬件产品搭建自己的 AI 基座。假设当前库存有 `N` 种产品，每种产品的库存量充足，给定每种产品的价格，记为 `price`（不存在价格相同的产品型号）。请为合作厂商列出所有可能的产品组合。\r\n\n## 输入描述\n输入包含采购金额 `amount` 和产品价格列表 `price`。第一行为 `amount`，第二行为 `price`。\r\n\n## 输出描述\n输出为组合列表。例如：`[[500], [200, 300], [100, 200, 200], [100, 100, 300], [100, 100, 100, 200], [100, 100, 100, 100, 100]]`\r\n\n## 备注\n1. 对于给定输入，产品组合少于 `150` 种。输出的组合为一个数组，数组的每个元素也是一个数组，表示一种组合方案。如果给定产品无法组合金额为 `amount` 元的方案，那么返回空列表。\r\n2. 两种组合方案，只要存在一种产品的数量不同，那么方案认为是不同的。\r\n3. 每种产品型号价格不相同\r\n4. `1 <= 产品类型数量 <= 30`\r\n5. `100 <= 产品价格 <= 20000`\r\n6. `100 <= 采购金额 <= 50000`\r\n\n## 示例一\n### 输入\n```\r\n500\r\n100, 200, 300, 500\r\n```\n### 输出\n```\r\n[[100, 100, 100, 100, 100], [100, 100, 100, 200], [100, 100, 300], [100, 200, 200], [200, 300], [500]]\r\n```\n## 示例二\n### 输入\n```\r\n100\r\n[100]\r\n```\n### 输出\n```\r\n[[100]]\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 38,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:02",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:02",
                "updateTime": "2025-06-20 10:40:16",
                "tagList": [
                    "华为OD",
                    "回溯"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "1clc1x",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977127649398785",
                "questionNum": "3310",
                "title": "2023A-基站维修工程师",
                "content": "## 题目\n小王是一名基站维护工程师，负责某区域的基站维护。某地方有 `n` 个基站，`1 < n < 10`，已知各基站之间的距离 `s`，`0 < s < 500 `，并且基站 `x` 到基站 `y` 的距离，与基站 `y` 到 基站 `x` 的距离并不一定会相同。小王从基站 `0` 出发，途经每个基站 `1` 次，然后返回基站 `0` ，需要请你为他选择一条距离最短的路。\r\n\n## 输入\n站点数 `n` 和各站点之间的距离，均为整数。\r\n\n```\r\n3     // 表示站点数\r\n0 2 1 // 表示站点0到各站点的路程\r\n1 0 2 // 表示站点1到各站点的路程\r\n2 1 0 // 表示站点2到各站点的路程\r\n```\n## 输出描述\n最短路程的数值。\r\n\n## 示例一\n### 输入\n```\r\n3\r\n0 2 1\r\n1 0 2\r\n2 1 0\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n路线为`0 -> 2 -> 1 -> 0`，距离为所有路线最小 `1 + 1 + 1 = 3`。如果选择路线`0 -> 1 -> 2 -> 0`，距离为 `2 + 2 + 2 = 6`。\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 49,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:02",
                "updateTime": "2025-06-21 18:42:16",
                "tagList": [
                    "华为OD",
                    "回溯"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "w0eg19",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977127812976642",
                "questionNum": "3311",
                "title": "2023B-第N个排列",
                "content": "给定参数 `n` ，从 `1` 到 `n` 会有 `n` 个整数 `1，2，3，...，n`。这 `n` 个数字共有`n!`种排列，按大小顺序升序列出所有排列情况，并一一标记。当 `n = 3` 时，所有排列如下：`\"123\",\"132\",\"213\",\"231\",\"312\",\"321\"`。\r\n\n给定 `n` 和 `k` 返回第 `k`个排列。\r\n\n## 输入\n第一行为 `n`第二行为 `k`n 的范围是 `1 ~ 9`k 的范围是 `1 ~ n!`\r\n\n## 输出\n输出排列第 `k` 位置的数字\r\n\n## 示例一\n### 输入\n```\r\n3\r\n3\r\n```\n### 输出\n```\r\n213\r\n```\n## 示例二\n### 输入\n```\r\n2\r\n2\r\n```\n### 输出\n```\r\n21\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 47,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:02",
                "updateTime": "2025-06-20 12:00:57",
                "tagList": [
                    "华为OD",
                    "回溯"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "jgz2pv",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977127993331714",
                "questionNum": "3312",
                "title": "2023B-出错的或电路",
                "content": "## 题目描述\n某生产门电路的厂商发现某一批次的或门电路不稳定，具体现象为计算两个二进制数的或操作时，第一个二进制数中某两个比特位会出现交换，交换的比特位置是随机的，但只交换这两个位，其他位不变。\r\n\n很明显，这个交换可能会影响最终的或结果，也可能不会有影响。\r\n\n为了评估影响和定位出错的根因，工程师需要研究在各种交换的可能下，最终的或结果发生改变的情况有多少种。\r\n\n## 输入描述\n第一行有一个正整数 `N`；其中 `1 ≤ N ≤ 1000000`。\r\n\n第二行有一个长为 `N` 的二进制数，表示与电路的第一个输入数，即会发生比特交换的输入数。\r\n\n第三行有一个长为 `N` 的二进制数，表示与电路的第二个输入数。注意第二个输入数不会发生比特交换。\r\n\n## 输出描述\n输出只有一个整数，表示会影响或结果的交换方案个数。\r\n\n## 示例一\n### 输入\n```\r\n3\r\n010\r\n110\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n原本 `010` 和 `110` 的或结果是 `110`，但第一个输入数可能会发生如下三种交换：\r\n\n1. 交换第 `1` 个比特和第 `2` 个比特，第一个输入数变为 `100`，计算结果为 `110`，计算结果不变\r\n2. 交换第 `1` 个比特和第 `3` 个比特，第一个输入数变为 `010`，计算结果为 `110`，计算结果不变\r\n3. 交换第 `2` 个比特和第 `3` 个比特，第一个输入数变为 `001`，计算结果为 `111`，计算结果改变\r\n\n故只有一种交换会改变计算结果。\r\n\n## 示例二\n### 输入\n```\r\n6\r\n011011\r\n110110\r\n```\n### 输出\n```\r\n4\r\n```\n### 说明\n原本 `011011` 和 `110110` 的或结果是 `111111`，但第一个输入数发生如下比特交换会影响最终计算结果：\r\n\n1. 交换第 `1` 个比特和第 `3` 个比特，第一个输入数变为 `110011`，计算结果变为 `110111`\r\n2. 交换第 `1` 个比特和第 `6` 个比特，第一个输入数变为 `111010`，计算结果变为 `111110`\r\n3. 交换第 `3` 个比特和第 `4` 个比特，第一个输入数变为 `010111`，计算结果变为 `110111`\r\n4. 交换第 `4` 个比特和第 `6` 个比特，第一个输入数变为 `011110`，计算结果变为 `111110`\r\n\n其他的交换都不会影响计算结果，故输出 `4`。\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 48,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:02",
                "updateTime": "2025-06-23 19:38:05",
                "tagList": [
                    "华为OD",
                    "位运算"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "88v8gf",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977128203046914",
                "questionNum": "3313",
                "title": "2023B-分苹果",
                "content": "## 题目描述\nA，B两团体想把苹果分为两堆。\r\n\nA盼望依照它的计算规则**平分苹果**，他的计算是依照二进制加法进行计算，而且不计算进位。\r\n\n以`12 + 5`为例，按照A的计算规则有`12 + 5 = bin (1100)+ bin(0101) = bin(1001) = 9` 成立。\r\n\nB的计算是最常见的十进制加法，包含进位。B期望在满足A的情形下获取苹果分量最多。\r\n\n输入苹果的数目跟每个苹果的重量，输出满意A的情形下获取的苹果总重量；假如无法满意A的请求，输出`-1`。\r\n\n## 输入描述\n苹果的数目跟每个苹果分量\r\n\n## 输出描述\nB在满意A的情形下获取的苹果总分量，假如B无法满意A的请求，输出`-1`。\r\n\n## 示例一\n### 输入\n```\r\n2\r\n12 5\r\n```\n### 输出\n```\r\n-1\r\n```\n## 示例二\n### 输入\n```\r\n2\r\n12 12\r\n```\n### 输出\n```\r\n12\r\n```\n## 示例三\n### 输入\n```\r\n3\r\n3 5 6\r\n```\n### 输出\n```\r\n11\r\n```\n### 说明\n按照A的计算方法 `5 + 6 = 3` ，不进行二进制进位，`bin(101)+ bin(110) = bin(011) = 3` 。再按照B的方法计算，`5 + 6 = 11`。\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 86,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:02",
                "updateTime": "2025-06-21 14:06:23",
                "tagList": [
                    "华为OD",
                    "位运算"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ww4nzz",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977128387596290",
                "questionNum": "3314",
                "title": "2023B-响应报文时间",
                "content": "## 题目描述\n1. IGMP 协议中，有一个字段称作最大响应时间(Max Response Time)，`HOST`收到查询报文，解析出`MaxResponseTime` 字段后，需要在`(0，MaxResponseTime]`时间(s)内选取随机时间回应一个响应报文，如果在随机时间内收到一个新的查询报文，则会根据两者时间的大小，选取小的一方刷新回应时间。\r\n2. 最大响应时间有如下计算方式:\r\n\n当 `MaxRespCode < 128`，`MaxRespTime = MaxRespCode`;\r\n\n当 `MaxRespCode ≥ 128`，`MaxRespTime = (mant | 0x10) << (exp + 3)`;\r\n\n注：`exp`最大响应时间的高`5~7位`；`mant`为最大响应时间的低`4`位\r\n\n其中接收到的`MaxRespCode` 最大值为 `255`，以上出现所有字段均为无符号数。\r\n\n现在我们认为` HOST`收到查询报文时，选取的随机时间必定为最大值，现给出 `HOST` 收到查询报文个数`C`，`HOST` 收到该报文的时间`T`，以及查询报文的最大响应时间字段值`M`，请计算出`HOST` 发送响应报文的时间。\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/4X6eLN1n_1721039803642_mianshiya.png)\r\n\n## 输入描述\n第一行为查询报文个数`C`，后续每行分别为`HOST` 收到报文时间 `T`，及最大响应时间`M`，以空格分割。\r\n\n## 输出描述\n`HOST`发送响应报文的时间。\r\n\n## 示例一\n### 输入\n```\r\n3\r\n0 20\r\n1 10\r\n8 20\r\n```\n### 输出\n```\r\n11\r\n```\n### 说明\n收到`3`个报文\r\n\n第`0`秒收到第`1`个报文，响应时间为`20`秒，则要到`0+20=20`秒响应\r\n\n第`1`秒收到第`2`个报文，响应时间为`10`秒，则要到`1+10=11`秒响应，与上面的报文的响应时间比较获得响应时间最小为`11`秒\r\n\n第`8`秒收到第`3`个报文，响应时间为`20`秒，则要到`8+20=28`秒响应，与第上面的报文的响应时间比较获得响应时间最小为`11`秒\r\n\n最终得到最小响应报文时间为`11`秒\r\n\n## 示例二\n### 输入\n```\r\n2\r\n0 255\r\n200 60\r\n```\n### 输出\n```\r\n260\r\n```\n### 说明\n收到`2`个报文。\r\n\n第`0`秒收到第`1`个报文，响应时间为`255`秒，则要到`(15`` |`` 0x10) << (7 + 3)`` = ``31744`秒响应(`mant = 15`，`exp =7`)\r\n\n第`200`秒收到第`2`个报文，响应时间为`60`秒，则要到`200+60`` = ``260`秒响应，与第上面的报文的响应时间比较获得响应时间最小为`260`秒\r\n\n最终得到最小响应报文时间为`260`秒\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 62,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:02",
                "updateTime": "2025-06-24 08:52:27",
                "tagList": [
                    "华为OD",
                    "位运算"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "4ptsz5",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977128622477314",
                "questionNum": "3315",
                "title": "2023A-农场施肥",
                "content": "## 题目描述\n某农场主管理了一大片果园，`fields` 表示不同果林的面积，单位：`m^2`，现在要为所有的果林施肥且必须在 `n`天之内完成，否则影响收成。小布是果林的工作人员，他每次选择一片果林进行施肥，且一片果林施肥完后当天不再进行施肥作业。\r\n\n假设施肥机的能效为 `k`，单位: `m^2/day`，请问至少租赁能效 `k` 为多少的施肥机才能确保不影响收成？如果无法完成施肥任务，则返回 `-1`。\r\n\n## 输入描述\n第一行输入为 `m` 和 `n`，`m` 表示 `fields` 中的元素个数，`n` 表示施肥任务必须在 `n` 天内 (含 `n` 天) 完成第二行输入为 `fields`，`fields[i]`表示果林 `i` 的面积，单位: `m^2`\r\n\n## 输出描述\n对于每组数据，输出最小施肥机的能效 `k`，无多余空格。\r\n\n## 备注\n`1 ≤ m ≤ 10^4`，`1 ≤ n ≤ 10^9`，`1 ≤ fields[i] ≤ 10^9`\r\n\n## 示例一\n### 输入\n```\r\n5 7\r\n5 7 9 15 10\r\n```\n### 输出\n```\r\n9\r\n```\n### 说明\n当能效 `k` 为 `9` 时，`fields[0]`需要 `1` 天，`fields[1]`需要 `1` 天，`fields[2]`需要 `1` 天，`fields[3]`需要 `2` 天，`fields[4]`需要 `2` 天，共需要 `7` 天，不会影响收成。\r\n\n## 示例二\n### 输入\n```\r\n3 1\r\n2 3 4\r\n```\n### 输出\n```\r\n-1\r\n```\n### 说明\n由于一天最多完成一片果林的施肥，无论 `k` 为多少都至少需要 `3` 天才能完成施肥，因此返回`-1`。\r\n\n## 示例三\n### 输入\n```\r\n3 4\r\n2 2 1\r\n```\n### 输出\n```\r\n2\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 72,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:02",
                "updateTime": "2025-06-25 08:55:23",
                "tagList": [
                    "华为OD",
                    "二分查找"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "eyag70",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977128819609601",
                "questionNum": "3316",
                "title": "2023B-最佳植树距离",
                "content": "## 题目描述\n小明在直线的公路上种树，现在给定可以种树的坑位的数量和位置，以及需要种多少棵树苗，问树苗之间的最小间距是多少时，可以保证种的最均匀（两棵树苗之间的最小间距最大）\r\n\n## 输入\n输入三行：\r\n\n- 第一行一个整数：坑位的数量\r\n- 第二行以空格分隔的数组：坑位的位置\r\n- 第三行一个整数：需要种植树苗的数量\r\n\n## 输出\n树苗之间的最小间距\r\n\n## 示例一\n### 输入\n```\r\n7\r\n1 3 6 7 8 11 13\r\n3\r\n```\n### 输出\n```\r\n6\r\n```\n### 说明\n三颗树苗分别种在 `1`、`7`、`13` 的位置，可以保证种的最均匀，树苗之间的最小间距为 `6`。如果选择最小间距为 `7`，则无法种下`3`颗树苗。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 61,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:02",
                "updateTime": "2025-06-25 09:29:08",
                "tagList": [
                    "华为OD",
                    "二分查找"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "xnajf1",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977129029324802",
                "questionNum": "3317",
                "title": "2024D-小明找位置",
                "content": "## 题目描述\n小朋友出操，按学号从小到大排成一列；小明来迟了，请你给小明出个主意，让他尽快找到他应该排的位置。\r\n\n算法复杂度要求不高于 `nlog(n)`；学号为整数类型，`队列规模 <= 10000`；\r\n\n## 输入描述\n- 第一行：输入已排成队列的小朋友的学号（正整数），以`\",\"`隔开；例如：`93,95,97,100,102,123,155`\r\n- 第二行：小明学号，如 `110`；\r\n\n## 输出描述\n输出一个数字，代表队列位置（从 `1` 开始）。\r\n\n## 示例\n### 输入\n```\r\n93,95,97,100,102,123,155\r\n110\r\n```\n### 输出\n```\r\n6\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 67,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:02",
                "updateTime": "2025-06-25 15:11:50",
                "tagList": [
                    "华为OD",
                    "二分查找"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "nikm60",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977129188708354",
                "questionNum": "3318",
                "title": "2024D-机器人搬砖",
                "content": "## 题目描述\n机器人搬砖，一共有`N`堆砖存放在`N`个不同的仓库中，第`i`堆砖中有`bricks[i]`块砖头，要求在`8`小时内搬完。机器人每小时能搬砖的数量取决于有多少能量格，机器人一个小时中只能在一个仓库中搬砖，机器人的能量格每小时补充一次且能量格只在这一个小时有效，为使得机器人损耗最小化，尽量减小每次补充的能量格数。\r\n\n为了保障在`8`小时内能完成搬砖任务，请计算每小时给机器人充能的最小能量格数。\r\n\n备注:\r\n\n1、无需考虑机器人补充能量格的耗时\r\n\n2、无需考虑机器人搬砖的耗时\r\n\n3、机器人每小时补充能量格只在这一个小时中有效。\r\n\n## 输入描述\n程序输入为`\"30 12 25 8 19\"`一个整数数组，数组中的每个数字代表第i堆砖的个数，每堆砖的个数不超过`100`\r\n\n## 输出描述\n输出在`8`小时内完成搬砖任务，机器人每小时最少需要充多少个能量格；如果`8`个小时内无论如何都完成不了任务，则输出`\"-1\"`\r\n\n## 示例\n### 输入\n```\r\n30 12 25 8 19\r\n```\n### 输出\n```\r\n15\r\n```\n### 说明\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 54,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:02",
                "updateTime": "2025-06-25 15:27:36",
                "tagList": [
                    "华为OD",
                    "二分查找"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "umq6gi",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977129440366593",
                "questionNum": "3319",
                "title": "2023A-开放日活动",
                "content": "## 题目描述\n某部门开展 Family Day 开放日活动，其中有个从桶里取球的游戏，游戏规则如下：有 `N` 个容量一样的小桶等距排开，且每个小桶都默认装了数量不等的小球，每个小桶装的小球数量记录在数组`bucketBallNums`中，游戏开始时，要求所有桶的小球总数不能超过`SUM`，如果小球总数超过`SUM`，则需对所有的小桶统一设置一个尽可能大的容量最大值`maxCapacity`，并需将超过容量最大值的小球拿出来，直至所有小桶里的小球数量均不大于`maxCapacity`。\r\n\n请您根据输入的数据，计算出**尽可能大的容量最大值**`maxCapacity`，并输出从每个小桶里拿出的小球数量。\r\n\n**限制规则一**如果所有小桶的小球总和小于`SUM`，则无需设置容量值，并且无需从小桶中拿球出来，返回结果`[]`\r\n\n**限制规则二**如果所有小桶的小球总和大于`SUM`，则需设置一个尽可能大的容量最大值`maxCapacity`，并且需从小桶中拿球出来，返回从每个小桶拿出的小球数量组成的数组\r\n\n## 输入\n第一行输入`2`个正整数，数字之间使用空格隔开，其中第一个数字表示`SUM`，第二个数字表示`bucketBallNums`数组长度；第二行输入`N`个正整数，数字之间使用空格隔开，表示`bucketBallNums`的每一项。\r\n\n## 输出\n一个数组。\r\n\n## 示例一\n### 输入\n```\r\n14 7\r\n2 3 2 5 5 1 4\r\n```\n### 输出\n```\r\n[0,1,0,3,3,0,2]\r\n```\n### 说明\n小球总数为`22`，`SUM = 14`，超出范围了，需从小桶取球。\r\n\n- `maxCapacity = 1`，取出球后，`1 1 1 1 1 1 1`， 桶里剩余小球总和为`7`，远小于`14`\r\n- `maxCapacity = 2`，取出球后，`2 2 2 2 2 1 2`，桶里剩余小球总和为`13`，小于`14`\r\n- `maxCapacity = 3`，取出球后，`2 3 2 3 3 1 3`，桶里剩余小球总和为`16`，大于`14`\r\n\n因此选择`maxCapacity`为`2` ，每个小桶小球数量大于 `2` 的都需要拿出来。\r\n\n## 示例二\n### 输入\n```\r\n3 3\r\n1 2 3\r\n```\n### 输出\n```\r\n[0,1,2]\r\n```\n### 说明\n小球总数为`6`，`SUM = 3`，超出范围了，需从小桶取球。\r\n\n取`maxCapacity = 1`，则小球总数为 3，从 `0` 号桶取出 `0` 个球，从 `1` 号桶取出 `1` 个球，从 `2` 号桶取出 `2` 个球。故输出`[0, 1, 2]`。\r\n\n## 示例三\n### 输入\n```\r\n6 2\r\n3 2\r\n```\n### 输出\n```\r\n[]\r\n```\n### 说明\n小球总数为`5`，`SUM = 6`，无需从小桶取球；\r\n\n## 备注\n`1 <= bucketBallNums[i] <= 10^9`\r\n\n``1 <= bucketBallNums.length = N <= 10^5`\r\n\n`1 <= maxCapacity <= 10^9`\r\n\n`1 <= SUM <= 10^9`\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 55,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-25 11:22:32",
                "tagList": [
                    "华为OD",
                    "二分查找"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "wtqb76",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977129822048258",
                "questionNum": "3320",
                "title": "2023B-食堂供餐",
                "content": "## 题目描述\n某公司员工食堂以盒饭方式供餐。为将员工取餐排队时间降低为`0`，食堂的供餐速度必须要足够快。现在需要根据以往员工取餐的统计信息，计算出一个刚好能达成排队时间为`0`的最低供餐速度。即，食堂在每个单位时间内必须至少做出多少份盒饭才能满足要求。\r\n\n## 输入\n- 第`1`行为一个正整数`N`，表示食堂开餐时长。`1 <= N <= 1000` \r\n- 第`2`行为一个正整数`M`，表示开餐前食堂已经准备好的盒饭份数。`Pi <= M <= 1000`\r\n- 第`3`行为`N`个正整数，用空格分隔，依次表示开餐时间内按时间顺序每个单位时间进入食堂取餐的人数`Pi`\r\n- `1 <= i <= N`，`0 <= Pi <= 100`\r\n\n## 输出\n一个整数，能满足题目要求的最低供餐速度(每个单位时间需要做出多少份盒饭)。\r\n\n## 说明\n每人只取一份盒饭。需要满足排队时间为`0`，必须保证取餐员工到达食堂时，食堂库存盒饭数量不少于本次来取餐的人数。第一个单位时间来取餐的员工只能取开餐前食堂准备好的盒饭。每个单位时间里制作的盒饭只能供应给后续单位时间来的取餐的员工，食堂在每个单位时间里制作的盒饭数量是相同的。\r\n\n## 示例一\n### 输入\n```\r\n3\r\n14\r\n10 4 5\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n本样例中，总共有`3`批员工就餐，每批人数分别为`10`、`4`、`5`。\r\n\n开餐前食堂库存`14`份。食堂每个单位时间至少要做出`3`份餐饭才能达成排队时间为`0`的目标。具体情况如下：第一个单位时间来的`10`位员工直接从库存取餐，取餐后库存剩余`4`份盒饭，加上第一个单位时间做出的`3`份，库存有`7`份。\r\n\n第二个单位时间来的`4`员工从库存的`7`份中取`4`份，取餐后库存剩余`3`份盒饭，加上第二个单位时间做出的`3`份，库存有`6`份。\r\n\n第三个单位时间来的员工从库存的`6`份中取`5`份，库存足够。\r\n\n如果食堂在单位时间只能做出`2`份餐饭，则情况如下：\r\n\n第一个单位时间来的`10`位员工直接从库存取餐，取餐后库存剩余`4`份盒饭，加上第一个单位时间做出的`2`份，库存有`6`份。第二个单位时间来的`4`员工从库存的`6`份中取`4`份，取餐后库存剩余`2`份盒饭，加上第二个单位时间做出的`2`份，库存有`4`份。\r\n\n第三个单位时间来的员工需要取`5`份，但库存只有`4`份，库存不够。\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 53,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-24 11:55:18",
                "tagList": [
                    "华为OD",
                    "二分查找"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "9iv6tt",
                "hasChoiceQuestion": false
            }
        ],
        "total": "209",
        "size": "20",
        "current": "7",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "11"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814977130014986242",
                "questionNum": "3321",
                "title": "2024D-部门人力分配",
                "content": "## 题目描述\n部门在进行需求开发时需要进行人力安排。当前部门需要完成 `N` 个需求，需求用 `requirements[i]` 表示，`requirements[i]` 表示第 `i` 个需求的工作量大小，单位：人月。这部分需求需要在 `M` 个月内完成开发，进行人力安排后每个月的人力是固定的。\r\n\n目前要求每个月最多有 `2` 个需求开发，并且每个月需要完成的需求不能超过部门人力。请帮部门评估在满足需求开发进度的情况下，每个月需要的最小人力是多少？\r\n\n## **输入描述**\n输入第一行为 `M` ，第二行为 `requirements` 。\r\n\n`M` 表示需要开发时间要求，`requirements` 表示每个需求工作量大小\r\n\n`N` 为 `requirements` 长度，`1 ≤ N / 2 ≤ M ≤ N ≤ 10000`，`1 ≤ requirements[i]≤ 10^9`\r\n\n## **输出描述**\n对于每一组测试数据，输出部门需要人力需求，行末无多余的空格。\r\n\n## **示例**\n### **输入**\n```\r\n3\r\n3 5 3 4\r\n```\n### **输出**\n```\r\n6\r\n```\n### **说明**\n输入数据两行，第一行输入数据 `3` 表示开发时间要求，第二行输入数据表示需求工作量大小，输出数据一行，表示部门人力需求。\r\n\n当选择人力为`6`时，`2`个需求量为`3`的工作可以在`1`个月里完成，其他`2`个工作各需要`1`个月完成。可以在`3`个月内完成所有需求。\r\n\n当选择人力为`5`时，`4`个工作各需要`1`个月完成，一共需要`4`个月才能完成所有需求。\r\n\n因此`6`是部门最小的人力需求。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 58,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-21 17:26:33",
                "tagList": [
                    "华为OD",
                    "二分查找"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "pt04bm",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977130275033089",
                "questionNum": "3322",
                "title": "2024D-项目排期",
                "content": "## 题目描述\n项目组共有`N`个开发人员，项目经理接到了`M`个独立的需求，每个需求的工作量不同，且每个需求只能由一个开发人员独立完成，不能多人合作。假定各个需求之间无任何先后依赖关系，请设计算法帮助项目经理进行工作安排，使整个项目能用最少的时间交付。\r\n\n## 输入描述\n第一行输入为`M`个需求的工作量，单位为天，用逗号隔开。\r\n\n例如：`X1 X2 X3 … Xm` 。表示共有`M`个需求，每个需求的工作量分别为`X1`天，`X2`天…`Xm`天。\r\n\n其中`0 < M < 30`；`0 < Xm < 200`\r\n\n第二行输入为项目组人员数量`N`\r\n\n## 输出描述\n最快完成所有工作的天数\r\n\n## 示例\n### 输入\n```\r\n6 2 7 7 9 3 2 1 3 11 4\r\n2\r\n```\n### 输出\n```\r\n28\r\n```\n### 说明\n共有两位员工，其中一位分配需求 `6 2 7 7 3 2 1` 共需要`28`天完成，另一位分配需求 `9 3 11 4` 共需要`27`天完成，故完成所有工作至少需要`28`天。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 51,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-21 17:42:41",
                "tagList": [
                    "华为OD",
                    "二分查找"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "y6aej5",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977130484748290",
                "questionNum": "3323",
                "title": "2024D-孙悟空吃蟠桃",
                "content": "## 题目描述\n孙悟空喜欢吃蟠桃，一天他趁守卫蟠桃园的天兵天将离开了而偷偷的来到王母娘娘的蟠桃园偷吃蟠桃。\r\n\n已知蟠桃园有 `N` 棵蟠桃树，第 `i`棵蟠桃树上有 `N[i]`（大于 `0`）个蟠桃，天兵天将将在 `H`（不小于蟠桃树棵数）小时后回来。\r\n\n孙悟空可以决定他吃蟠桃的速度 `K` （单位：个/小时），每个小时他会选择一颗蟠桃树，从中吃掉 `K` 个蟠桃，如果这棵树上的蟠桃数小于 `K` ，他将吃掉这棵树上所有蟠桃，然后这一小时内不再吃其余蟠桃树上的蟠桃。\r\n\n孙悟空喜欢慢慢吃，但仍想在天兵天将回来前将所有蟠桃吃完。\r\n\n求孙悟空可以在 `H` 小时内吃掉所有蟠桃的最小速度 `K`（`K` 为整数）。\r\n\n## 输入描述\n第一行输入为 `N` 个数字，`N` 表示桃树的数量，这 `N` 个数字表示每颗桃树上蟠桃的数量\r\n\n第二行输入为一个数字，表示守卫离开的时间 `H`。\r\n\n其中数字通过空格分割，`N`、`H` 为正整数，每颗树上都有蟠桃，且 `0 < N < 10000`，`0 < H < 10000`。\r\n\n## 输出描述\n吃掉所有蟠桃的最小速度 `K`（`K` 为整数），无解或者输入异常时输出 `0` 。\r\n\n## 示例一\n### 输入\n```\r\n3 11 6 7 8\r\n1\r\n```\n### 输出\n```\r\n0\r\n```\n## 示例二\n### 输入\n```\r\n3 11 6 7 8\r\n5\r\n```\n### 输出\n```\r\n11\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 58,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-22 11:07:45",
                "tagList": [
                    "华为OD",
                    "二分查找"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "wnkqhu",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977131004841985",
                "questionNum": "3325",
                "title": "2024D-有效子字符串",
                "content": "## 题目\n输入两个字符串`S`和`L`，都只包含小写字母，`len(S) <= 100`，`len(L) <= 500000`。判断`S`是否是`L`的有效子字符串。\r\n\n- 判定规则：`S`中的每个字符在`L`中都能找到（可以不连续），且`S`在`L`中字符的前后顺序与`S`中顺序要保持一致。\r\n\n例如：\r\n\n`S = \"ace\"`是`L = \"abcde\"`的一个子序列，且有效字符是`a`、`c`、`e`，而`\"aec\"`不是有效子序列，且有效字符只有`a`、`e`（因为相对位置不同）。\r\n\n## 输入\n输入两个字符串`S`和`L`，都只包含小写字母，`len(S) <= 100`，`len(L) <= 500000`，先输入`S`再输入`L`每个字符串占一行。\r\n\n## 输出描述\n`S`串**最后一个有效字符**在`L`中的位置，首位从`0`开始计算。无有效字符返回 `-1`\r\n\n## 示例一\n### 输入\n```\r\nace\r\nabcde\r\n```\n### 输出\n```\r\n4\r\n```\n## 示例二\n### 输入\n```\r\nfgh\r\nabcde\r\n```\n### 输出\n```\r\n-1\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 64,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-24 13:54:47",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "hd40j5",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977131235528705",
                "questionNum": "3326",
                "title": "2023B-观看文艺汇演",
                "content": "某公园将举行多场文艺表演，很多演出都是同时进行，一个人只能同时观看一场演出，且不能迟到早退，由于演出分布在不同的演出场地，所以连续观看的演出最少有 `15` 分钟的时间间隔，小明是一个狂热的文艺迷，想观看尽可能多的演出。现给出演出时间表，请帮小明计算他最多能观看几场演出。\r\n\n## 输入\n第一行为一个数 `N`，表示演出场数，`1 <= N <= 1000`。\r\n\n接下来 `N` 行，每行两个空格分割的整数，第一个整数 `T` 表示演出的开始时间，第二个整数 `L` 表示演出的持续时间，`T` 和 `L` 的单位为分钟，`0 <= T <= 1440, 0 < L <= 100`。\r\n\n## 输出\n最多能观看的演出场数。\r\n\n## 示例一\n### 输入\n```\r\n2\r\n720 120\r\n840 120\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n第一场演出开始时间是第`720`分钟，经过`120`分钟演出结束，即第`840`分钟结束，此时还需要`15`分钟的间隔时间，即要等到第`855`分钟才可以看下一场演出，故来不及看第二场在第`840`分钟开始的演出。最多只能看`1`场演出。\r\n\n## 示例二\n### 输入\n```\r\n2\r\n20 60\r\n100 60\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n第一场演出开始时间是第`20`分钟，经过`60`分钟演出结束，即第`80`分钟结束，此时还需要`15`分钟的间隔时间，即要等到第`95`分钟才可以看下一场演出，第二场演出在第`100`分钟开始的演出，赶得上观看第二场演出。最多可以观看`2`场演出。\r\n\n## 示例三\n### 输入\n```\r\n4\r\n10 20\r\n100 20\r\n150 60\r\n80 40\r\n```\n### 输出\n```\r\n3\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 53,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-22 11:23:47",
                "tagList": [
                    "华为OD",
                    "DP&贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "cr4pgi",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977131428466689",
                "questionNum": "3327",
                "title": "2024D-虚拟游戏理财",
                "content": "## 题目描述\n在一款虚拟游戏中生活，你必须进行投资以增强在虚拟游戏中的资产以免被淘汰出局。现有一家 Bank，它提供有若干理财产品 `m`，风险及投资回报不同，你有 `N`（元）进行投资，能接受的总风险值为 `X`。\r\n\n你要在可接受范围内选择最优的投资方式获得最大回报。\r\n\n说明：\r\n\n1、在虚拟游戏中，每项投资风险值相加为总风险值；\r\n\n2、在虚拟游戏中，最多只能投资 `2` 个理财产品；\r\n\n3、在虚拟游戏中，最小单位为整数，不能拆分为小数；\r\n\n投资额*回报率=投资回报\r\n\n## **输入描述**\n第一行：产品数(取值范围`[1, 20]`)，总投资额(整数，取值范围`[1, 10000]`)，可接受的总风险(整数，取值范围`[1, 200]`)\r\n\n第二行：产品投资回报率序列，输入为整数，取值范围`[1,60]`\r\n\n第三行：产品风险值序列，输入为整数，取值范围`[1,100]`\r\n\n第四行：最大投资额度序列，输入为整数，取值范围`[1,10000]`\r\n\n## **输出描述**\n每个产品的投资额序列\r\n\n## **补充说明**\n1、在虚拟游戏中，每项投资风险值相加为总风险值；\r\n\n2、在虚拟游戏中，最多只能投资 2 个理财产品；\r\n\n3、在虚拟游戏中，最小单位为整数，不能拆分为小数；\r\n\n投资额*回报率=投资回报\r\n\n## **示例**\n### **输入**\n```\r\n5 100 10\r\n10 20 30 40 50\r\n3 4 5 6 10\r\n20 30 20 40 30\r\n```\n### **输出**\n```\r\n0 30 0 40 0\r\n```\n### **说明：**\n投资第二项 `30` 个单位，第四项 `40` 个单位，总的投资风险为两项相加为 `4+6=10`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 43,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:03",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-22 11:40:06",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "mqoxae",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977131814342658",
                "questionNum": "3328",
                "title": "2024D-分割均衡字符串",
                "content": "## 题目描述\n均衡串定义: 字符串只包含两种字符，且两种字符的个数相同。\r\n\n给定一个均衡字符串，请给出可分割成新的均衡子串的最大个数。\r\n\n约定字符串中只包含大写的`X`和`Y`两种字符。\r\n\n## 输入描述\n均衡串: `XXYYXY`\r\n\n字符串的长度`[2,10000]`。给定的字符串均为均衡串。\r\n\n## 输出描述\n输出一个数字，表述可分割成新的均衡子串的最大个数。\r\n\n如上述例子可分割为两个子串，`XXYY`和`XY`，输出答案为`2`。\r\n\n## 补充说明\n分割后的子串，是原字符串的连续子串。\r\n\n## 示例\n### 输入\n```\r\nXXYYXY\r\n```\n### 输出\n```\r\n2\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 37,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-22 11:53:47",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "te3jpc",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977131986309122",
                "questionNum": "3329",
                "title": "2024D-在规定时间内获得的最大报酬",
                "content": "## 题目描述\n现有`N`个任务需要在`T`时间内处理完成，同一时间只能处理一个任务，处理每个任务所需要的时间固定为`1`。\r\n\n每个任务都有最晚处理时间限制和报酬，在最晚处理时间点之前处理完成任务才可获得对应的报酬奖励。\r\n\n可用于处理任务的时间有限，请问在有限的时间内，可获得的最多报酬?\r\n\n`1 < N < 100`，`1 < T < 100`\r\n\n## 输入描述\n第一行输入两个数`T`和`N`，表示`N`个任务和全部任务的最迟的时间节点`T`。\r\n\n接下来输入`N`行，每一行输入两个数`K`和`L`表示一个任务，`K`为这个任务的最晚完成时间，`L`为完成该任务能够获得的报酬。\r\n\n## 输出描述\n一个整数，表示能够获取的最大报酬。\r\n\n## 示例一\n### 输入\n```\r\n3 4\r\n1 2\r\n1 3\r\n1 4\r\n2 5\r\n```\n### 输出\n```\r\n9\r\n```\n### 说明\n在单位时间`1`，完成任务`2`，获得报酬`4`\r\n\n在单位时间`2`，完成任务`3`，获得报酬`5`\r\n\n## 示例二\n### 输入\n```\r\n3 5\r\n1 3\r\n2 2\r\n3 1\r\n3 4\r\n4 5\r\n```\n### 输出\n```\r\n12\r\n```\n### 说明\n在单位时间`1`，完成任务`0`，（最晚完成时间是`1`），获得报酬`3`\r\n\n在单位时间`2`，完成任务`4`，（最晚完成时间是`4`），获得报酬`5`\r\n\n在单位时间`3`，完成任务`3`，（最晚完成时间是`3`），获得报酬`4`\r\n\n## 示例三\n### 输入\n```\r\n2 3\r\n1 2\r\n2 5\r\n1 5\r\n```\n### 输出\n```\r\n10\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 42,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-22 11:58:48",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "4gjnx9",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977132162469889",
                "questionNum": "3330",
                "title": "2024D-求字符串中所有整数的最小和",
                "content": "## 题目描述\n1. 字符串 `s`，只包含 `a-z，A-Z，+-`；\r\n2. 合法的整数包括 \r\n\n1） 正整数 一个或者多个`0-9`组成，如 `0 2 3 002 102` \r\n\n2）负整数 负号 `-` 开头，数字部分由一个或者多个`0-9`组成，如 `-0 -012 -23 -00023`\r\n\n## 输入描述\n包含数字的字符串\r\n\n## 输出描述\n所有整数的最小和\r\n\n## 示例一\n### 输入\n```\r\nbb1234aa\r\n```\n### 输出\n```\r\n10\r\n```\n### 说明\n## 示例二\n### 输入\n```\r\nbb12-34aa\r\n```\n### 输出\n```\r\n-31\r\n```\n### 说明\n`1+2+(-34) = -31`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 49,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-22 12:08:16",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "cs7xm5",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977132347019266",
                "questionNum": "3331",
                "title": "2024D-小朋友来自多少小区",
                "content": "## 题目描述\n幼儿园组织活动，老师布置了一个任务: 每个小朋友去了解与自己同一个小区的小朋友**还有几个**。我们将这些数量汇总到数组`garden`中，请根据这些小朋友给出的信息，计算班级小朋友至少来自几个小区？\r\n\n## 输入\n`garden = [2, 2, 3]`\r\n\n说明:\r\n\n`garden`数组长度最大为`999`。每个小区的小朋友数量最多`1000`人，也就是`garden`的范围为`[0,999]`\r\n\n## 输出\n一个数字\r\n\n## 示例\n### 输入\n```\r\n2 2 3\r\n```\n### 输出\n```\r\n7\r\n```\n### 说明\n第一个小朋友反馈有两个小朋友和自己同一小区，即此小区有`3`个小朋友\r\n\n第二个小朋友反馈有两个小朋友和自己同一小区，即此小区有`3`个小朋友。\r\n\n这两个小朋友，可能是同一小区的，且此小区的小朋友只有`3`个人。\r\n\n第三个小朋友反馈还有`3`个小朋友与自己同一小区，则这些小朋友只能是另外一个小区的。这个小区有`4`个小朋友。\r\n\n班级里至少有`3+4 = 7`个小朋友。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 45,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-22 12:31:28",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "wen0jd",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977132531568641",
                "questionNum": "3332",
                "title": "2023B-求最小步数",
                "content": "## 题目描述\n求从坐标零点到坐标点`n`的最小步数，一次只能沿横坐标轴向左或向右移动`2` 或`3`\r\n\n注意：途径的坐标点可以为负数\r\n\n## 输入描述\n坐标点`n`\r\n\n## 输出描述\n输出从坐标零点移动到坐标点`n`的最小步数\r\n\n备注`1 <= n <= 10^9`\r\n\n## 示例一\n### 输入\n```\r\n4\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n从坐标零点移动到`4`，最小需要两步，即右移`2`，再右移`2`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 44,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-22 12:40:46",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "kihsgv",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977132686757889",
                "questionNum": "3333",
                "title": "2023A-卡片组成的最大数字",
                "content": "## 题目\n小组中每个人都有一张卡片，卡片上是`6`位以内的正整数，组员将卡片连起来可以组成多种数字。计算可以组成的最大数字。\r\n\n## 输入\n由`,`分割的多个正整数字符串，不需要考虑非数字异常情况。小组中最多有`25`个人。\r\n\n## 输出描述\n最大数字字符串\r\n\n## 示例一\n### 输入\n```\r\n22,221\r\n```\n### 输出\n```\r\n22221\r\n```\n## 示例二\n### 输入\n```\r\n22,223\r\n```\n### 输出\n```\r\n22322\r\n```\n## 示例三\n### 输入\n```\r\n4589,101,41425,9999\r\n```\n### 输出\n```\r\n9999458941425101\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 43,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-24 14:15:31",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "8wlioi",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977132938416130",
                "questionNum": "3334",
                "title": "2023B-阿里巴巴找黄金宝箱(2)",
                "content": "## 题目描述\n一贫如洗的樵夫阿里巴巴在去砍柴的路上，无意中发现了强盗集团的藏宝地，藏宝地有编号从`0~N`的箱子，每个箱子上面贴有箱子中藏有金币的数量。\r\n\n从金币数量中选出一个数字集合，并销毁贴有这些数字的每个箱子，如果能销毁一半及以上的箱子，则返回这个数字集合的最小大小。\r\n\n## 输入描述\n一个数字字串，数字之间使用逗号分隔，例如: `6,6,6,6,3,3,3,1,1,5`\r\n\n字符串中数字的个数为偶数；\r\n\n`1 <= 数字个数 <=100000`；\r\n\n`1 <= 数字 <=100000`。\r\n\n## 输出描述\n这个数字集合的最小大小，例如: `2`\r\n\n## 示例一\n### 输入\n```\r\n1,1,1,1,3,3,3,6,6,8\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n选择集合`{1,8}`，销毁后的结果数组为`[3,3,3,6,6]`，长度为 `5`，长度为原数组的一半。\r\n\n大小为`2`的可行集合还有`{1,3},{1,6},{3,6}`。\r\n\n选择`6,8` 集合是不可行的，它销毁后的结果数组为`[1,1,1,1,3,3,3]`，新数组长度大于原数组的二分之一。\r\n\n## 示例二\n### 输入\n```\r\n2,2,2,2\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n我们只能选择集合`{2}`，销毁后的结果数组为空\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 47,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-22 17:22:27",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "kl8dq2",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977133164908545",
                "questionNum": "3335",
                "title": "2024D-环中最长子串",
                "content": "### 题目描述\n给你一个字符串`s`,首尾相连成一个环形,请你在环中找出`o`字符出现了偶数次最长子字符串的长度。\r\n\n### 输入描述\n输入由一个小写字母组成的字符串`s`\r\n\n`1 <= s.lenth <= 5x10^5`\r\n\n### 输出描述\n输出是一个整数\r\n\n### 示例一\n#### 输入\n```\r\nalolobo\r\n```\n#### 输出\n```\r\n6\r\n```\n#### 说明\n最长子字符串之一是`alolob`,它包含`2`个`o`\r\n\n### 示例二\n#### 输入\n```\r\nlooxdolx\r\n```\n#### 输出\n```\r\n7\r\n```\n#### 说明\n最长子字符串`oxdolxl`,由于是首尾连接一起的,所以最后一个`x`和开头的`l`是连接在一起的此字符串包含`2`个`o`\r\n\n### 示例三\n#### 输入\n```\r\nbcbcbc\r\n```\n#### 输出\n```\r\n6\r\n```\n#### 说明\n这个示例中,字符串`bcbcbc`本身就是最长的,因为`o`都出现了`0`次\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 58,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-22 17:27:50",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "caj2cr",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977133345263618",
                "questionNum": "3336",
                "title": "2023B-吃火锅",
                "content": "## 题目描述\n入职后，导师会请你吃饭，你选择了火锅。火锅里会在不同时间下很多菜，不同食材要煮不同时间，才能变得刚好合适，你希望吃到最多的刚好合适的菜，但是你的手速不够快，用`m`代替手速，即每次下手捞菜后至少要过`m`秒才能再捞（每次只能捞一个），那么用最合理的策略，最多能吃到多少刚好合适的菜。\r\n\n## 输入描述\n第一行两个整数`n`，`m`。其中`n`代表往锅里下菜的个数，`m`代表手速。\r\n\n接下来有`n`行，每行有两个数`x`，`y`。代表第`x`秒下的菜过`y`秒才能变得刚好合适\r\n\n（`1 < m, n < 1000`），（`1 < x, y < 1000`）\r\n\n## 输出描述\n输出一个整数代表用最合理的策略，最多能吃到刚好合适的菜的数量。\r\n\n## 示例一\n### 输入\n```\r\n2 1\r\n1 2\r\n2 1\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n一共下了两个菜，在第一秒下的菜，需要到第三秒吃。在第二秒下的菜，也要到第三秒吃，所以只能吃一个.\r\n\n## 示例二\n### 输入\n```\r\n3 1\r\n1 2\r\n1 3\r\n2 3\r\n3 4 5\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n一共下了三个菜，每秒捞一个，第一个在第一秒下的菜，需要到第三秒吃，第二个在第一秒下的菜需要到第四秒吃，在第二秒下的菜，需要到第五秒吃，所以三个都能吃。\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 59,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:03",
                "updateTime": "2025-06-24 14:59:38",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "f3v6vo",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977133538201601",
                "questionNum": "3337",
                "title": "2024D-停车找车位",
                "content": "## 题目描述\n停车场有一横排车位，`0` 代表没有停车，`1` 代表有车。至少停了一辆车在车位上，也至少有一个空位没有停车。\r\n\n为了防剐蹭，需为停车人找到一个车位，使得距停车人的车最近的车辆的距离是最大的，返回此时的最大距离。\r\n\n## 输入描述\n1、一个用半角逗号分割的停车标识字符串，停车标识为 `0` 或 `1`，`0` 为空位，`1` 为已停车。\r\n\n2、停车位最多 `100` 个。\r\n\n## 输出描述\n输出一个整数记录最大距离。\r\n\n## 示例一\n### 输入\n```\r\n1,0,0,0,0,1,0,0,1,0,1\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n选择第`2`个车位，最近的停车位为第`0`个车位，距离为`2`。或选择第`3`个车位，最近的停车位为第`5`个车位，距离为`2`\r\n\n## 示例二\n### 输入\n```\r\n1,1,0,0,1,0,0,0,0,0,1\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n选择第`7`个车位，最近的停车位为第`4`个车位和第`10`个车位，距离均为`3`。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 47,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-25 14:55:36",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ea4yt6",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977133743722498",
                "questionNum": "3338",
                "title": "2024D-变换最小字符串",
                "content": "## 题目描述\n给定一个字符串`s`，最多只能进行一次变换，返回变换后能得到的最小字符串（按照字典序进行比较）\r\n\n变换规则： 交换字符串中任意两个不同位置的字符。\r\n\n## 输入描述\n一串小写字母组成的字符串`s`\r\n\n## 输出描述\n按照要求进行变换得到的最小字符串\r\n\n## 补充说明\n`s`是都是小写字符组成\r\n\n`1 <= s.length <= 1000`\r\n\n## 示例一\n### 输入\n```\r\nedcba\r\n```\n### 输出\n```\r\nadcbe\r\n```\n### 说明\n选择索引`0`的`e`和索引`4`的`a`进行交换，得到字典序最小的字符串`adcbe`\r\n\n## 示例二\n### 输入\n```\r\nabcdef\r\n```\n### 输出\n```\r\nabcdef\r\n```\n### 说明\n原字符串已经是最小字典序的字符了，无需进行交换。\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 70,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-22 22:00:33",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "t96sux",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977133911494658",
                "questionNum": "3339",
                "title": "2024D-停车场车辆统计",
                "content": "## 题目描述\n特定大小的停车场，数组`cars`表示，其中`1`表示有车，`0`表示没车。\r\n\n车辆大小不一，小车占一个车位(长度`1`)，货车占两个车位(长度`2`)，卡车占三个车位(长度`3`)，统计停车场最少可以停多少辆车，返回具体的数目。\r\n\n## 输入描述\n整型字符串数组`cars`，其中`1`表示有车，`0`表示没车，数组长度小于`1000`\r\n\n## 输出描述\n整型数字字符串，表示最少停车数目。\r\n\n## 示例一\n### 输入\n```\r\n1,0,1\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n`1`个小车占第`1`个车位\r\n\n第二个车位空\r\n\n`1`个小车占第`3`个车位\r\n\n最少有两辆车\r\n\n## 示例二\n### 输入\n```\r\n1,0,1,1,1,1,1\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n`1`个小车占第`1`个车位\r\n\n第二个车位空\r\n\n`1`个货车占第`3`个车位，长度为`2`\r\n\n`1`个卡车占第`5`个车位，长度为`3`\r\n\n最少有`3`辆车\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 51,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-22 22:05:58",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ogag32",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977134083461122",
                "questionNum": "3340",
                "title": "2023B-数据最节约的备份方法",
                "content": "## 题目描述\n有若干个文件，使用刻录光盘的方式进行备份，假设每张光盘的容量是`500`MB，**求使用光盘最少的文件分布方式**\r\n\n所有文件的大小都是整数的MB，且不超过`500`MB;\r\n\n文件不能分割、分卷打包。\r\n\n## 输入描述\n一组文件大小的数据\r\n\n## 输出描述\n使用光盘的数量。\r\n\n**备注** 不用考虑输入数据不合法的情况\r\n\n假设最多`100`个输入文件。\r\n\n## 示例一\n### 输入\n```\r\n100,500,300,200,400\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n`(100,400),(200,300),(500)`\r\n\n`3`张光盘即可。\r\n\n输入和输出内容都不含空格。\r\n\n## 示例二\n### 输入\n```\r\n100,100,200,300\r\n```\n### 输出\n```\r\n2\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 27,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-22 22:09:44",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "g6xy7z",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977134259621890",
                "questionNum": "3341",
                "title": "2024D-贪心歌手",
                "content": "歌手准备从 A 城去 B 城参加演出\r\n\n1. 按照合同，他必须在 `T` 天内赶到。\r\n2. 歌手途径 `N` 座城市。\r\n3. 歌手不能往回走。\r\n4. 每两座城市之间需要的天数都可以提前获知。\r\n5. 歌手在每座城市都可以在路边卖唱赚钱。经过调研，歌手提前获知了每座城市卖唱的收入预期。如果在一座城市第一天卖唱可以赚 `M`，后续每天的收入会减少 `D` (第二天赚的钱是 `M-D`，第三天是 `M-2D`…)。如果收入减到 `0` 就不会再少了。\r\n6. 歌手到达后的第二天才能开始卖唱。如果今天卖过唱，第二天才能出发。\r\n\n问贪心的歌手最多可以赚多少钱？\r\n\n### 输入描述\n第一行两个数字 `T` 和 `N`，中间用空格隔开，`T` 代表总天数；`N` 代表路上经过 `N` 座城市;\r\n\n`0 < T < 1000，0 < N < 100`\r\n\n第二行 `N+1` 个数字，中间用空格隔开，代表每两座城市之间耗费的时间，其总和`<=T`。\r\n\n接下来 `N` 行，每行两个数字 `M` 和 `D`，中间用空格隔开。代表每个城市的收入预期。\r\n\n`0 < M < 1000，0 < D < 100`\r\n\n### 输出描述\n一个数字。代表歌手最多可以赚多少钱。以回车结束\r\n\n### 示例一\n#### 输入\n```\r\n10 2\r\n1 1 2\r\n120 20\r\n90 10\r\n```\n#### 输出\n```\r\n540\r\n```\n#### 说明\n总共 `10` 天，路上经过 `2` 座城市。路上共花 `1+1+2=4` 天。剩余 `6` 天最好的计划是在第一座城市待 `3` 天，在第二座城市待 `3` 天。在第一座城市赚的钱：`120 + 100 + 80 = 300`在第二座城市赚的钱：`90 + 80 + 70 = 240`\r\n\n共 `300 +240 = 540`\r\n\n### 示例二\n#### 输入\n```\r\n10 3\r\n1 1 2 3\r\n120 20\r\n90 10\r\n100 20\r\n```\n#### 输出\n```\r\n320\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 82,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-22 22:23:03",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "349mou",
                "hasChoiceQuestion": false
            }
        ],
        "total": "209",
        "size": "20",
        "current": "8",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "11"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814977134469337090",
                "questionNum": "3342",
                "title": "2024D-运输时间",
                "content": "## 题目描述\n`M (1 <= M <= 20)`辆车需要在一条不能超车的单行道到达终点，起点到终点的距离为`N (1 <= N <= 400)`\r\n\n速度快的车追上前车后，只能以前车的速度继续行驶，求最后一车辆到达目的地花费的时间。\r\n\n注:每辆车固定间隔`1`小时出发，比如第一辆车`0`时出发，第二辆车`1`时出发，依次类推\r\n\n## 输入描述\n第一行两个数字：`M N`分别代表车辆数和到终点的距离，以空格分隔。\r\n\n接下来`M`行，每行`1`个数字 `S`，代表每辆车的速度。`0 < S < 30`\r\n\n## 输出描述\n输出:最后一辆车到达目的地花费的时间。\r\n\n## 示例\n### 输入\n```\r\n2 11\r\n3\r\n2\r\n```\n### 输出\n```\r\n5.5\r\n```\n### 说明\n`2`辆车，距离`11`，`0`时出发的车速度快，`1`时出发的车慢，达到目的地花费`5.5`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 45,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 06:19:08",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "avix0f",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977134653886466",
                "questionNum": "3343",
                "title": "2023B-数字序列比大小",
                "content": "## 题目描述\n`A`，`B`两个人玩一个数字比大小的游戏，在游戏前，两个人会拿到相同长度的两个数字序列，两个数字序列不相同的，且其中的数字是随机的。`A`，`B`各自从数字序列中挑选出一个数字进行大小比较，赢的人得`1`分，输的人扣`1`分，相等则各自的分数不变。 用过的数字需要丢弃。求`A`可能赢`B`的最大分数。\r\n\n## 输入描述\n输入数据的第`1`个数字表示数字序列的长度`N`，后面紧跟着两个长度为`N`的数字序列。\r\n\n## 输出描述\nA可能赢B的最大分数\r\n\n## 示例\n### 输入\n```\r\n3\r\n4 8 10\r\n3 6 4\r\n```\n### 输出\n```\r\n3\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 36,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 07:42:52",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "tpbgvo",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977134804881410",
                "questionNum": "3344",
                "title": "2024D-会议室占用时间",
                "content": "## 题目描述\n现有若干个会议，所有会议共享一个会议室，用数组表示各个会议的开始时间和结束时间，格式为：\r\n\n> [[会议1开始时间, 会议1结束时间], [会议2开始时间, 会议2结束时间]]\r\n\n请计算会议室占用时间段。\r\n\n## 输入描述\n第一行输入一个整数`n`，表示会议数量\r\n\n之后输入`n`行，每行两个整数，以空格分隔，分别表示会议开始时间，会议结束时间\r\n\n## 输出描述\n输出多行，每个两个整数，以空格分隔，分别表示会议室占用时间段开始和结束\r\n\n## 补充说明\n- 会议室个数范围：`[1, 100]`\r\n- 会议室时间段：`[1, 24]`\r\n\n## 示例一\n### 输入\n```\r\n4\r\n1 4\r\n2 5\r\n7 9\r\n14 18\r\n```\n### 输出\n```\r\n1 5\r\n7 9\r\n14 18\r\n```\n### 说明\n输入：`[[1,4],[2,5],[7,9],[14,18]]`\r\n\n输出：`[[1,5],[7,9],[14,18]]`\r\n\n说明：时间段`[1,4]`和`[2,5]`重叠，合并为`[1,5]`\r\n\n## 示例二\n### 输入\n```\r\n2\r\n1 4\r\n4 5\r\n```\n### 输出\n```\r\n1 5\r\n```\n### 说明\n输入：`[[1,4],[4,5]]`\r\n\n输出：`[[1,5]]`\r\n\n说明：时间段`[1,4]`和`[4,5]`连续\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 40,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 09:12:06",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "fe6s0w",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977134976847873",
                "questionNum": "3345",
                "title": "2024D-分配土地最大面积",
                "content": "### 题目描述\n从前有个村庄，村民们喜欢在各种田地上插上小旗子，旗子上标识了各种不同的数字。某天集体村民决定将**覆盖相同数字的最小矩阵形的土地**的分配给为村里做出巨大贡献的村民，请问，此次分配土地，做出贡献的村民中最大会分配多大面积?\r\n\n### 输入描述\n第一行输入 `m` 和 `n`，`m` 代表村子的土地的长，`n` 代表土地的宽\r\n\n第二行开始输入地图上的具体标识\r\n\n### 输出描述\n输出需要分配的土地面积，即包含相同数字旗子的最小矩阵中的最大面积。\r\n\n### 备注\n旗子上的数字为 `1-500`，土地边长不超过 `500`未插旗子的土地用 `0` 标识\r\n\n### 示例一\n#### 输入\n```\r\n3 3\r\n1 0 1\r\n2 0 2\r\n0 1 0\r\n```\n#### 输出\n```\r\n9\r\n```\n#### 说明\n土地上的旗子为 `1`，其坐标分别为`(0,0)`，`(2,1)`以及`(0,2)`，为了覆盖所有旗子，矩阵需要覆盖的横坐标为 `0` 和 `2`，纵坐标为 `0` 和 `2`，所以面积为 `9`，即`(2-0+1)*(2-0+1)=9`。\r\n\n### 示例二\n#### 输入\n```\r\n3 3\r\n```\n#### 输出\n```\r\n1\r\n```\n#### 说明\n由于不存在成对的小旗子，故而返回 `1`，即一块土地的面积。\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 48,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-24 16:01:16",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "is3m2o",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977135144620034",
                "questionNum": "3346",
                "title": "2024D-堆内存申请",
                "content": "## 题目描述\n有一个总空间为`100`字节的堆，现要从中新申请一块内存，**内存分配原则为优先紧接着前一块已使用内存分配空间，且最接近申请大小的空闲内存**。\r\n\n## 输入描述\n第`1`行是`1`个整数，表示期望申请的内存字节\r\n\n第`2`到`N`行是用空格分割的两个整数，表示当前已分配的内存的情况，每一行表示一块已分配的连续内存空间，每行的第`1`和第`2`个整数分别表示偏移地址和内存块大小，如:`0 1 3 2`分别表示`0`偏移地址开始的`1`个字节和`3`偏移地址开始的`2`个字节已被分配，其余内存空闲。\r\n\n## 输出描述\n若申请成功，输出申请到内存的偏移；若申请失败，输出`-1`\r\n\n## 补充说明\n1. 若输入信息不合法或无效，则申请失败。\r\n2. 若没有足够的空间供分配，则申请失败。\r\n3. 堆内存信息有区域重叠或有非法值等都是无效输入。\r\n\n## 示例一\n### 输入\n```\r\n1\r\n0 1\r\n3 2\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n堆中已使用的两块内存是偏移从`0`开始`1`字节和偏移从`3`开始的`2`字节，空闲的两块内存是偏移从`1`开始`2`个字节和偏移从`5`开始的`95`个字节，根据分配原则，新申请的内存应从`1`开始分配`1`个字节，所以输出移为`1`\r\n\n## 示例二\n### 输入\n```\r\n1\r\n0 1\r\n3 2\r\n6 1\r\n```\n### 输出\n```\r\n5\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 56,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 09:29:34",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "j8ckh6",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977135341752321",
                "questionNum": "3347",
                "title": "2023B-判断字符串子序列",
                "content": "## 题目\n给定字符串 `target` 和 `source`, 判断 `target` 是否为 `source` 的子序列。\r\n\n你可以认为 `target` 和 `source` 中仅包含英文小写字母。字符串 `source` 可能会很长（长度 ~= `500,000`），而 target 是个短字符串（长度 <=`100`）。\r\n\n字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，`\"abc\"`是`\"aebycd\"`的一个子序列，而`\"ayb\"`不是）。\r\n\n请找出最后一个子序列的起始位置。\r\n\n## 输入描述\n第一行为 `target`，短字符串（`长度 <=100`）\r\n\n第二行为 `source`，长字符串（`长度 ~= 500,000`）\r\n\n## 输出描述\n最后一个子序列的起始位置， 即最后一个子序列首字母的下标。\r\n\n若在 `source` 中找不到 `target`，则输出`-1`。\r\n\n## 示例\n### 输入\n```\r\nabc\r\nabcaybec\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n这里有两个 `abc` 的子序列满足，取下标较大的，故返回 `3`\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 51,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-24 15:07:51",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "xztlpq",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977135522107393",
                "questionNum": "3348",
                "title": "2024D-座位调整&2024D-找座位",
                "content": "## 题目描述\n疫情期间课堂的座位进行了特殊的调整，不能出现两个同学紧挨着，必须隔至少一个空位。\r\n\n给你一个整数数组 `desk` 表示当前座位的占座情况，由若干 `0` 和 `1` 组成，其中 `0` 表示没有占位，`1` 表示占位。在不改变原有座位秩序情况下，还能安排坐几个人？\r\n\n## 输入\n第一行是个子数组表示作为占座情况，由若干 `0` 和 `1` 组成，其中 `0` 表示没有占位，`1` 表示占位\r\n\n## 输出\n输出数值表示还能坐几个人\r\n\n## 说明\n`1 <= desk.length <= 2 * 10^4`\r\n\n## 示例一\n### 输入\n```\r\n1,0,0,0,1\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n只有 `desk[2]` 的位置可以坐一个人\r\n\n## 示例二\n### 输入\n```\r\n0,0,0,0,0\r\n```\n### 输出\n```\r\n3\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 38,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 09:53:00",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "omtu64",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977135681490945",
                "questionNum": "3349",
                "title": "2024D-伐木工",
                "content": "## 题目描述\n一根`X`米长的树木，伐木工切割成不同长度的木材后进行交易，**交易价格为每根木头长度的乘积**。\r\n\n规定切割后的每根木头长度都为正整数，也可以不切割，直接拿整根树木进行交易。\r\n\n请问伐木工如何**尽量少的切割**，才能使收益最大化？\r\n\n## 输入描述\n木材的长度 `(X<=50)`\r\n\n## 输出描述\n输出最优收益时的各个树木长度，以空格分割，按升序排列\r\n\n## 示例\n### 输入\n```\r\n10\r\n```\n### 输出\n```\r\n3 3 4\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 42,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 10:02:34",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "m05nra",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977135870234625",
                "questionNum": "3350",
                "title": "2024D-最多可以派出多少支团队",
                "content": "## 题目描述\n用数组代表每个人的能力，一个比赛活动要求参赛团队的最低能力值为`N`，每个团队可以由`1`人或`2`人组成，且`1`个人只能参加`1`个团队，请计算出最多可以派出多少支符合要求的团队?\r\n\n## 输入描述\n第一行数组代表总人数，范围`[1,500000]`\r\n\n第二行数组代表每个人的能力，每个元素的取值范围`[1,500000]`，数组的大小范围`[1,500000]`\r\n\n第三行数值为团队要求的最低能力值，范围`[1,500000]`\r\n\n## 输出描述\n最多可以派出的团队数量\r\n\n## 示例\n### 输入\n```\r\n5\r\n3 1 5 7 9\r\n8\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n`3`和`5`组成一队，`1`和`7`组成一队，`9`自己一个队，故输出`3`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 41,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:04",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 10:07:19",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "wcbt2a",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977136042201090",
                "questionNum": "3351",
                "title": "2023A-快递货车",
                "content": "## 题目\n一辆具有最大载重量的运送快递的货车正在运送若干重量不一的快递中，试计算出该货车最多能运载的快递数目。快递数量最多为`1000`个，货车的最大载重最为`50000`。\r\n\n注：不考虑快递的体积。\r\n\n## 输入\n第一行输入每个快递的重量，用英文逗号隔开，如 `5,10,2,11`第二行输入货车的最大载重量，如 `20`\r\n\n## 输出\n输出最多能装多少个快递，如 `3`\r\n\n## 示例一\n### 输入\n```\r\n5,10,2,11\r\n20\r\n```\n### 输出\n```\r\n3\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 54,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-24 15:10:57",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "oftpk3",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977136201584642",
                "questionNum": "3352",
                "title": "2024D-社交距离",
                "content": "## 题目描述\n疫情期间，需要大家保证一定的社交距离，公司组织开交流会议，座位有一排共`N`个座位，编号分别为`[0, N-1]`，要求员工一个接着一个进入会议室，并且可以在任何时候离开会议室。\r\n\n满足：每当一个员工进入时，需要坐到最大社交距离的座位（例如：位置`A`与左右有员工落座的位置距离分别为`2`和`2`，位置`B`与左右有员工落座的位置距离分别为`2`和`3`，影响因素都为`2`个位置，则认为座位`A`和`B`与左右位置的社交距离是一样的)；如果有多个这样的座位，则坐到索引最小的那个座位。\r\n\n## 输入描述\n会议室座位总数`seatNum`，`(1 ≤ seatNums ≤ 500)`\r\n\n员工的进出顺序`seatOrLeave`数组，元素值为`1`：表示进场；元素值为负数，表示出场（特殊：位置`0`的员工不会离开），例如`-4`表示坐在位置`4`的员工离开（保证有员工坐在该座位上）\r\n\n## 输出描述\n最后进来员工，他会坐在第几个位置，如果位置已满，则输出`-1`\r\n\n## 示例\n### 输入\n```\r\n10\r\n[1, 1, 1, 1, -4, 1]\r\n```\n### 输出\n```\r\n5\r\n```\n### 说明\n`seat->0`，坐在任何位置都行，但是要给他安排索引最小的位置，也就是座位`0`\r\n\n`seat->9`，要和旁边的人距离最远，也就是座位`9`。\r\n\n`seat->4`，位置`4`与`0`和`9`的距离为(`4`和`5`)，位置`5`与`0`和`9`的距离(`5`和`4`)，所以位置`4`和`5`都是可以选择的座位，按照要求需素引最小的那个座位，也就是作为`4`\r\n\n`seat->2`，位置`2`与`0`和`4`的距离为(`2`和`2`),位置`6`与`4`和`9`的距离(`2`和`3`)，位置`7`与`4`和`9`的距离(`3`和`2`)，影响因素都为`2`个位置，按照要求需素引最小的那个座位，也就是座位`2`。\r\n\n`leave(4)`，`4`号座位的员工离开。\r\n\n`seat->5`，员工最后坐在`5`号座位上。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 71,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 10:15:32",
                "tagList": [
                    "华为OD",
                    "贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "5zby48",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977136381939714",
                "questionNum": "3353",
                "title": "2023A-快速开租建站",
                "content": "## 题目描述\n当前 IT 部门支撑了子公司颗粒化业务，该部门需要实现为子公司快速开租建站的能力，建站是指在一个全新的环境部署一套 IT 服务。每个站点开站会由一系列部署任务项构成，每个任务项部署完成时间都是固定和相等的，设为 `1`。部署任务项之间可能存在依赖，假如任务 `2` 依赖任务 `1`，那么等任务 `1` 部署完，任务 `2` 才能部署。任务有多个依赖任务则需要等所有依赖任务都部署完该任务才能部署。没有依赖的任务可以并行部署，优秀的员工们会做到完全并行无等待的部署。给定一个站点部署任务项和它们之间的依赖关系，请给出一个站点的最短开站时间。\r\n\n## 输入描述\n第一行是任务数 `taskNum`，第二行是任务的依赖关系数 `relationsNum`\r\n\n接下来 `relationsNum` 行，每行包含两个 `id`，描述一个依赖关系，格式为：`IDi IDj`，表示部署任务 `i` 部署完成了，部署任务 `j` 才能部署，`IDi` 和 `IDj` 值的范围为：`[0, taskNum)`\r\n\n注：输入保证部署任务之间的依赖不会存在环。\r\n\n## 输出描述\n一个整数，表示一个站点的最短开站时间。\r\n\n## 备注\n`1 < taskNum <= 100`\r\n\n`1 <= relationsNum <= 5000`\r\n\n## 示例一\n![72078405019](https://pic.code-nav.cn/mianshiya/question_picture/markdown/NgiBVq88_1720784050198_mianshiya.png)\r\n\n### 输入\n```\r\n5\r\n5\r\n0 4\r\n1 2\r\n1 3\r\n2 3\r\n2 4\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n有 `5` 个部署任务项，`5` 个依赖关系，如下图所示。我们可以先同时部署任务项 `0` 和任务项 `1`，然后部署任务项 `2`，最后同时部署任务项 `3` 和任务项 `4`。最短开站时间为 `3`。\r\n\n## 示例二\n![72078412462](https://pic.code-nav.cn/mianshiya/question_picture/markdown/JARv2His_1720784124629_mianshiya.png)\r\n\n### 输入\n```\r\n5\r\n3\r\n0 3\r\n0 4\r\n1 3\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n有 `5` 个部署任务项，`3` 个依赖关系，如下图所示。我们可以先同时部署任务项 `0`，任务项 `1`，任务项 `2`。然后再同时部署任务项 `3` 和任务项 `4`。最短开站时间为 `2`。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 41,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 10:40:43",
                "tagList": [
                    "华为OD",
                    "BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "41gmpq",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977136562294786",
                "questionNum": "3354",
                "title": "2023B-最长广播响应",
                "content": "## 题目描述\n某通信网络中有`N`个网络节点，用`1`到`N`进行标识。\r\n\n网络中的节点互联互通，且节点之间的消息传递有时延，相连节点的时延均为一个时间单位。\r\n\n现给定网络节点的连接关系`link[i] = {u，v}`，其中`u`和`v`表示网络节点。\r\n\n当指定一个节点向其他节点进行广播，所有被广播节点收到消息后都会在原路径上回复一条响应消息，请计算发送节点至少需要等待几个时间单位才能收到所有被广播节点的响应消息。\r\n\n**注：**\r\n\n1. `N`的取值范围为`[1，100]`;\r\n2. 连接关系`link`的长度不超过`3000`，且`1 <= u, v <= N`;\r\n3. 网络中任意节点间均是可达的;\r\n\n## 输入描述\n第一行输入两个数字，`N`和`M`，用空格隔开。`N`表示连通图一共有`N`个节点，`M`表示连通图一共有`M`条边。 \r\n\n接下来输入`M`行，包含两个数字`v1`和`v2`，表示`v1`和`v2`相连。\r\n\n最后一行输入一个数字，表示指定节点。\r\n\n## 输出描述\n一个数字，表示从指定节点出发，广播所有节点所需要的时间。\r\n\n## 示例\n### 输入\n```\r\n5 7\r\n1 4\r\n2 1\r\n2 3\r\n2 4\r\n3 4\r\n3 5\r\n4 5\r\n2\r\n```\n### 输出\n```\r\n4\r\n```\n### 说明\n节点`2`到`5`的最小时延为`2`，到剩余节点的最小时延均为`1`，所以至少要等待`2*2=4`s.\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 42,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 10:50:31",
                "tagList": [
                    "华为OD",
                    "BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "pu106a",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977136717484034",
                "questionNum": "3355",
                "title": "2024D-周末爬山",
                "content": "## 题目描述：\n周末小明准备去爬山锻炼，`0`代表平地，山的高度使用`1`到`9`来表示，小明每次爬山或下山高度只能相差`k`及`k`以内，每次只能上下左右一个方向上移动一格，小明从左上角`(0,0)`位置出发\r\n\n### 输入描述\n第一行输入`m n k`(空格分隔)\r\n\n代表 `m*n` 的二维山地图，`k`为小明每次爬山或下山高度差的最大值，然后接下来输入山地图，一共 `m`行`n`列，均以空格分隔。\r\n\n取值范围：`0 < m ≤ 500`\r\n\n`0 < n ≤ 500`\r\n\n`0 < k < 5`\r\n\n### 输出描述\n请问小明能爬到的最高峰多高，到该最高峰的**最短步数**，输出以空格分隔。\r\n\n同高度的山峰输出较短步数。\r\n\n如果没有可以爬的山峰，则高度和步数都返回`0`。\r\n\n备注：所有用例输入均为正确格式，且在取值范围内，考生不需要考虑不合法的输入格式。\r\n\n## 示例1\n### 输入\n```\r\n5 4 1\r\n0 1 2 0\r\n1 0 0 0\r\n1 0 1 2\r\n1 3 1 0\r\n0 0 0 9\r\n```\n### 输入\n```\r\n2 2\r\n```\n### 说明\n根据山地图可知，能爬到的最高峰在`(0,2)`位置，高度为`2`，最短路径为`(0,0)->(0,1)->(0,2)`，最短步数为`2`。\r\n\n## 示例2\n### 输入\n```\r\n5 4 3\r\n0 0 0 0\r\n0 0 0 0\r\n0 9 0 0\r\n0 0 0 0\r\n0 0 0 9\r\n```\n### 输入\n```\r\n0 0\r\n```\n### 说明\n根据山地图可知，每次爬山距离`3`，无法爬到山峰上，步数为`0`。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 58,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 11:01:22",
                "tagList": [
                    "华为OD",
                    "BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "54iglr",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977136885256193",
                "questionNum": "3356",
                "title": "2023A-开心消消乐",
                "content": "## 题目描述\n给定一个 `N` 行 `M` 列的二维矩阵，矩阵中每个位置的数字取值为 `0` 或 `1`，矩阵示例如：\r\n\n```\r\n1 1 0 0\r\n0 0 0 1\r\n0 0 1 1\r\n1 1 1 1\r\n```\n现需要将矩阵中所有的 `1` 进行反转为 `0`，规则如下：\r\n\n1. 当点击一个 `1` 时，该 `1` 被反转为 `0`，同时相邻的上、下、左、右，以及左上、左下、右上、右下 `8` 个方向的 `1` （如果存在 `1`）均会自动反转为 0；\r\n2. 进一步地，一个位置上的 `1` 被反转为 `0` 时，与其相邻的 `8` 个方向的 `1` （如果存在 `1`）均会自动反转为 `0`。\r\n\n按照上述规则示例中的矩阵只最少需要点击 `2` 次后，所有均值 `0` 。请问，给定一个矩阵，最少需要点击几次后，所有数字均为 `0`？\r\n\n## 输入\n第一行输入两个整数，分别表示矩阵的行数 `N` 和列数 `M`，取值范围均为 `[1,100]`接下来 `N` 行表示矩阵的初始值，每行均为 `M` 个数，取值范围 `[0,1]`\r\n\n## 输出\n输出一个整数，表示最少需要点击的次数\r\n\n## 示例一\n### 输入\n```\r\n3 3\r\n1 0 1\r\n0 1 0\r\n1 0 1\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n上述样例中，四个角上的 `1` 均在中间的 `1` 的相邻 `8` 个方向上，因此只需要点击一次即可。\r\n\n## 示例二\n### 输入\n```\r\n4 4\r\n1 1 0 0\r\n0 0 0 1\r\n0 0 1 1\r\n1 1 1 1\r\n```\n### 输出\n```\r\n2\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 52,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-24 21:16:30",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "oxvm8n",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977137090777090",
                "questionNum": "3357",
                "title": "2023A-计算网络信号",
                "content": "网络信号经过传递会逐层衰减，且遇到阻隔物无法直接穿透，在此情况下需要计算某个位置的网络信号值。注意:网络信号可以绕过阻隔物\r\n\n- `array[m][n]` 的二维数组代表网格地图，\r\n- `array[i][j] = 0` 代表 `i` 行 `j` 列是空旷位置;\r\n- `array[i][j] = x` (`x` 为正整数)代表 `i` 行 `j` 列是信号源，信号强度是 `x`;\r\n- `array[i][j] = -1` 代表 `i` 行 `j` 列是阻隔物.\r\n- 信号源只有 `1` 个，阻隔物可能有 `0` 个或 `多` 个\r\n- 网络信号衰减是上下左右相邻的网格衰减 `1`\r\n- 现要求输出对应位置的网络信号值。\r\n\n## 输入\n输入为三行：\r\n\n第一行为 `m`、`n`，代表输入是一个 `m × n`的数组。\r\n\n第二行是一串 `m × n` 个用空格分隔的整数。每连续 `n` 个数代表一行，再往后 `n` 个代表下一行，以此类推。对应的值代表对应的网格是空矿位置，还是信号源，还是阻隔物。\r\n\n第三行是 `i`、`j`，代表需要计算 `array[i][j]` 的网络信号值。注意:此处`i`和`j`均从 `0` 开始，即第一行 `i`为 `0`\r\n\n例如\r\n\n```\r\n6 5\r\n0 0 0 -1 0 0 0 0 0 0 0 0 -1 4 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0\r\n1 4\r\n```\n代表如下地图\r\n\n![72078424843](https://pic.code-nav.cn/mianshiya/question_picture/markdown/0f4Gaomj_1720784248435_mianshiya.png)\r\n\n需要输出第 `1` 行第 `4` 列的网络信号值，如下图，值为 `2`\r\n\n![72078426026](https://pic.code-nav.cn/mianshiya/question_picture/markdown/E1OlVFsa_1720784260269_mianshiya.png)\r\n\n## 输出\n输出对应位置的网络信号值，如果网络信号未覆盖到，也输出 0。\r\n\n一个网格如果可以途径不同的传播衰减路径传达，取较大的值作为其信号值。\r\n\n## 示例一\n### 输入\n```\r\n6 5\r\n0 0 0 -1 0 0 0 0 0 0 0 0 -1 4 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0\r\n1 4\r\n```\n### 输出\n```\r\n2\r\n```\n## 示例二\n### 输入\n```\r\n6 5\r\n0 0 0 -1 0 0 0 0 0 0 0 0 -1 4 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0\r\n2 1\r\n```\n### 输出\n```\r\n0\r\n```\n## 备注\n1. `m`不一定等于`n`*，*`m < 100`，`n < 100` ,网络信号小于 `1000` 。\r\n2. 信号源只有 `1` 个，阻隔物可能有 `0` 个或多个。\r\n3. 输入的 `m`，`n`与第二行的数组是合法的，无需处理数量对不上的异常情况。\r\n4. 要求输出信号值的位置，不会是阻隔物。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 49,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 11:10:32",
                "tagList": [
                    "华为OD",
                    "BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "qe4coj",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977137308880897",
                "questionNum": "3358",
                "title": "2024D-查找一个有向网络的头节点和尾节点",
                "content": "## 题目描述\n给定一个有向图，图中可能包含有环，有向边用两个节点表示。第一个整数表示起始节点，第二个整数表示终止节点，如`0 1`表示存在从`0`到`1`的路径。每个节点用正整数表示，求这个数据的头节点与尾节点，题目给的用例会是一个头节点，但可能存在多个尾节点。同时，图中可能含有环，如果图中含有环，返回`-1`。\r\n\n![72078430426](https://pic.code-nav.cn/mianshiya/question_picture/markdown/RClBidHZ_1720784304264_mianshiya.png)\r\n\n说明：入度为`0`是头节点，出度为`0`是尾节点\r\n\n## 输入描述\n第一行为后续输入的键值对数量`N >= 0`，第二行为`2N`个数字。每两个为一个起点，一个终点。\r\n\n## 输出描述\n输出一行头节点和尾节点。如果有多个尾节点，按从小到大的顺序输出。\r\n\n## 备注\n如果图有环，输出为`-1`\r\n\n所有输入均合法，不会出现不配对的数据\r\n\n## 示例\n### 输入\n```\r\n4\r\n1 2 1 3 2 4 3 4\r\n```\n### 输出\n```\r\n1 4\r\n```\n### 说明\n该例子表示以下有向图。头节点为`1`，尾节点为`4`\r\n\n![72078432733](https://pic.code-nav.cn/mianshiya/question_picture/markdown/h5FGzX0l_1720784327332_mianshiya.png)\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 41,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 11:16:10",
                "tagList": [
                    "华为OD",
                    "BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "h5ia9b",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977137485041665",
                "questionNum": "3359",
                "title": "2023B-战场索敌",
                "content": "## 题目描述\n有一个大小是`N*M`的战场地图，被墙壁`'#'` 分隔成大小不同的区域，上下左右四个方向相邻的空地 `'.'`，属于同一个区域，只有空地上可能存在敌人`'E'`，请求出地图上总共有多少区域里的敌人数小于`K`\r\n\n## 输入描述\n第一行输入为`NMK;`\r\n\n`N`表示地图的行数，`M`表示地图的列数，`K`表示目标敌人数量\r\n\n`N, M<=100`\r\n\n之后为一个`N x M`大小的字符数组\r\n\n## 输出描述\n敌人数小于`K`的区域数量\r\n\n## 示例\n### 输入\n```\r\n3 5 2\r\n..#EE\r\nE.#E.\r\n###..\r\n```\n### 输出\n```\r\n1\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 48,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:04",
                "updateTime": "2025-06-23 11:38:34",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "5lyaxn",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977137665396737",
                "questionNum": "3360",
                "title": "2023B-评论转换输出",
                "content": "## 题目描述\n在一个博客网站上，每篇博客都有评论。\r\n\n每一条评论都是一个非空英文字母字符串。\r\n\n评论具有树状结构，除了根评论外，每个评论都有一个父评论。\r\n\n当评论保存时，使用以下格式：\r\n\n- 首先是评论的内容；\r\n- 然后是回复当前评论的数量。\r\n- 最后是当前评论的所有了评论。(子评论使用相同的格式嵌套存储)\r\n\n所有元素之间都用单个逗号分隔。\r\n\n例如，如果评论如下：\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/CaUPREuy_1720784685767_mianshiya.png)\r\n\n第一条评论是`\"hello,2,ok,0,bye,0\"`，第二条评论是`\"test,0\"`，第三条评论是`\"one,1,two,1,a,0\"`。\r\n\n所有评论被保存成`\"hello,2,ok,0,bye,0,test,0,one,1,two,1,a,0\"`。\r\n\n对于上述格式的评论，请以另外一种格式打印：\r\n\n- 首先打印评论嵌套的最大深度。\r\n- 然后是打印`n`行，第`i(1 ≤ i ≤ n)` 行对应于嵌套级别为`i` 的评论 (根评论的嵌套级别为`1`)。\r\n- 对于第`i`行，嵌套级别为的评论按照它们出现的顺序打印，用空格分隔开。\r\n\n## 输入描述\n一行评论。由英文字母、数字和英文逗号组成。\r\n\n保证每个评论都是由英文字符组成的非空字符串。每个评论的数量都是整数(至少由一个数字组成)整个字符串的长度不超过`10^6`.\r\n\n给定的评论结构保证是合法的\r\n\n## 输出描述\n按照给定的格式打印评论。对于每一级嵌套，评论应该按照输入中的顺序打印。\r\n\n## 示例一\n### 输入\n```\r\nhello,2,ok,0,bye,0,test,0,one,1,two,1,a,0\r\n```\n### 输出\n```\r\n3\r\nhello test one\r\nok bye two\r\na\r\n```\n### 说明\n如题目描述中图所示，最大嵌套级别为`3`，嵌套级别为`1`的评论是`\"hello test one\"`，嵌套级别为`2`的评论是`\"ok bye two\"`，嵌套级别为`3`的评论为`\"a\"`\r\n\n## 示例二\n### 输入\n```\r\nA,5,A,0,a,0,A,0,a,0,A,0\r\n```\n### 输出\n```\r\n2\r\nA\r\nA a A a A\r\n```\n### 说明\n如下图所示，最大嵌套级别为`2`，嵌套级别为1的评论是`\"A\"`，嵌套级别为`2`的评论是`\"A a A a A\"`\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/MpCNUd83_1720784707714_mianshiya.png)\r\n\n## 示例三\n### 输入\n```\r\nA,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\r\n```\n### 输出\n```\r\n4\r\nA K M \r\nB F H L N O\r\nC D G I P\r\nE J\r\n```\n### 说明\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/zdHjRI7u_1720784727293_mianshiya.png)\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/qtB9ihIJ_1720784736885_mianshiya.png)\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 36,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 11:45:31",
                "tagList": [
                    "华为OD",
                    "DFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "80z77y",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977137845751809",
                "questionNum": "3361",
                "title": "2024D-图像物体的边界",
                "content": "## 题目描述\n给定一个二维数组`M`行`N`列，二维数组里的数字代表图片的像素，为了简化问题，仅包含像素`1`和`5`两种像素，每种像素代表一个物体，`2`个物体相邻的格子为边界，求像素`1`代表的物体的边界个数。\r\n\n像素`1`代表的物体的边界指与像素`5`相邻的像素`1`的格子，边界相邻的属于同一个边界，相邻需要考虑8个方向(上，下，左，右，左上，左下，右上，右下)\r\n\n其他约束:\r\n\n地图规格约束为:\r\n\n`0<M<100`\r\n\n`0<N<100`\r\n\n1. 如下图，与像素`5`的格子相邻的像素`1`的格子`(0,0)、(0,1)、(0,2)、(1,0)、(1,2)、(2,0)、(2,1)、(2,2)、(4,4)、(4,5)、(5,4)`为边界，另`(0,0)、(0,1)、(0,2)、(1,0)、(1,2)、(2,0)、(2,1)、(2,2)`相邻，为`1`个边界，`(4,4)、(4,5)、(5,4)`相邻，为`1`个边界，所以下图边界个数为`2`。\r\n\n![72078458352](https://pic.code-nav.cn/mianshiya/question_picture/markdown/gJmEhIVg_1720784583528_mianshiya.png)\r\n\n2. 如下图，与像素`5`的格子相邻的像素`1`的格子`(0,0)、(0,1)、(0,2)、(1,0)、(1,2)、(2,0)、(2,1)、(2,2)、(3,3)、(3,4)、(3,5)、(4,3)、(4,5)、(5,3)、(5,4)、(5,5)`为边界，另这些边界相邻，所以下图边界个数为`1`。注：`(2,2)、(3,3)`相邻\r\n\n![72078459460](https://pic.code-nav.cn/mianshiya/question_picture/markdown/nVnqDtMO_1720784594601_mianshiya.png)\r\n\n## 输入描述\n第一行，行数`M`，列数`N`\r\n\n第二行开始，是`M`行`N`列的像素的二维数组，仅包含像素`1`和`5`\r\n\n## 输出描述\n像素`1`代表的物体的边界个数。如果没有边界输出`0`（比如只存在像素`1`，或者只存在像素`5`）\r\n\n## 示例\n### 输入\n```\r\n6 6\r\n1 1 1 1 1 1\r\n1 5 1 1 1 1\r\n1 1 1 1 1 1\r\n1 1 1 1 1 1\r\n1 1 1 1 1 1\r\n1 1 1 1 1 5\r\n```\n### 输出\n```\r\n2\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 49,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 11:51:06",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "a5nwym",
                "hasChoiceQuestion": false
            }
        ],
        "total": "209",
        "size": "20",
        "current": "9",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "11"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814977138059661314",
                "questionNum": "3362",
                "title": "2024D-可以组成网络的服务器",
                "content": "## 题目描述\n在一个机房中，服务器的位置标识在 `n*m` 的整数矩阵网格中，`1`表示单元格上有服务器，`0` 表示没有。如果两台服务器位于**同一行或者同一列中紧邻的位置**，则认为它们之间可以组成一个局域网。请你统计机房中最大的局域网包含的服务器个数。\r\n\n## 输入描述\n第一行输入两个正整数，`n`和`m`，`0 < n,m <= 100`\r\n\n之后为`n*m`的二维数组，代表服务器信息\r\n\n## 输出描述\n最大局域网包含的服务器个数。\r\n\n## 示例\n### 输入\n```\r\n2 2\r\n1 0\r\n1 1\r\n```\n### 输出\n```\r\n3\r\n```\n### 补充说明\n`[0][0]`、`[1][0]`、`[1][1]`三台服务器相互连接，可以组成局域网\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 39,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 15:50:41",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "f2jcar",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977138336485377",
                "questionNum": "3363",
                "title": "2024D-启动多任务排序",
                "content": "## 题目描述\n一个应用启动时，会有多个初始化任务需要执行，并且任务之间有依赖关系，例如`A`任务依赖`B`任务，那么必须在`B`任务执行完成之后，才能开始执行`A`任务。\r\n\n现在给出多条任务依赖关系的规则，请输入任务的顺序执行序列，规则采用贪婪策略，**即一个任务如果没有依赖的任务，则立刻开始执行，如果同时有多个任务要执行，则根据任务名称字母顺序排序。**\r\n\n例如：`B`任务依赖`A`任务，`C`任务依赖`A`任务，`D`任务依赖`B`任务和`C`任务，同时，`D`任务还依赖`E`任务。那么执行任务的顺序由先到后是：`A`任务，`E`任务，`B`任务，`C`任务，`D`任务。这里`A`和`E`任务都是没有依赖的，立即执行\r\n\n## 输入描述\n输入参数每个元素都表示任意两个任务之间的依赖关系，输入参数中符号`->`表示依赖方向，例`A->B`表示`A`依赖`B`，多个依赖之间用单个空格分割\r\n\n## 输出描述\n输出为排序后的启动任务列表，多个任务之间用单个空格分割\r\n\n## 示例一\n### 输入\n```\r\nA->B C->B\r\n```\n### 输出\n```\r\nB A C\r\n```\n### 说明\n任务`A`和`C`都依赖于任务`B`。任务`B`执行后，`A`和`C`立即执行，`A`和`C`的执行顺序按照字典序排列。\r\n\n## 示例二\n### 输入\n```\r\nB->A C->A D->B D->C D->E\r\n```\n### 输出\n```\r\nA E B C D\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 45,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 16:00:48",
                "tagList": [
                    "华为OD",
                    "BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "mbrq7y",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977138495868930",
                "questionNum": "3364",
                "title": "2023B-寻找价值最大的矿堆",
                "content": "给你一个由 `'0'`（空地）、`'1'`（银矿）、`'2'`（金矿）组成的的地图，矿堆只能由上下左右相邻的金矿或银矿连接形成。超出地图范围可以认为是空地。\r\n\n假设银矿价值 `1` ，金矿价值 `2` ，请你找出地图中最大价值的矿堆并输出该矿堆的价值。\r\n\n## 输入\n地图元素信息如：\r\n\n```\r\n22220\r\n00000\r\n00000\r\n01111\r\n```\n地图范围最大为 `300 * 300`，`0 <= 地图元素 <= 2`\r\n\n## 输出\n矿堆的最大价值。\r\n\n## 示例一\n### 输入\n```\r\n22220\r\n00000\r\n00000\r\n01111\r\n```\n### 输出\n```\r\n8\r\n```\n## 示例二\n### 输入\n```\r\n22220\r\n00020\r\n00010\r\n01111\r\n```\n### 输出\n```\r\n15\r\n```\n## 示例三\n### 输入\n```\r\n20000\r\n00020\r\n00000\r\n00111\r\n```\n### 输出\n```\r\n3\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 36,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 16:16:13",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "qnpji8",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977138688806913",
                "questionNum": "3365",
                "title": "2023C-寻找最优的路测线路",
                "content": "## 题目描述\n评估一个网络的信号质量，其中一个做法是将网络划分为栅格，然后对每个栅格的信号质量计算，路测的时候，希望选择一条信号最好的路线（彼此相连的栅格集合）进行演示，现给出`R`行`C`列的整数数组`COV`，每个单元格的数值`S`即为该栅格的信号质量（已归一化，无单位，值越大信号越好）\r\n\n要求从`[0,0]`到`[R-1,C-1]`设计一条最优路测路线。返回该路线得分。规则:\r\n\n1. 路测路线可以上下左右四个方向，不能对角\r\n2. 路线的评分是以**路线上信号最差的栅格为准的**，例如路径`8->4->5->9`的值为 `4`，该线路评分为`4`。线路最优表示该条线路的评分最高。\r\n\n## 输入描述\n第`1`行表示栅格的行数`R`\r\n\n第`2`行表示栅格的列数`C`\r\n\n第`3`行开始，每一行表示栅格地图一行的信号值，如`5 4 5`\r\n\n## 输出描述\n最优路线的得分\r\n\n## 补充说明\n`1 <= R,C <= 20`\r\n\n`0 <= S <= 65535`\r\n\n## 示例\n### 输入\n```\r\n3\r\n3\r\n5 4 5\r\n1 2 6\r\n7 4 6\r\n```\n### 输出\n```\r\n4\r\n```\n### 说明\n路线为`5->4->5->6->6`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 44,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 16:22:31",
                "tagList": [
                    "华为OD",
                    "BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "61u81p",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977138869161985",
                "questionNum": "3366",
                "title": "2023B-陷阱方格",
                "content": "## 题目描述\n1. 房间由`X*Y`的方格组成，例如下图为`6*4`的大小。每一个方格以坐标`(x, y)`描述。\r\n2. 机器人固定从方格`(0, 0)`出发，**只能向东或者向北前进**。出口固定为房间的最东北角，如下图的方格`(5, 3)`。用例保证机器人可以从入口走到出口。\r\n3. 房间有些方格是墙壁，如`(4，1)`，机器人不能经过那儿。\r\n4. 有些地方是一旦到达就无法走到出口的，如标记为`B`的方格，称之为陷阱方格。\r\n5. 有些地方是机器人无法到达的，如标记为`A`的方格，称之为不可达方格，不可达方格不包括墙壁所在的位置。\r\n6. 如下示例图中，陷阱方格有`2`个，不可达方格有`3`个。\r\n7. 请为该机器人实现路径规划功能：给定房间大小、墙壁位置，请计算出陷阱方格与不可达方格分别有多少个。\r\n\n![72078453302](https://pic.code-nav.cn/mianshiya/question_picture/markdown/4CWgvMNz_1720784533024_mianshiya.png)\r\n\n## 输入描述\n第一行为房间的`X`和`Y` (`0<X，Y <= 1000`)\r\n\n第二行为房间中墙壁的个数`N` (`0 <= N <X*Y`)\r\n\n接着下面会有`N`行墙壁的坐标\r\n\n## 输出描述\n陷阱方格与不可达方格数量，两个信息在一行中输出,以一个空格隔开。(结尾不带回车换行)\r\n\n## 示例一\n### 输入\n```\r\n6 4\r\n5\r\n0 2\r\n1 2\r\n2 2\r\n4 1\r\n5 1\r\n```\n### 输出\n```\r\n2 3\r\n```\n## 示例二\n### 输入\n```\r\n6 5\r\n10\r\n0 2\r\n1 1\r\n1 2\r\n1 3\r\n3 1\r\n3 2\r\n3 3\r\n4 1\r\n4 3\r\n5 3\r\n```\n### 输出\n```\r\n6 4\r\n```\n### 说明\n![72042731049](https://pic.code-nav.cn/mianshiya/question_picture/markdown/8Yb27JoE_1720785377810_mianshiya.png)\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 31,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 16:53:01",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "pm33cp",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977139108237313",
                "questionNum": "3367",
                "title": "2023B-士兵突击",
                "content": "## 士兵突击\n在一个 `M ∗ N` 的街区中，有一个士兵 `S` 和一个敌人 `E`， 标识 `X` 为无法通过的街区，标识 `B` 为可以通过的街区；士兵在一个单位时间内可以从一个街区移动到相邻的街区（士兵每次只能水平或者垂直方向移动一个街区）；士兵每次改变方向时，需要额外花费`1`个单位的时间（士兵第一次移动个街区的时候，不用考虑其初始方向，即只需要一个单位时间即可到达相邻街区）。计算士兵 `S` 最少需要多少时间才能到达 `E` 所在的街区。\r\n\n## 输入\n第一行为两个数字，表示街区的大小，`M` 行，`N` 列，存在`1 < = M ∗ N < = 1000`，且`M`、`N` 不同时为 `1`\r\n\n接下来输入 `M` 行，每行 `N` 个字母，字母 `S` 表示士兵所在街区，字母 `E` 表示敌人所在街区，字母 `X` 表示障碍，字母 `B` 表示可以经过的街区。有且仅有 `1` 个 `S` 和一个 `E` 。\r\n\n## 输出\n输出士兵 `S` 到达敌人 `E` 所在的街区时最少需要的时间；当士兵 `S` 永远无法到达敌人 `E` 所在的街区时，输出 `-1`。\r\n\n## 示例一\n### 输入\n```\r\n6 6\r\nSBBBBB\r\nBXXXXB\r\nBBXBBB\r\nXBBXXB\r\nBXBBXB\r\nBBXBEB\r\n```\n## 输出\n```\r\n13\r\n```\n## 说明\n士兵先往右走到底，在往下走到底，再往左走一格，这样所花费的时间最少，为`13`。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 40,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 17:13:17",
                "tagList": [
                    "华为OD",
                    "BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ok93t8",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977139288592386",
                "questionNum": "3368",
                "title": "2024D-跳马问题",
                "content": "## 题目描述\n输入 `m` 和 `n` 两个数，`m` 和 `n` 表示一个 `m*n` 的棋盘。输入棋盘内的数据。棋盘中存在数字和`\".\"`两种字符，如果是数字表示该位置是一匹马，如果是`\".\"`表示该位置为空的，棋盘内的数字表示为该马能走的最大步数。\r\n\n例如棋盘内某个位置一个数字为 `k`，表示该马只能移动 `0~k` 步的距离。\r\n\n棋盘内的马移动类似于中国象棋中的马移动，先在水平或者垂直方向上移动一格，然后再将其移动到对角线位置。\r\n\n棋盘内的马可以移动到同一个位置，同一个位置可以有多匹马。\r\n\n请问能否将棋盘上所有的马移动到同一个位置，若可以请输出移动的最小步数。若不可以输出 `0`。\r\n\n## **输入描述**\n输入`m` 和 `n` 两个数，`m` 和 `n` 表示一个 `m*n` 的棋盘。输入棋盘内的数据。\r\n\n## **输出描述**\n能否将棋盘上所有的马移动到同一个位置，若可以请输入移动的最小步数。若不可以输出 `0`。\r\n\n## **示例一**\n### **输入**\n```\r\n3 2\r\n. .\r\n2 .\r\n. .\r\n```\n### 输出\n```\r\n0\r\n```\n## **示例二**\n### **输入**\n```\r\n3 5\r\n4 7 . 4 8\r\n4 7 4 4 .\r\n7 . . . .\r\n```\n### **输出**\n```\r\n17\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 58,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 17:26:08",
                "tagList": [
                    "华为OD",
                    "BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "9gtth7",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977139498307585",
                "questionNum": "3369",
                "title": "2024D-亲子游戏",
                "content": "## 题目描述\n宝宝和妈妈参加亲子游戏，在一个二维矩阵（`N*N`）的格子地图上，宝宝和妈妈抽签决定各自的位置，地图上每个格子有不同的糖果数量，部分格子有障碍物。\r\n\n游戏规则是妈妈必须在最短的时间（每个单位时间只能走一步）到达宝宝的位置，路上的所有糖果都可以拿走，不能走障碍物的格子，只能上下左右走。\r\n\n请问妈妈在最短到达宝宝位置的时间内最多拿到多少糖果（优先考虑最短时间到达的情况下尽可能多拿糖果）。\r\n\n## **输入描述**\n第一行输入为`N`，`N`标识二维矩阵的大小\r\n\n之后`N`行，每行有`N`个值，表格矩阵每个位置的值\r\n\n其中：\r\n\n- `-3`：妈妈\r\n- `-2`：宝宝\r\n- `-1`：障碍\r\n- `>=0`：糖果数(`0`表示没有糖果，但是可以走)\r\n\n## **输出描述**\n输出妈妈在最短到达宝宝位置的时间内最多拿到多少糖果，行末无多余空格\r\n\n## **备注**\n地图最大`50*50`\r\n\n## **示例一**\n### **输入**\n```\r\n4\r\n3 2 1 -3\r\n1 -1 1 1\r\n1 1 -1 2\r\n-2 1 2 3\r\n```\n### **输出**\n```\r\n9\r\n```\n### **说明**\n此地图有两条最短路径可到宝宝位置，都是最短路径`6`步，但先向下再向左可以拿到`9`个糖果 \r\n\n## **示例二**\n### **输入**\n```\r\n4\r\n3 2 1 -3\r\n-1 -1 1 1\r\n1 1 -1 2\r\n-2 1 -1 3\r\n```\n### **输出**\n```\r\n-1\r\n```\n### **说明**\n此地图妈妈无法到达宝宝位置\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 45,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 17:48:18",
                "tagList": [
                    "华为OD",
                    "BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "dgivzb",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977139728994306",
                "questionNum": "3370",
                "title": "2023B-广播服务器",
                "content": "## 题目描述\n服务器连接方式包括直接相连，间接连接。`A` 和 `B` 直接连接，`B` 和 `C` 直接连接，则 `A` 和 `C` 间接连接。直接连接和间接连接都可以发送广播。给出一个大小为 `N*N` 的二维矩阵`matrix`，代表 `N` 个服务器。`matrix[i][j] = 1`，则代表 `i` 和 `j` 直接连接；`matrix[i][j] = 0` 时，代表 `i` 和 `j` 不直接连接。`matrix[i][j]==1`，即自己和自已直接连接。计算初始需要给几台服务器广播，才可以使每个服务器都收到广播。\r\n\n## 输入\n输入为 `N` 行，每行有 `N` 个数字，为 `0` 成 `1`，由空格分隔，构成 `N*N` 的二维矩阵`matrix`，`N` 的范围为 `1 <= N <= 40`。\r\n\n## 输出\n输出一个数字，为需要广播的服务器的数量。\r\n\n## 示例一\n### 输入\n```\r\n1 0 0\r\n0 1 0\r\n0 0 1\r\n```\n### 输出\n```\r\n3\r\n```\n## 示例二\n### 输入\n```\r\n1 1\r\n1 1\r\n```\n### 输出\n```\r\n1\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 46,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 17:54:49",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "n7mf5j",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977139942903809",
                "questionNum": "3371",
                "title": "2024D-聚餐地点",
                "content": "## 题目描述\n小华和小为是很好的朋友，他们约定周末一起吃饭，通过手机交流，他们在地图上选择了很多聚餐地点（由于自然地形等原因，部分聚餐地点不可达），求小华和小为都能达到的聚餐地点有多少个。\r\n\n## 输入描述\n第一行输入 `m` 和 `n`，`m` 表示地图长度，`n` 表示地图宽度\r\n\n第二行开始具体输入地图信息，地图信息包括\r\n\n`0` 为通畅的道路\r\n\n`1` 为障碍物（且仅 `1` 为障碍物）\r\n\n`2` 为小华或小为，地图中必定有且仅有两个（非障碍物）\r\n\n`3` 为被选中的聚餐地点（非障碍物）\r\n\n## 输出描述\n可以两方都到达的聚餐地点的数量，行末无空格\r\n\n## 补充说明\n地图长宽为`m`和`n`,`4 <= m <= 100` ，`4 <= n <= 100`\r\n\n聚餐的地点数量为`k`，则`1 < k <= 100`\r\n\n## 示例\n### 输入\n```\r\n4 4\r\n2 1 0 3\r\n0 1 2 1\r\n0 3 0 0\r\n0 0 0 0\r\n```\n### 输出\n```\r\n2\r\n```\n### 备注\n第一行输入地图的长宽为`4`和`4`\r\n\n第二行开始为具体的地图，其中：\r\n\n`3` 代表小华和小明的聚餐地点；\r\n\n`2` 代表小华或小明（确保有`2`个）；\r\n\n`0` 代表可以通行的位置；\r\n\n`1` 代表不可以出行的位置。\r\n\n此时`2`者都能达到的聚餐位置有两处\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 47,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:05",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-24 15:22:50",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "d92fcx",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977140156813314",
                "questionNum": "3372",
                "title": "2023B-文件目录大小",
                "content": "## 题目描述\n一个文件目录的数据格式为：目录`id`，本目录中文件大小，(子目录`id`列表）。其中目录`id`全局唯一，取值范围`[1, 200]`，本目录中文件大小范围`[1, 1000]`，子目录`id`列表个数`[0,10]`例如 : `1 20 (2,3) `表示目录`1`中文件总大小是`20`，有两个子目录，`id`分别是`2`和`3`。现在输入一个文件系统中所有目录信息，以及待查询的目录 `id` ，返回这个目录和及该目录所有子目录的大小之和。\r\n\n## 输入描述\n第一行为两个数字`M`，`N`，分别表示目录的个数和待查询的目录`id`,\r\n\n`1 ≤ M ≤ 100`\r\n\n`1 ≤ N ≤ 200`\r\n\n接下来`M`行，每行为`1`个目录的数据：\r\n\n目录`id `本目录中文件大小 (子目录`id`列表)\r\n\n子目录列表中的子目录`id`以逗号分隔。\r\n\n## 输出描述\n待查询目录以及其子目录之和\r\n\n## 示例一\n### 输入\n```\r\n3 1\r\n3 15 ()\r\n1 20 (2)\r\n2 10 (3)\r\n```\n### 输出\n```\r\n45\r\n```\n### 说明\n目录`1`大小为`20`，包含一个子目录`2`(大小为`10`)，子目录`2`包含`1`个子目录`3`(大小为`15`)，总的大小为`20+10+15=45`\r\n\n## 示例二\n### 输入\n```\r\n4 2\r\n4 20 ()\r\n5 30 ()\r\n2 10 (4,5)\r\n1 40 ()\r\n```\n### 输出\n```\r\n60\r\n```\n### 说明\n目录`2`包含`2`个子目录`4`和`5`，总的大小为`10+20+30 = 60`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 52,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:06",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 19:33:05",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "8d14k1",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977140328779777",
                "questionNum": "3373",
                "title": "2024D-地图寻宝",
                "content": "## 题目描述\n小华按照地图去寻宝，地图上被划分成m行和n列的方格，横纵坐标范围分别是 [0, n-1] 和 [0, m-1]。\r\n\n在横坐标和纵坐标的**数位之和**不大于k​的方格中存在黄金（每个方格中仅存在一克黄金），但横坐标和纵坐标数位之和大于k的方格存在危险不可进入。小华从入口 ​(0,0​)进入，任何时候只能向左，右，上，下四个方向移动一格。\r\n\n请问小华最多能获得多少克黄金？\r\n\n## 输入描述\n坐标取值范围如下：\r\n\n0 ≤ m ≤ 50\r\n\n0 ≤ n ≤ 50\r\n\nk 的取值范围如下：\r\n\n0 ≤ k ≤ 100\r\n\n输入中包含 `3` 个字数，分别是 `m, n, k`\r\n\n## 输出描述\n输出小华最多能获得多少克黄金\r\n\n## 示例一\n### 输入\n```\r\n40 40 18\r\n```\n### 输出\n```\r\n1484\r\n```\n## 示例二\n### 输入\n```\r\n5 4 7\r\n```\n### 输出\n```\r\n20\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 55,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:06",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 19:38:58",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "0ql38u",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977140534300674",
                "questionNum": "3374",
                "title": "2023A-机器人活动区域",
                "content": "## 题目\n现有一个机器人，可放置于 `M × N` 的网格 `grid` 中任意位置，每个网格包含一个非负整数编号。当相邻网格的数字编号差值的绝对值小于等于 `1` 时，机器人可以在网格间移动。**求机器人可活动的最大范围对应的网格点数目。**说明：\r\n\n1. 网格左上角坐标为 `(0,0)`，右下角坐标为 `(m−1, n−1)`\r\n2. 机器人只能在相邻网格间上下左右移动\r\n\n## 输入\n第 `1` 行输入为 `M` 和 `N` ，`M` 表示网格的行数 `N` 表示网格的列数。之后 `M` 行表示网格数值，每行 `N` 个数值（数值大小用 `k` 表示），数值间用单个空格分隔，行首行尾无多余空格。\r\n\n`M`、`N`、`k` 均为整数，且 `1 ≤ M, N ≤ 150` ，`0 ≤ k ≤ 50`\r\n\n## 输出\n输出 `1` 行，包含 `1` 个数字，表示最大活动区域的网格点数目。\r\n\n## 示例一\n### 输入\n```\r\n4 4\r\n1 2 5 2\r\n2 4 4 5\r\n3 5 7 1\r\n4 6 2 4\r\n```\n### 输出\n```\r\n6\r\n```\n### 说明\n如图所示，图中绿色区域，相邻网格差值绝对值都小于等于 `1` ，且为最大区域，对应网格点数目为 `6`。\r\n\n![72078439508](https://pic.code-nav.cn/mianshiya/question_picture/markdown/kjAWIWHM_1720784395088_mianshiya.png)\r\n\n## 示例二\n### 输入\n```\r\n2 3\r\n1 3 5\r\n4 1 3\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n任意两个相邻网格的差值绝对值都大于 `1` ，机器人不能在网格间移动，只能在单个网格内活动。对应网格点数目为 `1`\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 61,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:06",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 19:45:13",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "jzp0bq",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977140748210178",
                "questionNum": "3375",
                "title": "2023B-树状结构查询",
                "content": "## 题目描述\n通常使用多行的节点、父节点表示一棵树，比如\r\n\n西安 陕西陕西 中国江西 中国中国 亚洲泰国 亚洲\r\n\n输入一个节点之后，请打印出来树中他的所有下层节点\r\n\n## 输入描述\n第一行输入行数\r\n\n接着是多行数据，每行以空格区分节点和父节点\r\n\n最后是查询节点\r\n\n树中的节点是唯一的，不会出现两个节点，是同一个名字\r\n\n## 输出描述\n输出查询节点的所有下层节点。以字典序排序\r\n\n## 示例\n### 输入\n```\r\n5\r\nb a\r\nc a\r\nd c\r\ne c\r\nf d\r\nc\r\n```\n### 输出\n```\r\nd\r\ne\r\nf\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 50,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:06",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 19:49:25",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "w35zih",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977140920176642",
                "questionNum": "3376",
                "title": "2024D-二叉树的广度优先遍历",
                "content": "## 题目描述\n有一棵二叉树，每个节点由一个大写字母标识（最多`26`个节点），现有两组字母，分别表示后序遍历 (左孩子->右孩子->父节点) 和中序遍历 (左孩子->父节点->右孩子) 的结果，请输出层次遍历的结果。\r\n\n## 输入描述\n输入为两个字符串，分别是二叉树的后序遍历和中序遍历结果\r\n\n## 输出描述\n输出二叉树的层次遍历结果\r\n\n## 示例\n### 输入\n```\r\nCBEFDA CBAEDF\r\n```\n### 输出\n```\r\nABDCEF\r\n```\n### 说明\n二叉树为\r\n\n```\r\n    A\r\n   / \\\r\n  B   D\r\n /   / \\\r\nC   E   F\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 118,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:06",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 19:52:07",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "6srkul",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977141121503233",
                "questionNum": "3377",
                "title": "2024D-悄悄话花费的时间",
                "content": "## 题目描述\n给定一个二叉树，每个节点上站着一个人，节点数字表示父节点到该节点传递悄悄话需要花费的时间。\r\n\n初始时，根节点所在位置的人有一个悄悄话想要传递给其他人，求二叉树所有节点上的人都接收到悄悄话花费的时间。\r\n\n## **输入描述**\n给定一个数组表示二叉树，`-1` 表示空节点\r\n\n## **输出描述**\n返回所有节点都接收到悄悄话花费的时间\r\n\n## **示例**\n### **输入**\n```\r\n0 9 20 -1 -1 15 7 -1 -1 -1 -1 3 2\r\n```\n### **输出**\n```\r\n38\r\n```\n### **说明**\n表示如下二叉树\r\n\n![72042561237](https://pic.code-nav.cn/mianshiya/question_picture/markdown/mD2W6iAA_1720785574432_mianshiya.png)\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 72,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:06",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 19:54:30",
                "tagList": [
                    "华为OD",
                    "DFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "z4bphd",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977141322829826",
                "questionNum": "3378",
                "title": "2023B-火星改造",
                "content": "2XXX 年，人类通过对火星的大气进行宜居改造分析，使得火星已在理论上具备人类宜居的条件；\r\n\n由于技术原因，无法一次性将火星大气全部改造，只能通过局部处理形式；\r\n\n假设将火星待改造的区域为 `row * column` 的网格，每个网格有 `3` 个值，**宜居区**、**可改造区**、**死亡区**，使用 `YES`、`NO`、`NA` 代替：\r\n\n- `YES` 表示该网格已经完成大气改造；\r\n- `NO` 表示该网格未进行改造，后期可进行改造；\r\n- `NA` 表示死亡区，不作为判断是否改造完成的宜居，无法穿过；\r\n\n初始化下，该区域可能存在**多个宜居区**，并且每个宜居区能同时在每个太阳日单位向**上下左右**四个方向的相邻格子进行扩散，自动将 `4` 个方向相邻的真空区改造成宜居区；\r\n\n请计算这个待改造区域的网格中，可改造区是否能全部变成宜居区，如果可以，则返回改造的太阳日天数，不可以则返回`-1`。\r\n\n## 输入\n输入 `row * column` 个网格数据，每个网格值枚举值如下：`YES`，`NO`，`NA`；\r\n\n样例：\r\n\n```\r\nYES YES NO\r\nNO NO NO\r\nNA NO YES\r\n```\n### 输出\n可改造区是否能全部变成宜居区，如果可以，则返回改造的太阳日天数，不可以则返回`-1`。\r\n\n## 说明\n`grid[i][j]` 只有 3 种情况，`YES`、`NO`、`NA`。`row = grid.length`，`column = grid[i].length`，`1 <= row, column <= 8`\r\n\n## 示例一\n### 输入\n```\r\nYES YES NO\r\nNO NO NO\r\nYES NO NO\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n经过 `2` 个太阳日，完成宜居改造。\r\n\n## 示例二\n### 输入\n```\r\nYES NO NO NO\r\nNO NO NO NO\r\nNO NO NO NO\r\nNO NO NO NO\r\n```\n### 输出\n```\r\n6\r\n```\n### 说明\n经过 `6` 个太阳日，可完成改造\r\n\n## 示例三\n### 输入\n```\r\nNO NA\r\n```\n### 输出\n```\r\n-1\r\n```\n### 说明\n无改造初始条件，无法进行改造\r\n\n## 示例四\n### 输入\n```\r\nYES NO NO YES\r\nNO NO YES NO\r\nNO YES NA NA\r\nYES NO NA NO\r\n```\n### 输出\n```\r\n-1\r\n```\n### 说明\n输出`-1`。右下角的区域，被周边三个死亡区挡住，无法实现改造。\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 75,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:06",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 20:03:50",
                "tagList": [
                    "华为OD",
                    "BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "c6yx9y",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977141511573506",
                "questionNum": "3379",
                "title": "2024D-生成哈夫曼树",
                "content": "## 题目描述\n给定长度为`n`的无序的数字数组，每个数字代表二叉树的叶子节点的权值，数字数组的值均大于等于`1`。\r\n\n请完成一个函数，根据输入的数字数组，生成哈夫曼树，并将哈夫曼树按照中序遍历输出。\r\n\n为了保证输出的二又树中序遍历结果统一，增加以下限制：**二叉树节点中，左节点权值小于等于右节点权值，根节点权值为左右节点权值之和。当左右节点权值相同时，左子树高度高度小于等于右子树**\r\n\n注意：所有用例保证有效，并能生成哈夫曼树。\r\n\n提醒：哈夫曼树又称最优二叉树，是一种带权路径长度最短的二叉树。所谓树的带权路径长度，就是树中所有的叶结点的权值乘上其到根结点的路径长度（若根结点为`0`层，叶结点到根结点的路径长度为叶结点的层数）。\r\n\n例如：由叶子节点`5 15 40 30 10`生成的最优二叉树如下图所示\r\n\n![72042579324](https://pic.code-nav.cn/mianshiya/question_picture/markdown/mZzLLIiD_1720785661587_mianshiya.png)\r\n\n![72042581232](https://pic.code-nav.cn/mianshiya/question_picture/markdown/kWHW7S6w_1720785674409_mianshiya.png)\r\n\n该树的最短带权路径长度为`40*1+30*2+15*3+5*4+10*4 = 205`\r\n\n## **输入描述**\n第一行输入为数组长度，记为`N`，`1<=N<=1000`\r\n\n第二行输入无序数值数组，以空格分割，数值均大于等于`1`，小于`100000`\r\n\n## **输出描述**\n输出一个哈夫曼树的中序遍历的数组，数值间以空格分割\r\n\n## **示例**\n### **输入**\n```\r\n5\r\n5 15 40 30 10\r\n```\n### **输出**\n```\r\n40 100 30 60 15 30 5 15 10\r\n```\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 128,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:06",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-25 23:04:00",
                "tagList": [
                    "华为OD",
                    "DFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "j647qb",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977141763231746",
                "questionNum": "3380",
                "title": "2024D-寻找最富裕的小家庭",
                "content": "## 题目描述\n在一棵树中，每个节点代表一个家庭成员，节点的数字表示其个人的财富值，**一个节点及其直接相连的子节点被定义为一个小家庭**。\r\n\n现给你一棵树，请计算出最富裕的小家庭的财富和。\r\n\n## 输入描述\n第一行为一个数`N`，表示成员总数，成员编号`1-N`，`1<=N<=1000`\r\n\n第二行为`N`个空格分隔的数，表示编号`1-N`的成员的财富值，`0<=财富值<=1000000`\r\n\n接下来`N-1`行，每行两个空格分隔的整数`(N1,N2)`，表示`N1`是`N2`的父节点。\r\n\n## 输出描述\n最富裕的小家庭的财富和\r\n\n## 示例\n### 输入\n```\r\n4\r\n100 200 300 500\r\n1 2\r\n1 3\r\n2 4\r\n```\n### 输出\n```\r\n700\r\n```\n### 说明\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/QVcIUYwc_1720784628559_mianshiya.png)\r\n\n所构建出的树如上图所示，其中最小富裕家庭为节点`2`和节点`4`构成的小家庭。\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 106,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:06",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:05",
                "updateTime": "2025-06-23 20:31:18",
                "tagList": [
                    "华为OD",
                    "DFS&BFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "5syyt5",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814977141989724161",
                "questionNum": "3381",
                "title": "2024D-计算三叉搜索树的高度",
                "content": "## **题目描述：**\n定义构造三叉搜索树规则如下：\r\n\n每个节点都存有一个数，当**插入一个新的数**时，从根节点向下寻找，直到找到一个合适的空节点插入。\r\n\n查找的规则是： \r\n\n1. 如果数小于节点的数减去 `500`，则将数插入节点的左子树 \r\n2. 如果数大于节点的数加上 `500`，则将数插入节点的右子树 \r\n3. 否则，将数插入节点的中子树\r\n\n给你一系列数，请按以上规则，按顺序将数插入树中，构建出一棵三叉搜索树，最后输出树的高度。\r\n\n## **输入描述**\n第一行为一个数 `N`，表示有 `N` 个数，`1 <= N <= 10000`\r\n\n第二行为 `N` 个空格分隔的整数，每个数的范围为`[1, 10000]`\r\n\n## **输出描述**\n输出树的高度(根节点的高度为 `1`)\r\n\n## **示例一**\n### **输入**\n```\r\n5\r\n5000 2000 5000 8000 1800\r\n```\n### **输出**\n```\r\n3\r\n```\n### **说明**\n最终构造出的树如下，高度为 `3`：\r\n\n![72042521271](https://pic.code-nav.cn/mianshiya/question_picture/markdown/7rLXSC23_1720785846885_mianshiya.png)\r\n\n## **示例二**\n### **输入**\n```\r\n3\r\n5000 4000 3000\r\n```\n### **输出**\n```\r\n3\r\n```\n### **说明**\n最终构造出的树如下，高度为 `3`：\r\n\n![72042525581](https://pic.code-nav.cn/mianshiya/question_picture/markdown/DHg506Bb_1720785863565_mianshiya.png)\r\n\n## **示例三**\n### **输入**\n```\r\n9\r\n5000 2000 5000 8000 1800 7500 4500 1400 8100 \r\n```\n### **输出**\n```\r\n4\r\n```\n### **说明**\n最终构造出的树如下，高度为 `4`：\r\n\n![72042527825](https://pic.code-nav.cn/mianshiya/question_picture/markdown/t3Lcob7U_1720785881813_mianshiya.png)\r\n\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 115,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 18:54:06",
                "needVip": 0,
                "batchId": "1814977093084139520",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 18:54:06",
                "updateTime": "2025-06-23 20:51:22",
                "tagList": [
                    "华为OD",
                    "DFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "gst5cl",
                "hasChoiceQuestion": false
            }
        ],
        "total": "209",
        "size": "20",
        "current": "10",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "11"
    },
    "message": "ok"
}
