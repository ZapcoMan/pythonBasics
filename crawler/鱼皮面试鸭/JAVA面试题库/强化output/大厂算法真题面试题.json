{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814980224220168194",
                "questionNum": "3391",
                "title": "百度2023秋招-交换一次获得长度为k的排列",
                "content": "## 题目描述\n小红有一个长度为`n`的排列，她可以选择两个位置，然后交换两个位置的数。\r\n\n她想知道能否通过最多一次交换，使得存在一个连续子段，是长度为`k`的排列。\r\n\n排列是指一个长度为 `len` 的整数数组，数组中包含`1`到`len`的每个数，且每个数只出现一次。\r\n\n## 输入描述\n第一行两个整数`n, k`，表示排列长度和连续子段长度。\r\n\n第二行`n`个整数`a1, a2, ..., an`，表示排列。\r\n\n`1 <= k <= n <= 10^5`\r\n\n## 输出描述\n如果能够通过最多一次交换，存在一个连续子段是排列，输出`YES`，并输出交换的位置：先输出一个整数`x (0 <= x <= 1)`，然后输出`x`行，每行两个整数`u, v`，表示交换位置`u, v (u < v)`\r\n\n否则输出`NO`。\r\n\n## 示例\n### 输入\n```\r\n5 3\r\n1 2 3 4 5\r\n```\n### 输出\n```\r\nYES\r\n0\r\n```\n## 示例二\n### 输入\n```\r\n7 3\r\n1 5 7 3 6 4 2\r\n```\n### 输出\n```\r\nNO\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 3152,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:21",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:20",
                "updateTime": "2025-06-25 21:03:59",
                "tagList": [
                    "大厂算法真题",
                    "固定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "58evs4",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980224476020737",
                "questionNum": "3392",
                "title": "OPPO2023秋招提前批-小欧的区间取数",
                "content": "## 题目描述\n小欧拿到了一个数组，她准备选择一个连续子数组，满足该连续子数组的所有元素乘积的`2`进制末尾至少有`k`个`0`。小红想知道，这个连续子数组的最短长度是多少？\r\n\n## 输入描述\n第一行输入两个正整数`n`和`k`。第二行输入`n`个正整数`ai`。\r\n\n## 输出描述\n一个整数，代表连续子数组的最短长度。如果不存在这样的子数组，输出`-1`。\r\n\n## 示例一\n### 输入\n```\r\n6 3\r\n1 2 3 4 5 6\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n取`[2,3,4]`即可，`2*3*4=24`，其二进制为`11000`。\r\n\n## 示例二\n### 输入\n```\r\n6 4\r\n2 2 2 1 4 8\r\n```\n### 输出\n```\r\n2\r\n```\n## 示例三\n### 输入\n```\r\n5 1\r\n1 1 1 1 1\r\n```\n### 输出\n```\r\n-1\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 645,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:21",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:20",
                "updateTime": "2025-06-25 23:42:19",
                "tagList": [
                    "大厂算法真题",
                    "不定滑窗"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "bx15dj",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980224664764418",
                "questionNum": "3393",
                "title": "阿里蚂蚁2023秋招-讨厌鬼的区间",
                "content": "## 题目描述\n讨厌鬼有一个数`x`，他每次操作可以令`x = x + 1`或`x = x - 1`\r\n\n讨厌鬼还有两个区间`[l1, r1]`和`[l2, r2]`，讨厌鬼想知道，令`x`同时满足以下条件的最小操作数是多少?\r\n\n1. `l1 ≤ x ≤ r1`，且`x`是`2`的倍数\r\n2. `l2 ≤ x ≤ r2`，且`x`是`3`的倍数\r\n\n请输出这个操作数\r\n\n## 输入描述\n一行输入五个整数`x, l1, r1, l2, r2`\r\n\n`1 ≤ x ≤ 10^12`\r\n\n`1 ≤ l1 ≤ r1 ≤ 10^12`\r\n\n`1 ≤ l2 ≤ r2 ≤ 10^12`\r\n\n## 输出描述\n一行一个整数，表示最小操作数。若不存在这样的操作，输出`-1`。\r\n\n## 示例一\n### 输入\n```\r\n5 4 6 1 9\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n`+1`把`5`变成`6`，满足`2`个条件\r\n\n## 示例二\n### 输入\n```\r\n2 2 4 2 8\r\n```\n### 输出\n```\r\n-1\r\n```\n**时间限制：** C/C++ 1000MS，其他语言 2000MS\r\n\n**内存限制：** C/C++ 256MS，其他语言 512M\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 749,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:21",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:20",
                "updateTime": "2025-06-25 21:47:58",
                "tagList": [
                    "大厂算法真题",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "2an6uz",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980224891256834",
                "questionNum": "3394",
                "title": "OPPO2023秋招提前批-小欧数组求和",
                "content": "## 题目描述\n小欧拿到了一个数组，她有`q`次操作，每次操作修改一个元素。小欧希望每次修改后得到当前数组所有元素之和。你能帮帮她吗？\r\n\n## 输入描述\n第一行输入两个正整数`n`和`q`，代表数组的大小和操作次数。\r\n\n第二行输入`n`个正整数`ai`，代表小欧拿到的初始数组。\r\n\n接下来的`q`行，每行输入两个正整数`i`和`x`，代表将第`i`个元素修改为`x`。\r\n\n## 输出描述\n输出`q`行，每行输出一个正整数，代表当前数组元素之和。\r\n\n## 示例\n### 输入\n```\r\n5 3\r\n1 2 3 4 5\r\n2 3\r\n3 3\r\n5 1\r\n```\n### 输出\n```\r\n16\r\n16\r\n12\r\n```\n### 说明\n第一次修改后，数组变成`[1,3,3,4,5]`，元素之和为`16`。\r\n\n第二次修改后，数组变成`[1,3,3,4,5]`，元素之和为`16`。\r\n\n第三次修改后，数组变成`[1,3,3,4,1]`，元素之和为`12`。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 300,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:21",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-20 14:38:41",
                "tagList": [
                    "大厂算法真题",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ge03us",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980225138720769",
                "questionNum": "3395",
                "title": "OPPO2023秋招提前批-小欧的圆覆盖",
                "content": "## 题目描述\n在平面直角坐标系上有一个矩形，和一个定点`P`。小欧希望以点`P`为圆心画一个圆覆盖这个矩形，请你求出圆面积的最小值。注：`π`取`3.1415926536`\r\n\n## 输入描述\n第一行输入四个整数`x1,y1,x2,y2`，代表矩形左下角坐标为`(x1,y1)`，右上角坐标为`(x2,y2)`。\r\n\n第二行输入两个整数`xp,yp`，代表点`P`的坐标为`(xp,yp)`。\r\n\n## 输出描述\n一个浮点数，代表圆的最小面积。如果你的答案和标准答案的相对误差不超过`10^-4`，则认为你的答案正确。\r\n\n## 示例\n### 输入\n```\r\n0 0 1 1\r\n0 0\r\n```\n### 输出\n```\r\n6.2831853\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 205,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:21",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-25 23:33:28",
                "tagList": [
                    "大厂算法真题",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "drj8gc",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980225386184706",
                "questionNum": "3396",
                "title": "美团2023秋招-小美走公路",
                "content": "## 题目描述\n有一个**环形的公路**，上面共有`n`站，现在给定了顺时针第`i`站到第`i+1`站之间的距离（特殊的，也给出了第`n`站到第`1`站的距离）。小美想沿着公路第`x`站走到第`y`站，她想知道最短的距离是多少？\r\n\n## 输入描述\n第一行输入一个正整数`n`，代表站的数量。\r\n\n第二行输入`n`个正整数`ai`，前`n-1`个数代表顺时针沿着公路走，`i`站到第`i+1`站之间的距离；最后一个正整数代表顺时针沿着公路走，第`n`站到第`1`站的距离。\r\n\n第三行输入两个正整数`x`和`y`，代表小美的出发地和目的地。\r\n\n`1 <= n <= 10^5`\r\n\n`1 <= a <= 10^9`\r\n\n`1 <= x, y <= n`\r\n\n## 输出描述\n一个正整数，代表小美走的最短距离。\r\n\n## 示例一\n### 输入\n```\r\n3\r\n1 2 2\r\n2 3\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n![72112769098](https://pic.code-nav.cn/mianshiya/question_picture/markdown/F0pZs3YR_1721127690986_mianshiya.png)\r\n\n## 示例二\n### 输入\n```\r\n3\r\n1 2 2\r\n1 3\r\n```\n### 输出\n```\r\n2\r\n```\n## 说明\n![72112771738](https://pic.code-nav.cn/mianshiya/question_picture/markdown/0DOXxeOb_1721127717383_mianshiya.png)\r\n\n**时间限制：** 3000MS\r\n\n**内存限制：** 589824KB\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 615,
                "thumbNum": 0,
                "favourNum": 3,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:21",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-25 16:16:27",
                "tagList": [
                    "大厂算法真题",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "sg6c77",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980225604288514",
                "questionNum": "3397",
                "title": "百度2023秋招-下棋游戏",
                "content": "## 题目描述\n小红和朋友玩游戏，棋盘为`nxm`的坐标轴。有一颗棋子在坐标`(1,1)`的位置，每次可以向上或者向右移动奇数个单位，不能移动到棋盘外面，无法行动就输了，小红先手，请问小红能否必胜。\r\n\n## 输入描述\n一行一个整数`t`，表示有`t`组数据。\r\n\n接下来`t`行，每行两个整数`n`和`m`，表示棋盘大小。\r\n\n`1 <= t <= 10^4`\r\n\n`1 <= n, m < 10^3`\r\n\n## 输出描述\n对于每组数据，输出一行，如果小红必胜，输出`Yes`，否则输出`No`\r\n\n## 示例\n### 输入\n```\r\n4\r\n1 1\r\n1 4\r\n4 1\r\n4 4\r\n```\n### 输出\n```\r\nNo\r\nYes\r\nYes\r\nNo\r\n```\n### 说明\n样例一，棋盘大小为`1x1`，小红无法行动，输了。\r\n\n样例二，棋盘大小为`1x4`，小红第一次向右移动`3`个单位，小红获胜，朋友无法行动。\r\n\n样例三，棋盘大小为`4x1`，小红第一次向上移动`3`个单位，小红获胜，朋友无法行动。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 400,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:21",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-24 09:04:13",
                "tagList": [
                    "大厂算法真题",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "s96w0z",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980225818198018",
                "questionNum": "3398",
                "title": "小红书2023秋招提前批-小红的数组构造",
                "content": "## 题目描述\n小红希望你**构造**一个数组，满足以下条件：\r\n\n1. 数组共有`n`个元素，且所有元素两两不相等。\r\n2. 所有元素的最大公约数等于`k`。\r\n3. 所有元素之和尽可能小。\r\n\n请你输出数组元素之和的最小值。\r\n\n## 输入描述\n两个正整数`n`和`k`\r\n\n`1 ≤ n, k ≤ 10^5`\r\n\n## 输出描述\n一个正整数，代表数组元素之和的最小值。\r\n\n## 示例一\n### 输入\n```\r\n3 1\r\n```\n### 输出\n```\r\n6\r\n```\n### 说明\n构造数组`[1, 2, 3]`为满足题意的数组\r\n\n## 示例二\n### 输入\n```\r\n2 6\r\n```\n### 输出\n```\r\n18\r\n```\n### 说明\n构造数列`[6, 12]`为满足题意的数列。\r\n\n**时间限制：** `3S`\r\n\n**内存限制：** `512MB`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 252,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:21",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-24 09:04:14",
                "tagList": [
                    "大厂算法真题",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "3hy3zv",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980226044690434",
                "questionNum": "3399",
                "title": "阿里蚂蚁2023秋招-奇偶操作",
                "content": "## 题目描述\n小红有一个长度为`n`的数组`a`，她将对数组进行`m`次操作，每次操作有两种类型：\r\n\n1. 将数组中所有值为奇数的元素加上`x`\r\n2. 将数组中所有值为偶数的元素加上`x`\r\n\n请你输出`m`次操作后的数组\r\n\n## 输入描述\n第一行两个整数`n`和`m`，表示数组长度和操作次数\r\n\n第二行`n`个整数，表示数组`a`的初始值。\r\n\n接下来`m`行，每行两个整数`t`和`x`，`t`表示一次操作的类型和参数，`t`为`1`表示第一种操作，`t`为`2`表示第二种操作\r\n\n`1 < n, m < 10^5`\r\n\n`1 < ai, x < 10^5`\r\n\n`1 <= t <= 2`\r\n\n## 输出描述\n输出一行，包含`n`个整数，表示`m`次操作后的数组\r\n\n## 示例\n### 输入\n```\r\n5 3\r\n1 2 3 4 5\r\n1 2\r\n2 2\r\n1 3\r\n```\n### 输出\n```\r\n6 4 8 6 10\r\n```\n### 说明\n第一次，将所有奇数元素加 `2`，数组变为`[3,2,5,4,7]`\r\n\n第二次，将所有偶数元素加 `2`，数组变为`[3,4,5,6,7]`\r\n\n第三次，将所有奇数元素加 `3`，数组变为`[6,4,8,6,10]`\r\n\n**时间限制：** C/C++ 1000MS，其他语言 2000MS\r\n\n**内存限制：** C/C++ 256M，其他语言 512M\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 255,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:21",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-25 18:00:33",
                "tagList": [
                    "大厂算法真题",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "woku89",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980226271182849",
                "questionNum": "3400",
                "title": "科大讯飞2023非凡计划-汤姆和杰瑞",
                "content": "## 题目描述\n汤姆在集市上买了`1`公斤奶酪回家。然而，趁汤姆不在时，杰瑞来偷了`A/B`公斤的奶酪。问杰瑞偷了奶酪后，汤姆还有多少奶酪? \r\n\n## 输入描述\n第—行给出两个整数`A,B`。`1 ≤ A < B ≤ 9`\r\n\n## 输出描述\n输出杰瑞偷了奶酪后，汤姆还有多少奶酪。以分数的形式表示，分子和分母用空格间隔。(输出必须满足分母为`B`)\r\n\n## 示例\n### 输入\n```\r\n2 7\r\n```\n### 输出\n```\r\n5 7\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 327,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:21",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-19 02:00:36",
                "tagList": [
                    "大厂算法真题",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "8l6or7",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980226451537922",
                "questionNum": "3401",
                "title": "科大讯飞2023非凡计划-将企鹅击落水中最小的力",
                "content": "## 题目描述\n牛牛发明了一款破冰行动的游戏，假设在河面上，有`n`块紧密相连的冰块。标号`1-n`。将一只企鹅放到任意一个标号为`k`的冰块上，现在通过打破一些冰块来使得企鹅掉落河中，然而他无法打破企鹅所踩的冰块`k`。每个冰块都有不同的强度`Ai` ，所以需要一个等于`Ai`的力来打破冰。当两侧的冰块都没有与河两岸连接时，则冰块会掉落到河中。\r\n\n## 输入描述\n第一行给出`n`，表示冰块的数量。\r\n\n第二行中，按顺序给出代表打破第`i`块冰块所需的力的`Ai`。题目保证企鹅所在的地方用`-1`表示，没有企鹅位于冰块`1`或冰块`n`的情况。\r\n\n`3<=n<=2*10^5`\r\n\n## 输出描述\n输出可以击落企鹅到水中的最小力。\r\n\n## 示例\n### 输入\n```\r\n5\r\n7 -1 6 2 5\r\n```\n### 输出\n```\r\n9\r\n```\n### 说明\n假设冰块的索引从`1`开始。冰块`1`和冰块`4`可以通过分别施加`7`和`2`的力来打破，此时企鹅所在的冰块`2`和冰块`3`一起掉落河中。所以企鹅将落下。所以，可以使企鹅掉落的最小力是`2+7=9`。\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 262,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:21",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-25 12:09:40",
                "tagList": [
                    "大厂算法真题",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "gzoy74",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980226640281602",
                "questionNum": "3402",
                "title": "科大讯飞2023非凡计划-数组的最小距离",
                "content": "## 题目描述\n小红定义两个数组`a`和`b`之间的距离为\r\n\n![72112758257](https://pic.code-nav.cn/mianshiya/question_picture/markdown/VGhkkmbS_1721127582575.png)\r\n\n即每个位置的差的绝对值之和，其中`n`为数组的长度。小红现在可以进行**任意次操作**，**选择任意数组的任意一个元素**，使其乘以`-1`。\r\n\n小红希望最终两个数组的距离尽可能小。你能帮帮她吗?\r\n\n## 输入描述\n第一行输入一个正整数， 代表两个数组的长度。\r\n\n第二行输入`n`个整数`ai`，代表第一个数组。\r\n\n第三行输入`n`个整数`bi`，代表第二个数组。\r\n\n## 输出描述\n一个整数，代表两个数组的最小距离。\r\n\n## 示例\n### 输入\n```\r\n3\r\n1 2 3\r\n-3 2 -1\r\n```\n### 输出\n```\r\n4\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 168,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:21",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-24 14:16:19",
                "tagList": [
                    "大厂算法真题",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "1491vp",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980226820636674",
                "questionNum": "3403",
                "title": "大疆2023秋招-农田中作物的最大产量",
                "content": "## 题目描述\n给定一个**二维数组**`cropField`，其中每个元素代表农田中对应位置的作物产量，每个位置上的作物经过灌溉可使产量加`1`倍(即对应位置作物产量数`*2`)，**重复灌溉同一位置不能多次加倍。**\r\n\n现在需要修建 `2` 条灌溉渠道，`1`条从上到下灌溉，`1`条从左到右灌溉。\r\n\n请确定哪行和哪列应该被灌溉，使得农田中作物的**总产量最大化**，并输出最大化的总产量。\r\n\n## 输入描述\n第一行输入两个数字`n`和`m`，表示二维数组的行数和列数\r\n\n接下来的`n`行输入二维数组。\r\n\n## 输出描述\n一个整数，表示最大产量\r\n\n## 示例\n### 输入\n```\r\n4 4\r\n2 3 1 4\r\n1 2 0 3\r\n4 2 1 7\r\n3 1 4 2\r\n```\n### 输出\n```\r\n64\r\n```\n### 说明\n选择最后一行和最后一列进行灌溉。\r\n\n**时间限制：** 3000MS\r\n\n**内存限制：** 589824KB\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 236,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:21",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-21 15:55:27",
                "tagList": [
                    "大厂算法真题",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "4bparx",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980227101655041",
                "questionNum": "3404",
                "title": "荣耀2023秋招-根据字符串中的时间信息排序并输出",
                "content": "## 题目描述\n解析输入的字符串数组，提取出字符串中的时间戳信息，并且将字符串按照时间戳排序后，输出到控制台。\r\n\n## 输入描述\n第`1`行指定数组的`size`;\r\n\n第`2`行到第`n`行，每行为一个独立的字符串，`n`为`size`的值。\r\n\n每行的字符串由`\"-:\"`和字母、数字组成，时间戳在字符串中的位置不确定，时间戳格式为`2019-01-01T07:30:20`表示`2019`年`1`月`1`日，`7`点`30`分`20`秒。时间为`24`小时制。\r\n\n## 输出描述\n将输入的字符串按照时间戳进行从小到大排序后，输出。符合如下规则:\r\n\n1. 如果时间戳信息相同，按照字符串长度从小到大进行排序;\r\n2. 如果长度相同，则按照从首字符开始的ASCII码值比较从小到大进行排序;\r\n3. 如果两个字符串完全一样，则只需要输出一个。\r\n\n## 示例\n### 输入\n```\r\n5\r\nmy/2019-01-01T09:00:01\r\nmy/2019-01-01T09:00:01\r\nabc/2018-12-24T08:00:00/test/you\r\n1/2018-12-24T08:00:00/test/Test1\r\n123/2018-12-24T08:00:09/test/me\r\n```\n### 输出\n```\r\n1/2018-12-24T08:00:00/test/Test1\r\nabc/2018-12-24T08:00:00/test/you\r\n123/2018-12-24T08:00:09/test/me\r\nmy/2019-01-01T09:00:01\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 89,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-25 17:25:22",
                "tagList": [
                    "大厂算法真题",
                    "模拟"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "oqmocw",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980227302981634",
                "questionNum": "3405",
                "title": "科大讯飞2023非凡计划-禁着点的方案数",
                "content": "## 题目描述\n小红拿到了一个数组， 她将这个数组的元素定义为“禁着点”。小红希望你找到一对正整数`x`和`y`，满足`x+y=s`且`x`和`y`都不是“禁着点”。你能告诉小红有多少种方案吗?\r\n\n## 输入描述\n第一行输入一个正整数`n`，代表禁着点的数量。\r\n\n第二行输入`n`个正整数`ai`，代表每个禁着点。\r\n\n第三行输入一个正整数`s`。\r\n\n`1<=n<=200000`，`1<=ai,s<=10^9`，保证每个禁着点都是不相等的。\r\n\n## 输出描述\n一个数字，表示可以选择的方案数。\r\n\n## 示例\n### 输入\n```\r\n3\r\n1 2 3\r\n10\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n一共有`3`组符合要求的正整数对，`(4,6)`，`(5,5)`和`(6,4)`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 132,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-25 17:25:42",
                "tagList": [
                    "大厂算法真题",
                    "哈希集合"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "0guozb",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980227596582914",
                "questionNum": "3406",
                "title": "微众银行2023秋招-切糖果",
                "content": "## 题目描述\n小美想要买糖果店的一根长长的糖果，糖果店顾客可以从中选取一个位置然后老板会在那切断，糖果前端到那个切断位置的糖果就会出售给这位顾客。这个糖果其实不同段有着不同的口味，小美希望她选出来的糖果中各个段有着不同的口味，在这基础上希望能选出尽可能长的糖果。小美想知道她能买到最长多长的糖果，请你帮帮她。\r\n\n## 输入描述\n第一行`1`个整数`n`，表示糖果的长度。\r\n\n第二行`n`个整数`a1 a2 ... an`，其中`ai`表示从糖果前端开始第`i`段的口味，每段均`1`为单位长度。\r\n\n对于100%的数据，`1 <= n <= 50000`，`1 <= ai <= 50000`\r\n\n## 输出描述\n输出一行一个整数表示能买到的糖果的最长长度，且其中不包含相同口味。\r\n\n## 示例一\n### 输入\n```\r\n5\r\n1 2 3 3 4\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n如果我们买长度为`4`的糖果，包含的口味为`[1,2,3,3]`，存在了重复。\r\n\n而长度为`3`时，包含的口味为`[1,2,3]`，不存在重复。因此长度`3`为最长的不存在重复口味糖果长度。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 199,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-25 16:04:37",
                "tagList": [
                    "大厂算法真题",
                    "哈希集合"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "gmiraa",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980227890184193",
                "questionNum": "3407",
                "title": "美团2023秋招-小美的排列询问",
                "content": "## 题目描述\n小美拿到了一个排列。她想知道在这个排列中，`x`和`y`是否是相邻的。你能帮帮她吗？\r\n\n排列是指一个长度为`n`的数组，其中 `1` 到 `n` 每个元素恰好出现一次。\r\n\n## 输入描述\n第一行输入一个正整数`n`，代表排列的长度。\r\n\n第二行输入`n`个正整数`ai`，代表排列的元素。\r\n\n第三行输入两个正整数`x`和`y`，用空格隔开。\r\n\n`1 <= n <= 2*10^5`\r\n\n`1 <= ai, x, y <= n`\r\n\n`x != y`\r\n\n## 输出描述\n如果`x`和`y`在排列中相邻，则输出`\"Yes\"`。否则输出`\"No\"`。\r\n\n## 示例一\n### 输入\n```\r\n4\r\n1 4 2 3\r\n2 4\r\n```\n### 输出\n```\r\nYes\r\n```\n## 示例二\n### 输入\n```\r\n5\r\n3 4 5 1 2\r\n3 2\r\n```\n### 输出\n```\r\nNo\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 180,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-22 02:24:24",
                "tagList": [
                    "大厂算法真题",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "8ifkm9",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980228053762049",
                "questionNum": "3408",
                "title": "阿里2023春招实习-合法的三元组",
                "content": "## 题目描述\n给定一个数组，请你计算有多少个三元组`<i,j,k>`满足`0≤i<j<k<n`且\r\n\n`max(ai,aj,ak) − min(ai,aj,ak) = 1`\r\n\n## 输入描述\n第一行输入一个正整数`n`\r\n\n第二行输入`n`个正整数`ai`  \r\n\n`3 ≤ n ≤ 200000`\r\n\n`1 ≤ a ≤ 10^9`\r\n\n## 输出描述\n一个整数，代表合法的三元组数量。\r\n\n## 示例一\n### 输入\n```\r\n4\r\n2 2 3 1\r\n```\n### 输出\n```\r\n2\r\n```\n## 说明\n一共有两组符合要求的三元组，分别是`2 2 3`和`2 2 1`\r\n\n## 示例二\n### 输入\n```\r\n5\r\n2 2 1 2 1\r\n```\n### 输出\n```\r\n9\r\n```\n3个2中挑出两个2，在2个1中挑出1个1，构成 2 2 1\r\n\ncnt[a+1] * cnt[a] * (cnt[a]-1) // 2\r\n\n在n个球中挑选出2个球，\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 152,
                "thumbNum": 0,
                "favourNum": 1,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-16 19:02:38",
                "tagList": [
                    "大厂算法真题",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "0doi8y",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980228208951298",
                "questionNum": "3409",
                "title": "小红书2023秋招-推荐系统",
                "content": "## 题目描述\n统计热点词频；输入一个字符串，统计词频后，按照词频从高到低打印热搜单词（出现次数大于等于`3`的单词）\r\n\n对于两个词频相同的单词，要按单词字典序打印。\r\n\n## 输入描述\n一行字符串。仅由小写字母和空格组成。代表小红的搜索记录。\r\n\n字符串长度不超过`100000`.\r\n\n## 输出描述\n小红所有的关键词。每行输出一个。你需要按照搜索频次从高到低输出。频次相同的，你需要按字典序升序输出。\r\n\n## 示例\n### 输入\n```\r\nkou red game red ok who game red karaoke yukari kou red red nani kou can koukou ongakugame game\r\n```\n### 输出\n```\r\nred\r\ngame\r\nkou\r\n```\n**时间限制：** 3000MS\r\n\n**内存限制：** 589824KB\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 293,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-18 16:33:31",
                "tagList": [
                    "大厂算法真题",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "a1ij6v",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980228414472193",
                "questionNum": "3410",
                "title": "贝壳2021秋招-牛妹的字符串",
                "content": "## 题目描述\n牛妹拿到了一个只由小写字母组成的字符串`s`，接下来将字符串执行`k`次操作，每次操作都会把`s`中ASCII码最小的字母从`s`中删除，请返回`k`次操作之后的字符串`s`。\r\n\n## 输入描述\n输入一行，分别为字符串`s`和数字`k`，用逗号`\",\"`隔开。\r\n\n## 输出描述\n输出一个字符串，表示操作后得到的结果。\r\n\n## 示例\n### 输入\n```\r\n\"caabeefa\",2\r\n```\n### 输出\n```\r\n\"ceef\"\r\n```\n### 说明\n第1次操作，`s`中ASCII最小的字母是`'a'`，删除所有的`'a'`得到`\"cbeef\"`\r\n\n第2次操作，`s`中ASCII最小的字母是`'b'`，删除所有的`'b'`得到`\"ceef\"`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 96,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-24 19:16:09",
                "tagList": [
                    "大厂算法真题",
                    "哈希集合"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ccjbg3",
                "hasChoiceQuestion": false
            }
        ],
        "total": "63",
        "size": "20",
        "current": "1",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "4"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814980228615798786",
                "questionNum": "3411",
                "title": "阿里淘天2023秋招-讨厌鬼的排列",
                "content": "## 题目描述\n讨厌鬼有一个长度为`n`的数组，他想知道这个数组有多少个子序列是一个排列?\r\n\n子序列的定义：数组删除若干个元素(也可以不删)后得到的新数组。\r\n\n排列的定义：长度为`m`的数组，`1`到`m`每个元素都出现过，且恰好出现`1`次。\r\n\n## 输入描述\n第一行输入一个整数`n (1 < n < 10^5)`\r\n\n第二行输入`n`个整数`ai (1 < a < 10^9)`\r\n\n## 输出描述\n一行一个整数，表示有多少个子序列是一个排列。由于答案过大，请将答案对`10^9+7`取模后输出\r\n\n## 示例\n### 输入\n```\r\n6\r\n1 1 5 2 3 4\r\n```\n### 输出\n```\r\n10\r\n```\n### 说明\n符合要求的子序列有：`{1}`，`{1}`，`{1，2}`，`{1，2}`，`{1，2，3}`，`{1，2，3}`，`{1，2，3，4}`，`{1，2，3，4}`，`{1，5，2，3，4}`，`{1，5，2，3，4}`共`10`个\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 101,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-21 00:52:54",
                "tagList": [
                    "大厂算法真题",
                    "哈希表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "d59vwc",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980228808736770",
                "questionNum": "3412",
                "title": "Bilibili2023秋招-最长同值路径",
                "content": "## 题目描述\n给定一个二叉树的 `root` ，返回**最长的路径的长度**，这个路径中的每节点具有相同值。这条路径可以经过也可以不经过根节点。\r\n\n**两个节点之间的路径长度，由它们之间的边数表示。**\r\n\n树的节点数的范围是`[0,10^4]`\r\n\n`-1000 <= Node.val <= 1000`\r\n\n树的深度将不超过`1000`\r\n\n## 输入描述\n本题为LeetCode核心代码模式，传入一个参数`root`，为该二叉树的根节点。\r\n\n## 输出描述\n返回一个整数，表示最长路径的长度。\r\n\n## 示例一\n### 输入\n```\r\nroot = [5,4,5,1,1,5]\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/Ktryu3ds_1721119168540_mianshiya.png)\r\n\n## 示例二\n### 输入\n```\r\nroot = [1,4,5,4,4,5]\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/xOYLZHzT_1721119195870_mianshiya.png)\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 113,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:21",
                "updateTime": "2025-06-22 00:36:00",
                "tagList": [
                    "大厂算法真题",
                    "DFS"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ehxp27",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980228989091841",
                "questionNum": "3413",
                "title": "大疆2023秋招-链表合并",
                "content": "## 题目描述\n现在有一个链表数组，每个链表内都已经是**升序**的排序现在请你将所有的链表进行合并，返回合并后的升序链表。\r\n\n## 输入描述\n一共 `n + 1`行数据\r\n\n第`1`行：一共有 `n` 个链表\r\n\n第`2~n+1`行：所有的链表\r\n\n## 输出描述\n合并后的链表的所有元素\r\n\n## 示例一\n### 输入\n```\r\n3\r\n1 4 5 \r\n1 3 4 \r\n2 6\r\n```\n### 输出\n```\r\n1 1 2 3 4 4 5 6\r\n```\n### 说明\n第一行：一共有三组链表\r\n\n第二行：第一组链表：`1->4->5`\r\n\n第三行：第二组链表：`1->3->4`\r\n\n第四行：第三组链表：`2->6`\r\n\n合并后的结果为`1->1->2->3->4->4->5->6`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 163,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-24 12:30:33",
                "tagList": [
                    "大厂算法真题",
                    "链表"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "s73dmh",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980229194612737",
                "questionNum": "3414",
                "title": "荣耀2023秋招-找出升序数组中和为给定值的两个数字",
                "content": "## 题目描述\n输入一个已经按升序排序过的数组和一个数字，在数组中查找两个数，使得它们的和正好是输入的那个数字。\r\n\n如果有多对数字的和等于输入的数字，输出找到的第一对即可。\r\n\n## 输入描述\n第一行输入一个按升序排序过的整数数组，数组元素不可重复，数组最大不超过`1000`个元素，起始和结束用中括号。\r\n\n第二行输入一个整数，表示要在第一行数组中要查找的两个数字的和。\r\n\n## 输出描述\n输出一行三个整数，第一个表示结果是否正常(`0`表示异常或未找到，`1`表示正常)，第二个对应找到的数组索引小的数字，第三个对应找到的数组索引大的数字。\r\n\n三个整数用单个空格隔开。\r\n\n如果结果异常或未找到，后两个数字返回均为`0`。\r\n\n## 示例\n### 输入\n```\r\n[1 2 4 7 11 15]\r\n6\r\n```\n### 输出\n```\r\n1 2 4\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 117,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-24 09:02:19",
                "tagList": [
                    "大厂算法真题",
                    "双指针"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "mh10lz",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980229412716545",
                "questionNum": "3415",
                "title": "华为2023暑期实习-空栈压数",
                "content": "## 题目描述\n向一个空栈压入**正整数**，每当压入一个整数时，执行以下规则（设: **栈顶至栈底**整数依次编号为` n1, n2, ..., nx`，其中`n1` 为最新压入的整数)\r\n\n1. 如果 `n1 = n2`，则 `n1`、`n2`全部出栈，压入新数据 `m (m = 2*n1)`\r\n2. 如果 `n1 = n2 + ... + ny`( `y`的范围为`[3,x]`) ，则 `n1, n2, ..., ny` 全部出栈，压入新数据 `m (m = 2*n1)`。\r\n3. 如果上述规则都不满足，则不做操作。\r\n\n如：依次向栈压入 `6、1、2、3`，当压入 `2` 时，栈顶至栈底依次为 `[2,1,6]`；当压入 `3` 时，`3 = 2 + 1`，`3、2、1` 全部出栈，重新入栈整数`6`，此时栈顶至栈底依次为 `[6,6]`；`6 = 6`，两个 `6` 全部出栈，压入 `12`，最终栈中只剩个元素 `12`。\r\n\n向栈中输入一串数字，请输出应用此规则后栈中最终存留的数字。\r\n\n## 输入描述\n使用单个空格隔开的正整数的字符串，如 `\"5 6 7 8\"`，左边的数字先入栈。\r\n\n- 正整数大小为 `[1, 2^31−1]`。\r\n- 正整数个数为 `[1,1000]`。\r\n\n## 输出描述\n最终栈中存留的元素值，元素值使用单个空格隔开，如 `\"8 7 6 5\"`，从左至右依次为栈顶至栈底的数字。\r\n\n## 示例一\n### 输入\n```\r\n10 20 50 80 1 1\r\n```\n### 输出\n```\r\n2 160\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 113,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-19 18:45:38",
                "tagList": [
                    "大厂算法真题",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "fkb5rw",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980230020890626",
                "questionNum": "3416",
                "title": "Bilibili2021秋招-大鱼吃小鱼",
                "content": "## 题目描述\n小明最近喜欢上了俄罗斯套娃、大鱼吃小鱼这些大的包住小的类型的游戏。\r\n\n于是小明爸爸给小明做了一个特别版的大鱼吃小鱼游戏，他希望通过这个游戏能够近一步提高小明的智商。\r\n\n游戏规则如下：\r\n\n现在有`N`条鱼，每条鱼的体积为`Ai`，从左到右排成一排。`A`数组是一个排列。\r\n\n小明每轮可以执行一次大鱼吃小鱼的操作。一次大鱼吃小鱼的操作：对于每条鱼，它在每一次操作时会吃掉右边比自己小的第一条鱼。\r\n\n值得注意的是，在一次操作中，每条鱼吃比自己小的鱼的时候是同时发生的。\r\n\n举一个例子，假设现在有三条鱼，体积为分别`[5，4，3]`，`5`吃`4`，`4`吃`3`，一次操作后就剩下`[5]`一条鱼。\r\n\n爸爸问小明，你知道要多少次操作，鱼的数量就不会变了嘛？\r\n\n## 输入描述\n第一行输入长度`N`\r\n\n第二行输入`A`数组，数字之间用空格隔开\r\n\n`１＜＝N＜＝10^5`，`１＜＝Ai＜＝Ｎ`\r\n\n## 输出描述\n一个正整数, 表示要多少次操作，鱼的数量就不会变了。\r\n\n## 示例一\n### 输入\n```\r\n3\r\n1 2 3\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n无需操作`A`数组。\r\n\n## 示例二\n### 输入\n```\r\n6\r\n4 3 2 3 2 1\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n`[4,3,2,3,2,1]-->[4,3]-->[4]`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 128,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-21 23:28:23",
                "tagList": [
                    "大厂算法真题",
                    "单调栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "0e803n",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980230188662785",
                "questionNum": "3417",
                "title": "Bilibili2019秋招-简单表达式求值",
                "content": "## 题目描述\n给定一个合法的表达式字符串，其中只包含**非负整数、加法、减法以及乘法符号（不会有括号）**，例如`7+3*4*5+2+4-3-1`，请写程序计算该表达式的结果并输出\r\n\n## 输入描述\n输入有多行，每行是一个表达式，输入以`END`作为结束\r\n\n## 输出描述\n每行表达式的计算结果\r\n\n## 示例\n### 输入\n```\r\n7+3*4*5+2+4-3-1\r\n2-3*1\r\nEND\r\n```\n### 输出\n```\r\n69\r\n-1\r\n```\n",
                "difficulty": 1,
                "contentType": 0,
                "viewNum": 115,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-21 03:09:40",
                "tagList": [
                    "大厂算法真题",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "21qk3f",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980230402572289",
                "questionNum": "3418",
                "title": "荣耀2023秋招-算式求解",
                "content": "## 题目描述\n要开发一款教育类App，帮助幼儿在识数阶段做一百以内自然数[0.99]的加减法。\r\n\n屏幕上会显示`\"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"0\" \"+\" \"-\" \"=\"`这些按钮，用户在按了若工按钮之后，如果按了`\"=\"`，则会把按`\"=\"`之前的字符串作为一个算式，计算结果。\r\n\n中间结果或最后结果可以为负数。\r\n\n## 输入描述\n输入为一个字符串，形如`\"23+86-6+37+24-8-13\"`。\r\n\n输入字符串中保证:\r\n\n1.不会包含除`\"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"0\" \"+\" \"-\" \"=\"`之外的字符\r\n\n2.长度不为`0`\r\n\n3.不以`\"+\"`或`\"-\"`开始，不以`\"+\"`或`\"-\"`结束\r\n\n4.不会出现连续两个或两个以上`\"+\"`\r\n\n5.不会出现连续两个或两个以上`\"-\"`\r\n\n6.`\"+\" \"-\"`不会相邻\r\n\n7.操作数为范围为`[0，99]`\r\n\n8.一定包含运算符 (`\"+\"`或`\"-\"`)\r\n\n## 输出描述\n算式结果，一个整数。\r\n\n## 示例\n### 输入\n```\r\n1+2+99-10-10\r\n```\n### 输出\n```\r\n82\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 79,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-02 11:19:06",
                "tagList": [
                    "大厂算法真题",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "1jzfdr",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980230620676097",
                "questionNum": "3419",
                "title": "百度2017秋招-士兵队列",
                "content": "## 题目描述\n一队士兵在操场上排成一列，士兵总数为`n`，士兵按照队伍从前往后的顺序从`1`到`n`依次编号。每个士兵有各自的身高，第`i`个士兵的身高为`ai`。士兵列队完毕后，将军走到队列的最前面。因为身高不一，有些士兵可能被前面身高更高的挡住了，这样将军就看不到他们。将军能看到某个士兵当且仅当他的身高严格大于他前面的所有士兵。问将军一共能看到多少个士兵。\r\n\n## 输入描述\n第一行输入一个整数`T（T＜=100）`，表示测试数据的组数。\r\n\n每组数据第一行输入一个数`n（1 <= n <= 10^4）`表示士兵的个数，第二行`n`个整数`a1, a2, ..., an（ 0 <= ai <= 10^9)`，依次表示每一个士兵的身高。\r\n\n## 输出描述\n对于每组数据，输出一行，将军能看到的士兵数。\r\n\n## 示例一\n### 输入\n```\r\n3\r\n4\r\n1 2 3 4\r\n3\r\n1 1 1\r\n4\r\n1 1 3 2\r\n```\n### 输出\n```\r\n4\r\n1\r\n2\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 64,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-05-09 16:01:40",
                "tagList": [
                    "大厂算法真题",
                    "单调栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "n2tz98",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980230998163457",
                "questionNum": "3420",
                "title": "腾讯2020春招-压缩算法",
                "content": "## 题目描述\n小Q想要给他的朋友发送一个神秘字符串，但是他发现字符串过于长了，于是小Q发明了一种压缩算法对字符串中重复的部分进行了压缩，对于字符串中连续的`m`个相同字符串`S`将会压缩为`m|S`，例如字符串`ABCABCABC`将会被压缩为`[3|ABC]`，现在小Q的同学收到了小Q发送过来的字符串，你能帮助他进行解压缩么？\r\n\n## 输入描述\n输入只有一行，为压缩过的字符串。\r\n\n## 输出描述\n输出解压后的字符串。\r\n\n## 示例一\n### 输入\n```\r\nHG[3|B[2|CA]]F\r\n```\n### 输出\n```\r\nHGBCACABCACABCACAF\r\n```\n## 说明\n`HG[3|B[2|CA]]F` -> `HG[3|BCACA]F` -> `HGBCACABCACABCACAF`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 133,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-16 22:28:03",
                "tagList": [
                    "大厂算法真题",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "1wr9zt",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980231212072961",
                "questionNum": "3421",
                "title": "华为2023秋招-每日股票价格",
                "content": "## 题目描述\n给定某只股票连续`N`天的价格列表`stockPrices`，其中`stockPrices[i]`表示股票某天的价格，请生成一个新列表，对应位置输出为：要想等到股票价格上涨，至少需要等待的天数，如果股票价格不上涨，对应位置输出为`0`。\r\n\n## 输入描述\n第一行表示第二行元素的个数`N`\r\n\n第二行为用空格隔开的整数，表示每天股票的价格\r\n\n其中`0 < N <= 1000000`每天股票价格为正整数\r\n\n## 输出描述\n输出为用空格分隔的长度为`N`的列表，对应位置为：要想等到股票价格上涨，至少需要等待的天数\r\n\n## 示例\n### 输入\n```\r\n5\r\n33 34 14 12 16\r\n```\n### 输出\n```\r\n1 0 2 1 0\r\n```\n### 说明\n`stockPrices = [33,34,14,12,16]`\r\n\n当`i = 0`时，`stockPrices[0] = 33`,下次价格上涨`stockPrices[1] = 34`，此处输出为`1-0 = 1`，以此类推。\r\n\n**时间限制：** C/C++`500`MS，其他语言`1000`MS\r\n\n**内存限制：** C/C++`256`MB，其他语言`512`MB\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 184,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:22",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-17 22:39:07",
                "tagList": [
                    "大厂算法真题",
                    "单调栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "9mrrj9",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980231556005889",
                "questionNum": "3422",
                "title": "美团2023春招-火车迷",
                "content": "## 题目描述\n小美是一个火车迷。最近她在观察家附近火车站的火车驶入和驶出情况，发现火车驶入和驶出的顺序并不一致。经过小美调查发现，原来这个火车站里面有一个类似于栈的结构，如下图所示：\r\n\n![img](https://pic.code-nav.cn/mianshiya/question_picture/markdown/oXKqWWfQ_1721208916171_mianshiya.png)\r\n\n例如可能`1`号火车驶入了火车站中的休息区`s`，在驶出之前`2`号火车驶入了。那么在这种情况下，`1`号火车需要等待`2`号火车倒车出去后才能出去（显然被后面驶入的`2`号火车挡住了，这个休息区`s`**只有一个出入口**）。\r\n\n出于好奇，小美统计了近些天的火车驶入驶出情况，开始统计和结束统计时休息区`s`中均是空的。由于中途疏忽，小美觉得自己好像弄错了几个驶入驶出顺序，想请你帮她验证一下。\r\n\n值得注意的是，小美虽然可能弄错了顺序，但对火车的记录是不重不漏的。\r\n\n形式化地来形容休息区`s`，我们视其为一个容量无限大的空间，假设两列火车 `i` 和 `j` 同时处于休息区`s`中，驶入时刻`Tin`满足`Tin(i)<Tin(j)`，则驶出时间`Tout`必定满足`Tout(i)>Tout(j)`，即，先进后出。\r\n\n## 输入描述\n第一行输入一个整数`T`表示数据组数。\r\n\n对每组测试而言：\r\n\n第一行输入一个整数`n`，表示观察到的火车数量。\r\n\n第二行输入n个整数`x1,x2,...,xn`，表示小美记录的火车驶入休息区`s`的顺序。\r\n\n第三行输入n个整数`y1,y2,...,yn`，表示小美记录的火车驶出休息区`s`的顺序。\r\n\n`1 ≤ T ≤ 10`，`1 ≤ n ≤ 50000`，`1 ≤ xi, yi ≤n`， 且`{xn}` 、`{yn}` 均为`{1,2,3,...,n}`的一个排列，即`1~n`这`n`个数在其中不重不漏恰好出现一次。\r\n\n## 输出描述\n对每组数据输出一行：如果小美记录的驶入和驶出顺序无法被满足则输出`No`，否则输出`Yes`。\r\n\n## 示例一\n### 输入\n```\r\n3\r\n3\r\n1 2 3\r\n1 2 3\r\n3\r\n1 2 3\r\n3 2 1\r\n3\r\n1 2 3\r\n3 1 2\r\n```\n### 输出\n```\r\nYes\r\nYes\r\nNo\r\n```\n## 示例二\n### 输入\n```\r\n3\r\n4\r\n1 2 4 3\r\n1 2 3 4\r\n9\r\n1 2 3 4 5 6 7 8 9\r\n3 2 1 6 5 4 9 8 7\r\n4\r\n1 2 3 4\r\n3 2 1 4\r\n```\n### 输出\n```\r\nYes\r\nYes\r\nYes\r\n```\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 81,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-20 00:31:32",
                "tagList": [
                    "大厂算法真题",
                    "栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "p73r5z",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980232290009089",
                "questionNum": "3423",
                "title": "腾讯2021秋招&用友2022秋招-逛街",
                "content": "## 题目描述\n小Q在周末的时候和他的小伙伴来到大城市逛街，一条步行街上有很多高楼，共有`n`座高楼排成一行。小Q从第一栋一直走到了最后一栋，小Q从来都没有见到这么多的楼，所以他想知道他在每栋楼的位置处能看到多少栋楼呢？（当前面的楼的高度大于等于后面的楼时，后面的楼将被挡住） \r\n\n## 输入描述\n输入为一个数组，表示每一栋楼的高度`wi`\r\n\n`1 <= n <= 100000`\r\n\n`1 <= wi <= 100000`\r\n\n## 输出描述\n输出为一个长度为`n`的数组，表示在第`i`位置能够看到的楼数。\r\n\n## 示例\n### 输入\n```\r\n[5,3,8,3,2,5]\r\n```\n### 输出\n```\r\n[3,3,5,4,4,4]\r\n```\n### 说明\n当小Q处于位置`3`时，他可以向前看到位置`2,1`处的楼，向后看到位置`4,6`处的楼，加上第`3`栋楼，共可看到`5`栋楼。\r\n\n当小Q处于位置`4`时，他可以向前看到位置`3`处的楼，向后看到位置`5,6`处的楼，加上第`4`栋楼，共可看到`4`栋楼。\r\n\n**时间限制：** 4000MS\r\n\n**内存限制：** 589824KB\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 93,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-14 21:07:25",
                "tagList": [
                    "大厂算法真题",
                    "单调栈"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "5tfvr9",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980232487141377",
                "questionNum": "3424",
                "title": "米哈游2023秋招-米小游与魔法少女-奇运",
                "content": "## 题目描述\n米小游都快保底了还没抽到希儿，好生气哦！只能打会活动再拿点水晶。\r\n\n米小游和世界第一可爱的魔法少女 TeRiRi 正在打 BOSS，BOSS 的血量为`h`，当 BOSS 血量小于等于`0`时，BOSS 死亡。TeRiRi 有一套牌，在一轮中，她会按顺序一张一张的将卡牌打出，套牌中有两种卡牌：\r\n\n1. **时来运转**：获得`x`个**幸运币**。\r\n2. **幸运一掷**：造成`x`点伤害，并投掷所有**幸运币**，造成等于所有**幸运币**掷出的点数之和的伤害。\r\n\n**幸运币**可以等概率的投掷出`1∼6`之间的点数。 （所以为什么不叫骰子呢？）\r\n\n米小游想知道，TeRiRi 的套牌在一轮内击杀 BOSS 的概率。\r\n\n## 输入描述\n第一行输入两个整数`n (1≤n≤100)`，`h (1≤h≤10^9)`，分别表示卡牌张数和 BOSS 血量。\r\n\n接下来`n`行，每行首先输入两个整数`t (1≤t≤2)`，`x (1≤x≤10)`，`t`为`1`表示卡牌为时来运转，`t`为`2`表示卡牌为幸运一掷。\r\n\n## 输出描述\n输出一个实数表示答案，你的答案与标准答案的误差不超过`10^−4`都被认为是正确答案。\r\n\n## 示例一\n### 输入\n```\r\n2 5\r\n1 1\r\n2 1\r\n```\n### 输出\n```\r\n0.5\r\n```\n### 说明\n幸运币掷出`4`及以上的概率为`0.5`，再加上`1`点固定伤害，即可击杀BOSS。\r\n\n## 示例二\n### 输入\n```\r\n3 1145\r\n1 4\r\n1 9\r\n1 9\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n无论如何都无法击杀BOSS。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 184,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-23 17:18:34",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "nw1ir9",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980232742993922",
                "questionNum": "3425",
                "title": "华为2023秋招-开电动汽车回家过年",
                "content": "## 题目描述\n新年即将来临，小明计划开新买的电动汽车回老家过年。\r\n\n已知小明的工作地在上海，老家在中部某城市A。上海到城市A的距离是`L`公里`(1 <= L <= 100000)`。\r\n\n小明的电动汽车的电池航程是`P (1 <= P <= 100)`，电池最大电量也是`P`（假设电动汽车行驶一公里需要消耗1度电）。如果电动车在中途电量耗尽了，将无法继续前行，也就无法到达目的地了。\r\n\n已知小明出发前已经把电池充满了。途中依次经过`N (1 <= N < 10000)`个充电站。\r\n\n第`i`个充电站距离城市A（终点）有`Ai`公里，最大可充电`Bi`度。\r\n\n请问，小明能不能顺利地回老家过年？如果可以，请输出最少需要充电多少次；如果不可以，请输出`-1`。\r\n\n## 输入描述\n输入的第一行为数字`N`。\r\n\n接下来的`N`行，每行包含`2`个数并用空格隔开，分别表示`Ai Bi`\r\n\n最后一行包括两个数`L P`，并用空格隔开。\r\n\n## 输出描述\n按照题目要求输出最少次数或者`-1`。\r\n\n## 示例\n### 输入\n```\r\n4\r\n4 4\r\n5 5\r\n11 6\r\n15 8\r\n25 10\r\n```\n### 输出\n```\r\n3\r\n```\n### 说明\n小明出发时电池电量是`10`，距离城市A `25`公里。\r\n\n行驶`10`公里后，到达距离城市A `15`公里的充电站，充电前电池电量为`0`，充电`8`度之后，再出发。\r\n\n行驶`4`公里后，到达距离城市A `11`公里的充电站，充电前电池电量为`4`。充电`6`度之后，再出发。\r\n\n行驶`6`公里后，到达距离城市A `5`公里的充电站，充电前电池电量为`4`，充电`1`度之后，再出发。\r\n\n之后，可以直接开到城市A一共需要充电`3`次才能到达城市A。\r\n\n**时间限制：** C/C++ `1000ms`, 其他语言`2000ms`\r\n\n**内存限制：** C/C++ `256MB`，其他语言 `512MB`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 104,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-14 07:59:00",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "b9lwyd",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980232952709122",
                "questionNum": "3426",
                "title": "科大讯飞非凡计划-小红的区间翻转",
                "content": "小红拿到了两个长度为n的数组 `a` 和`b`，她可以进行恰好一次以下操作：选择`a`数组中的一个区间`[l, r]`，将它们翻转。例如，对于`a`` ``=`` ``[2,3,4,1,5,6]`，小红可以选择区间`[3,5]`，数组`a`则变成`[2,3,5,1,4,6]`。\r\n\n小红希望操作后`a`数组和`b`数组完全相同。请你告诉小红有多少种操作的方案数。\r\n\n第一行输入一个正整数`n`，代表数组的长度。\r\n\n第二行输入`n`个正整数`ai` \r\n\n第三行输入`n`个正整数`bi`\r\n\n`1 ≤n, ai,bi≤ 1000`\r\n\n选择区间的方案数。\r\n\n## 示例\n### 输入\n```\r\n4\r\n1 2 3 1\r\n1 3 2 1\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n可以选择区间`[1, 2, 3,1]`将`a`翻转或者区间`[2,3]`将`a`翻转都能变成`b`，因此总共有`2`种方案\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 68,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:22",
                "updateTime": "2025-06-12 20:24:04",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "zaj0ig",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980233158230018",
                "questionNum": "3427",
                "title": "Bilibili2023秋招-两个字符串的最小ASCII删除和",
                "content": "给定两个字符串`s1`和`s2`，返回使两个字符用相等所需删除字符的ASCII值的最小和。\r\n\n`0 <= s1.length, s2.length <= 1000`\r\n\n`s1`和`s2`由小写英文字母组成.\r\n\n本题为LeetCode核心代码模式，传入两个参数`s1`和`s2`，为两个字符串。\r\n\n返回一个整数，为使两个字符串相等所需删除字符的 ASCII 值的最小和 。\r\n\n## 示例一\n### 输入\n```\r\ns1 = \"sea\"\r\ns2 = \"eat\"\r\n```\n### 输出\n```\r\n231\r\n```\n### 说明\n在 `\"sea\"` 中删除 `\"s\"` 并将 `\"s\"` 的值`(115)`加入总和。在 `\"eat\"` 中删除 `\"t\"` 并将 `116` 加入总和。结束时，两个字符串相等，`115 + 116 = 231` 就是符合条件的最小和。\r\n\n## 示例二\n### 输入\n```\r\ns1 = \"delete\"\r\ns2 = \"leet\"\r\n```\n### 输出\n```\r\n403\r\n```\n### 说明\n在 `\"delete\"` 中删除 `\"dee\"` 字符串变成 `\"let\"`，将 `100(d)+101(e)+101(e) `加入总和。在 `\"leet\"` 中删除 `\"e\"` 将 `101(e)` 加入总和。结束时，两个字符串都等于 `\"let\"`，结果即为 `100+101+101+101 = 403` 。如果改为将两个字符串转换为 `\"lee\"` 或 `\"eet\"`，我们会得到 `433` 或 `417` 的结果，比答案更大。\r\n\n",
                "difficulty": 5,
                "contentType": 0,
                "viewNum": 90,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-23 09:56:01",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "3qmbs2",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980233451831298",
                "questionNum": "3428",
                "title": "字节跳动2023秋招-小红的 01 串",
                "content": "## 题目描述\n小红拿到了一个 `01` 串，她准备将若干个字符`'1'` 染成红色，将若干个字符`'0'` 染成蓝色，但有个限制：如果一个`'0'` 和一个`'1'` 相邻，那么它们不能同时染色。\r\n\n小红想知道，最多可以染多少个字符？\r\n\n## 输入描述\n输入仅有一行，为小红拿到的 `01` 串。\r\n\n字符串长度不超过`200000`。\r\n\n## 输出描述\n一个正整数，代表能染色的最多字符。\r\n\n## 示例一\n### 输入\n```\r\n110011\r\n```\n### 输出\n```\r\n4\r\n```\n### 说明\n染红第一个、第三个、第五个、第六个字符即可。\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 211,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-18 16:36:47",
                "tagList": [
                    "大厂算法真题",
                    "DP&贪心"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "hbi8n9",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980233632186370",
                "questionNum": "3429",
                "title": "得物2023秋招-Cheems的漂亮糖葫芦",
                "content": "## 题目描述\n小狗Cheems在街边买到了一串糖葫芦，这串糖葫芦是由`n`个大写字母构成的。Cheems觉得这串糖葫芦虽然美味，却并不一定能称得上漂亮。当糖葫芦中包含了一串长度为`x`的连续子串，满足正序读与倒序读一模一样时(即是一串回文串)，它会觉得这整串糖葫芦是漂亮的。\r\n\n## 输入描述\n第一行两个以空格隔开的正整数`n`和`x`，表示糖葫芦串长度和Cheems对于子串要求的长度。\r\n\n第二行一个长为`n`的仅包合大写字母的字符串`s`，代表糖葫芦\r\n\n`1 <= n, x <= 5000`\r\n\n## 输出描述\n如果这串糖葫芦是漂亮的，输出`1`，否则输出`0`。\r\n\n## 示例\n### 输入\n```\r\n6 2\r\nAACBBE\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n可以找到称在子串`\"AA\"`，长度为`2`，且正着读与倒着读一模一样.\r\n\n**时间限制：** `3000`MS\r\n\n**内存限制：** `786432`KB\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 53,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-04 17:48:22",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "8t2zt0",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980233850290178",
                "questionNum": "3430",
                "title": "华为2023秋招-PCB印刷电路板布线",
                "content": "## 题目描述\n在PCB印刷电路板设计中，器件之间的连线，要避免线路的阻抗值增大，而且器件之间还有别的器任和别的干扰源，在布线时我们希望受到的干扰尽量小。\r\n\n现将电路板简化成一个`M × N`的矩阵，每个位置（单元格）的值表示其源干扰度。\r\n\n如果单元格的值为`0`，表示此位置没有干扰源，如果单元格的值为非`0`，则表示此位置是干扰源，其值为源干扰度。连线经过干扰源或干扰源附近会增加连线的总干扰度。\r\n\n位置`A[x,y]`的干扰源的源干扰广为`d (d>0)`，则连线的干扰度计算如下：\r\n\n1、若连线经过位置`A[x,y]`，则其总干扰度会增加加\r\n\n2、若连线经过离位置`A[x,y]`距离小于`d`的位置时，设其距离为`k`，则总干扰度会增加`(d-k)`\r\n\n3、若连线经过离位置`A[x,y]`距离大于或等于`d`的位置时，总干扰都不会增加；\r\n\n注：位置`[x1,y1]`和位置`[x2,y2]`之间距离的定义为：`|x1-x2|+|y1-y2|`。\r\n\n如下`3x3`矩阵，位置`[1,1]`的源干扰度是`2`，连线的位置序列为：`[0,0]->[0,1]->[0,2]->[1,2]->[2,2]`。\r\n\n![72111753328](https://pic.code-nav.cn/mianshiya/question_picture/markdown/raPaIgI1_1721117533283_mianshiya.png)\r\n\n其中`[0,1]`和`[1,0]`到干扰源的距离为`1`，会叠加`1`的干扰度；其他位置到`[1,1]`的距离均大于等于`2`，所以不会叠加干扰度。因此这条连线的总干扰度为`2`。\r\n\n现在我们需要将左上角的器件到右下角的器件进行连线，两个器件的位置分别是左上角的`[0,0]`和右下角的`[M-1,N-1]`。由于我们希望连线尽量地短，从位置`[0,0]`到`[M-1,N-1]`的连线途中，我们规定连线只能向下或向右。\r\n\n请根据输入(`M × N`的矩阵)，计算出连线的最小干扰度。\r\n\n## 输入描述\n第一行是两个整数`M`和`N`(`M`和`N`最大值为`1000`)，表示行数和列数；\r\n\n接着是`M`行的数据，每一包含`N`个整数，代表每个位置的源干扰度，每个源干扰度小于`50`。\r\n\n## 输出描述\n左上角`[0,0]`到右下角`[M-1,N-1]`连线的最小总干扰度。\r\n\n## 示例一\n### 输入\n```\r\n3 3\r\n0 0 0\r\n0 2 0\r\n0 0 0\r\n```\n### 输出\n```\r\n2\r\n```\n### 说明\n其中一条可以使干扰度最小的路径为：`[0,0]->[0,1]->[0,2]->[1,2]->[2,2]`，其干扰度为`2`。\r\n\n## 示例二\n### 输入\n```\r\n5 5\r\n0 0 0 0 0\r\n0 0 2 0 0\r\n0 2 0 2 0\r\n0 0 0 0 0\r\n0 0 0 0 0\r\n```\n### 输出\n```\r\n1\r\n```\n### 说明\n先从`[0,0]`往下走到最下面`[4,0]`，再往石走到右下角`[4,4]`，途径`[2,0]`时叠加一个干扰度。\r\n\n## 示例三\n### 输入\n```\r\n5 5\r\n0 0 0 0 0\r\n0 0 2 0 0\r\n0 2 0 2 0\r\n0 0 2 0 0\r\n0 0 0 0 0\r\n```\n### 输出\n```\r\n2\r\n```\n**时间限制：** C/C++ `2000MS`，其他语言`4000MS`\r\n\n**内存限制：** C/C++ `256MB`，其他语言`512MB`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 81,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:23",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:23",
                "updateTime": "2025-06-15 23:08:59",
                "tagList": [
                    "大厂算法真题",
                    "DP"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "8h9bwz",
                "hasChoiceQuestion": false
            }
        ],
        "total": "63",
        "size": "20",
        "current": "2",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "4"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [
            {
                "id": "1814980240015917058",
                "questionNum": "3451",
                "title": "美团2023秋招-小美的蛋糕切割",
                "content": "## 题目描述\n小美有一个矩形的蛋糕，共分成了`n`行`m`列，共`n`*`m`个区域，每个区域是一个小正方形，已知蛋糕每个区域都有一个美味度。她想切一刀把蛋糕切成两部分，自己吃一部分，小团吃另一部分。\r\n\n小美希望两个人吃的部分的美味度之和尽可能接近，请你输出`|s1-s2|`的最小值。（其中`s1`代表小美吃的美味度，`s2`代表小团吃的美味度）。\r\n\n请务必保证，切下来的区域都是完整的，即不能把某个小正方形切成两个小区域。\r\n\n## 输入描述\n第一行输出两个正整数`n`和`m`，代表蛋糕区域的行数和列数。\r\n\n接下来的`n`行，每行输入`m`个正整数`aij`，用来表示每个区域的美味度。\r\n\n`1 ≤ n, m ≤ 10^3`\r\n\n`1 ≤ aij ≤ 10^4`\r\n\n## 输出描述\n一个整数，代表`|s1-s2|`的最小值。\r\n\n## 示例\n### 输入\n```\r\n2 3\r\n1 1 4\r\n5 1 4\r\n```\n### 输出\n```\r\n0\r\n```\n### 说明\n把蛋糕像这样切开：\r\n\n`1 1 | 4`\r\n\n`5 1 | 4`\r\n\n左边蛋糕美味度之和是`8`\r\n\n右边蛋糕美味度之和是`8`\r\n\n所以答案是`0`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 102,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:25",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:24",
                "updateTime": "2025-06-19 14:24:44",
                "tagList": [
                    "大厂算法真题",
                    "前缀和"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "ujk58t",
                "hasChoiceQuestion": false
            },
            {
                "id": "1814980240213049345",
                "questionNum": "3452",
                "title": "美团2023秋招-小美的游戏",
                "content": "## 题目描述\n小美有一个长度为`n`的数组，她最多可以进行`k`次操作，每次操作如下：\r\n\n1. 选择两个整数`i, j`，`1 <= i < j <= n`\r\n2. 选择两个整数`x, y`，使得`x*y = ai*aj`\r\n3. 将`ai`替换为`x`，将`aj`替换为`y`\r\n\n她希望最多进行`k`次操作之后，最后数组中的元素的总和尽可能大。\r\n\n## 输入描述\n一行两个整数`n, k`，表示数组的长度和操作的次数。\r\n\n一行`n`个整数 `a1,a2,...,an`，表示数组的元素。\r\n\n`1 <= k < n <= 10^5`\r\n\n`1 <= ai <= 10^5`\r\n\n## 输出描述\n输出一个整数，表示最后数组中的元素的总和的最大值，由于答案可能很大，你只需要输出答案对`10^9+7`取模的结果。\r\n\n## 示例\n### 输入\n```\r\n5 2\r\n1 2 3 4 5\r\n```\n### 输出\n```\r\n65\r\n```\n### 说明\n第一次操作后，数组变为 `[1, 2, 12, 1, 5]`\r\n\n第二次操作，数组变为 `[1, 2, 60, 1, 1]`\r\n\n",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 138,
                "thumbNum": 0,
                "favourNum": 0,
                "reviewStatus": 1,
                "reviewMessage": "创建题目时填写，默认通过",
                "reviewerId": "1772087337535152129",
                "reviewTime": "2024-07-21 19:06:25",
                "needVip": 0,
                "batchId": "1814980224186613760",
                "note": "已完成原创",
                "userId": "1772087337535152129",
                "createTime": "2024-07-21 19:06:24",
                "updateTime": "2025-06-25 17:10:27",
                "tagList": [
                    "大厂算法真题",
                    "优先队列"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "pd8gl4",
                "hasChoiceQuestion": false
            },
            {
                "id": "1833391642163257346",
                "questionNum": "6303",
                "title": "给两个仅由数字构成的字符串，不使用Integer的parseInt方法，返回它们相加的结果，用字符串表示",
                "difficulty": 3,
                "contentType": 0,
                "viewNum": 1036,
                "thumbNum": 0,
                "favourNum": 2,
                "reviewStatus": 1,
                "needVip": 0,
                "userId": "1783388929455529986",
                "createTime": "2024-09-10 14:26:44",
                "updateTime": "2025-06-25 23:00:08",
                "tagList": [
                    "大厂算法真题"
                ],
                "hasVipAuth": false,
                "hasBestAnswer": false,
                "hasAnswer": false,
                "isNew": false,
                "shareCode": "wezcqq",
                "hasChoiceQuestion": false
            }
        ],
        "total": "63",
        "size": "20",
        "current": "4",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "4"
    },
    "message": "ok"
}
{
    "code": 0,
    "data": {
        "records": [],
        "total": "63",
        "size": "20",
        "current": "5",
        "orders": [],
        "optimizeCountSql": true,
        "searchCount": true,
        "pages": "4"
    },
    "message": "ok"
}
